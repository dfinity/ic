load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("//bazel:defs.bzl", "gzip_compress")
load("//gitlab-ci/src/artifacts:upload.bzl", "upload_artifacts")
load(
    "//rs/nervous_system:compressed_wasm_size_limits.bzl",
    "NNS_CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES",
    "SNS_CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES",
)

CANISTERS = {
    "candid-test-canister.wasm": "//rs/rust_canisters/dfn_candid:candid-test-canister",
    "canister-creator-canister.wasm": "//rs/rust_canisters/canister_creator:canister_creator_canister",
    "cycles-minting-canister.wasm": "//rs/nns/cmc:cycles-minting-canister",
    "genesis-token-canister.wasm": "//rs/nns/gtc:genesis-token-canister",
    "governance-canister.wasm": "//rs/nns/governance:governance-canister",
    "governance-canister_test.wasm": "//rs/nns/governance:governance-canister-test",
    "governance-mem-test-canister.wasm": "//rs/nns/integration_tests:governance-mem-test-canister",
    "http_counter.wasm": "//rs/tests/test_canisters/http_counter:http_counter",
    "ic-ckbtc-minter.wasm": "//rs/bitcoin/ckbtc/minter:ckbtc_minter",
    "ic-ckbtc-minter_debug.wasm": "//rs/bitcoin/ckbtc/minter:ckbtc_minter_debug",
    "ic-ckbtc-kyt.wasm": "//rs/bitcoin/ckbtc/kyt:kyt_canister",
    "ic-cketh-minter.wasm": "//rs/ethereum/cketh/minter:cketh_minter",
    "ic-ledger-suite-orchestrator-canister.wasm": "//rs/ethereum/ledger-suite-orchestrator:ledger_suite_orchestrator_canister",
    "ic-icrc1-index.wasm": "//rs/rosetta-api/icrc1/index:index_canister",
    "ic-icrc1-index-ng.wasm": "//rs/rosetta-api/icrc1/index-ng:index_ng_canister",
    "ic-icrc1-index-ng-u256.wasm": "//rs/rosetta-api/icrc1/index-ng:index_ng_canister_u256",
    "ic-icrc1-ledger.wasm": "//rs/rosetta-api/icrc1/ledger:ledger_canister",
    "ic-icrc1-ledger-u256.wasm": "//rs/rosetta-api/icrc1/ledger:ledger_canister_u256",
    "ic-nervous-system-common-test-canister.wasm": "//rs/nervous_system/common/test_canister:test_canister",
    "ic-icp-index-canister.wasm": "//rs/rosetta-api/icp_ledger/index:ic-icp-index-canister",
    "identity-canister.wasm": "//rs/nns/identity:identity-canister",
    "inter_canister_error_handling.wasm": "//rs/rust_canisters/tests:inter_canister_error_handling",
    "kv_store.wasm": "//rs/tests/test_canisters/kv_store:kv_store",
    "json.wasm": "//rs/rust_canisters/tests:json",
    "ledger-canister.wasm": "//rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm",
    "ledger-canister_notify-method.wasm": "//rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method",
    "lifeline_canister.wasm": "//rs/nns/handlers/lifeline/impl:lifeline_canister",
    "mem-utils-test-canister.wasm": "//rs/nns/integration_tests:mem-utils-test-canister",
    "memory-test-canister.wasm": "//rs/rust_canisters/memory_test:memory_test_canister",
    "nan_canonicalized.wasm": "//rs/rust_canisters/tests:nan_canonicalized",
    "nns-ui-canister.wasm": "//rs/nns/nns-ui:nns-ui-canister",
    "panics.wasm": "//rs/rust_canisters/tests:panics",
    "pmap_canister.wasm": "//rs/rust_canisters/pmap:pmap_canister",
    "proxy_canister.wasm": "//rs/rust_canisters/proxy_canister:proxy_canister",
    "registry-canister.wasm": "//rs/registry/canister:registry-canister",
    "response-payload-test-canister.wasm": "//rs/rust_canisters/response_payload_test:response-payload-test-canister",
    "root-canister.wasm": "//rs/nns/handlers/root/impl:root-canister",
    "sns-governance-canister.wasm": "//rs/sns/governance:sns-governance-canister",
    "sns-governance-canister_test.wasm": "//rs/sns/governance:sns-governance-canister-test",
    "sns-governance-mem-test-canister.wasm": "//rs/sns/integration_tests:sns-governance-mem-test-canister",
    "sns-root-canister.wasm": "//rs/sns/root:sns-root-canister",
    "sns-swap-canister.wasm": "//rs/sns/swap:sns-swap-canister",
    "sns-test-dapp-canister.wasm": "//rs/sns/integration_tests:sns-test-dapp-canister",
    "sns-wasm-canister.wasm": "//rs/nns/sns-wasm:sns-wasm-canister",
    "stable.wasm": "//rs/rust_canisters/tests:stable",
    "statesync-test-canister.wasm": "//rs/rust_canisters/statesync_test:statesync_test_canister",
    "test-notified.wasm": "//rs/rosetta-api/icp_ledger:test_notified_canister",
    "time.wasm": "//rs/rust_canisters/tests:time",
    "upgrade-test-canister.wasm": "//rs/nns/handlers/root/impl:upgrade-test-canister",
    "wasm.wasm": "//rs/rust_canisters/dfn_core:wasm",
    "xnet-test-canister.wasm": "//rs/rust_canisters/xnet_test:xnet-test-canister",
    "cow_safety.wasm": "//rs/tests:src/cow_safety.wasm",
    "counter.wat": "//rs/workload_generator:src/counter.wat",
    "xrc-mock-canister.wasm": "//rs/rosetta-api/tvl/xrc_mock:xrc_mock_canister",
    "bitcoin-mock-canister.wasm": "//rs/bitcoin/mock:bitcoin_canister_mock",
}

DEFAULT_CANISTERS_MAX_SIZE_E5_BYTES = "21"

CANISTERS_MAX_SIZE_E5_BYTES = {
    "ic-ckbtc-minter.wasm": "19",
    "ledger-canister.wasm": "19",
    "ledger-canister_notify-method.wasm": "19",
    "sns-canister.wasm": "15",
}

CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES = {
    # -- FI team --
    # The compressed version of these two canisters should be ~600kb,
    # we are setting the check to 7 to leave some space for growth
    # but enough to get an alert in case of a spike in size.
    "ic-icrc1-ledger.wasm.gz": "7",
    "ic-icrc1-ledger-u256.wasm.gz": "7",

    # -- XC team --
    # The orchestrator needs to embed 3 wasms at compile time
    # (ICRC1 index, ICRC1 ledger, and ICRC1 archive) and size is
    # therefore strictly controlled.
    "ic-ledger-suite-orchestrator-canister.wasm.gz": "16",
}

CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES.update(NNS_CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES)

CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES.update(SNS_CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES)

[
    gzip_compress(
        name = name + ".gz",
        srcs = [target],
    )
    for (name, target) in CANISTERS.items()
]

[
    sh_test(
        name = name + "_size_test",
        srcs = ["file_size_test.sh"],
        data = [target],
        env = {
            "FILE": "$(rootpath " + target + ")",
            "MAX_SIZE": CANISTERS_MAX_SIZE_E5_BYTES.get(
                name,
                DEFAULT_CANISTERS_MAX_SIZE_E5_BYTES,
            ) + "0" * 5,
        },
    )
    for (name, target) in CANISTERS.items()
    if name + ".gz" not in CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES
]

[
    sh_test(
        name = name + "_compressed_size_test",
        srcs = ["file_size_test.sh"],
        data = [name],
        env = {
            "FILE": "$(rootpath " + name + ")",
            "MAX_SIZE": CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES.get(
                name,
                DEFAULT_CANISTERS_MAX_SIZE_E5_BYTES,
            ) + "0" * 5,
        },
    )
    for (name, size) in CANISTERS_MAX_SIZE_COMPRESSED_E5_BYTES.items()
]

COMPRESSED_CANISTERS = {
    "ic-btc-canister.wasm.gz": "@btc_canister//file",
    "ic-icrc1-archive.wasm.gz": "//rs/rosetta-api/icrc1/archive:archive_canister.wasm.gz",
    "ic-icrc1-archive-u256.wasm.gz": "//rs/rosetta-api/icrc1/archive:archive_canister_u256.wasm.gz",
    "ledger-archive-node-canister.wasm.gz": "//rs/rosetta-api/icp_ledger/archive:ledger_archive_node_canister.wasm.gz",
}

# `bazel cquery --output=files` that is used by build-ic script does not show external sources of `filegroup` targets.
[
    copy_file(
        name = "copy_" + compressed_file_name,
        src = target,
        out = compressed_file_name,
    )
    for (compressed_file_name, target) in COMPRESSED_CANISTERS.items()
]

filegroup(
    name = "canisters",
    srcs = [name + ".gz" for name in CANISTERS] +
           [name for name in COMPRESSED_CANISTERS],
    visibility = ["//visibility:public"],
)

[
    copy_file(
        name = name + "-did",
        src = target + ".didfile",
        out = name + ".did",
        allow_symlink = False,
    )
    for (name, target) in CANISTERS.items()
    if (
        name.endswith(".wasm") and not target.startswith("//rs/tests") and not target.endswith(".wasm")
    )
]

filegroup(
    name = "canisters.did",
    srcs = [
        n + "-did"
        for n, t in CANISTERS.items()
        if (
            n.endswith(".wasm") and not t.startswith("//rs/tests") and not t.endswith(".wasm")
        )
    ],
)

upload_artifacts(
    name = "upload",
    inputs = [":canisters"] + [":canisters.did"],
    remote_subdir = "canisters",
    visibility = ["//visibility:public"],
)
