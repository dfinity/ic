load("//bazel:defs.bzl", "gzip_compress")
load("//gitlab-ci/src/artifacts:upload.bzl", "upload_artifacts")
load("//publish:defs.bzl", "release_nostrip_binary", "release_strip_binary", "release_strip_binary_test")

LINUX_ONLY = [
    "metrics-proxy",
    "vsock_guest",
    "vsock_host",
    "fstrim_tool",
    "guestos_tool",
    "hostos_tool",
    "setupos_tool",
]

NO_STRIP = [
    "canister_sandbox",
    "ic-btc-adapter",
    "replica",
]

TEST_BINARIES = [
    "types-test",
]

BINARIES = {
    "canary-proxy": "//rs/boundary_node/canary_proxy:canary-proxy",
    "canister_sandbox": "//rs/canister_sandbox",
    "compiler_sandbox": "//rs/canister_sandbox:compiler_sandbox",
    "ic-btc-adapter": "//rs/bitcoin/adapter:ic-btc-adapter",
    "replica": "//rs/replica:replica",
    "boundary-node-prober": "//rs/boundary_node/prober:boundary-node-prober",
    "certificate-issuer": "//rs/boundary_node/certificate_issuance/certificate_issuer:certificate-issuer",
    "certificate-syncer": "//rs/boundary_node/certificate_issuance/certificate_syncer:certificate-syncer",
    "denylist-updater": "//rs/boundary_node/denylist_updater:denylist-updater",
    "e2e-test-driver": "//rs/scenario_tests:e2e-test-driver",
    "fstrim_tool": "//rs/ic_os/fstrim_tool:fstrim_tool_bin",
    "guestos_tool": "//rs/ic_os/guestos_tool:guestos_tool",
    "hostos_tool": "//rs/ic_os/hostos_tool:hostos_tool",
    "ic-admin": "//rs/registry/admin:ic-admin",
    "ic-backup": "//rs/backup:ic-backup",
    "ic-balance-exporter": "//rs/boundary_node/ic_balance_exporter:ic-balance-exporter",
    "ic-boundary": "//rs/boundary_node/ic_boundary:ic-boundary",
    "ic-boundary-tls": "//rs/boundary_node/ic_boundary:ic-boundary-tls",
    "ic-starter": "//rs/starter:ic-starter",
    "ic-https-outcalls-adapter": "//rs/https_outcalls/adapter:ic-https-outcalls-adapter",
    "ic-consensus-pool-util": "//rs/artifact_pool:ic-consensus-pool-util",
    "ic-crypto-csp": "//rs/crypto:ic-crypto-csp",
    "ic-nns-init": "//rs/nns/init:ic-nns-init",
    "ic-prep": "//rs/prep:ic-prep",
    "ic-recovery": "//rs/recovery:ic-recovery",
    "ic-regedit": "//rs/registry/regedit:ic-regedit",
    "ic-registry-replicator": "//rs/orchestrator/registry_replicator:ic-registry-replicator",
    "ic-replay": "//rs/replay:ic-replay",
    "ic-rosetta-api": "//rs/rosetta-api:ic-rosetta-api",
    "ic-icrc-rosetta": "//rs/rosetta-api/icrc1/rosetta:ic-icrc-rosetta-bin",
    "ic-test-state-machine": "//rs/state_machine_tests:ic-test-state-machine",
    "ic-workload-generator": "//rs/workload_generator:ic-workload-generator",
    "icx-proxy": "//rs/boundary_node/icx_proxy:icx-proxy",
    "icx-proxy-dev": "//rs/boundary_node/icx_proxy:icx-proxy-dev",
    "metrics-proxy": "@crate_index//:metrics-proxy__metrics-proxy",
    "nfplot": "//rs/nervous_system/neurons_fund/nfplot",
    "orchestrator": "//rs/orchestrator",
    "sandbox_launcher": "//rs/canister_sandbox:sandbox_launcher",
    "setupos_tool": "//rs/ic_os/setupos_tool:setupos_tool",
    "sns": "//rs/sns/cli:sns",
    "sns-audit": "//rs/sns/audit:sns-audit",
    "sns-test-feature": "//rs/sns/cli:sns--test_feature",
    "state-tool": "//rs/state_tool:state-tool",
    "systemd-journal-gatewayd-shim": "//rs/boundary_node/systemd_journal_gatewayd_shim:systemd-journal-gatewayd-shim",
    "vsock_guest": "//rs/ic_os/vsock/guest:vsock_guest",
    "vsock_host": "//rs/ic_os/vsock/host:vsock_host",
    "drun": "//rs/drun:drun",
    "pocket-ic": "//rs/pocket_ic_server:pocket-ic-server",
    "types-test": "//rs/types/types:types_test",
}

# test binaries or binaries using test utils
TESTONLY_BINARIES = [
    "drun",
    "e2e-test-driver",
    "ic-admin",
    "ic-backup",
    "ic-boundary",
    "ic-boundary-tls",
    "ic-nns-init",
    "ic-prep",
    "ic-recovery",
    "ic-replay",
    "ic-starter",
    "ic-test-state-machine",
    "pocket-ic",
    "sns-test-feature",
    "types-test",
]

LIBRARIES = {
    "nss_icos": "//rs/ic_os/nss_icos",
}

[release_nostrip_binary(
    name = name + "_bin",
    binary = BINARIES[name],
) for name in BINARIES if name in NO_STRIP and name not in TEST_BINARIES and name not in TESTONLY_BINARIES]

[release_nostrip_binary(
    name = name + "_bin",
    testonly = True,
    binary = BINARIES[name],
) for name in BINARIES if name in NO_STRIP and name not in TEST_BINARIES and name in TESTONLY_BINARIES]

[release_strip_binary(
    name = name + "_bin",
    binary = BINARIES[name],
) for name in BINARIES if name not in NO_STRIP and name not in TEST_BINARIES and name not in TESTONLY_BINARIES]

[release_strip_binary(
    name = name + "_bin",
    testonly = True,
    binary = BINARIES[name],
) for name in BINARIES if name not in NO_STRIP and name not in TEST_BINARIES and name in TESTONLY_BINARIES]

[release_strip_binary_test(
    name = name + "_bin",
    testonly = True,
    binary = BINARIES[name],
) for name in BINARIES if name not in NO_STRIP and name in TEST_BINARIES]

# all targets below are tesonly because the targets violating the testonly flag
# would error at this point

[release_strip_binary(
    name = name + "_lib",
    binary = LIBRARIES[name],
) for name in LIBRARIES]

[
    genrule(
        name = name + "_cleaned",
        testonly = True,
        srcs = [name + "_bin"],
        outs = [name],
        cmd = select({
            "@platforms//os:linux": "objcopy -R .comment -R .note -R .note.gnu.build-id $< $@",
            "@platforms//os:osx": "cp $< $@",
        }),
        executable = True,
        visibility = [
            "//ic-os/boundary-guestos/envs:__subpackages__",
            "//ic-os/guestos/envs:__subpackages__",
            "//ic-os/hostos/envs:__subpackages__",
            "//ic-os/setupos/envs:__subpackages__",
        ],
    )
    for name in BINARIES
    if name not in TEST_BINARIES and name != "ic-https-outcalls-adapter"
]

# TODO: remove "ic-https-outcalls-adapter" exception
# once transition rules are functioning as expected
genrule(
    name = "ic-https-outcalls-adapter_cleaned",
    testonly = True,
    srcs = ["ic-https-outcalls-adapter_bin"],
    outs = ["ic-https-outcalls-adapter"],
    cmd = select({
        "@platforms//os:linux": "objcopy --strip-unneeded -R .comment -R .note -R .note.gnu.build-id $< $@",
        "@platforms//os:osx": "cp $< $@",
    }),
    executable = True,
    visibility = [
        "//ic-os/boundary-guestos/envs:__subpackages__",
        "//ic-os/guestos/envs:__subpackages__",
        "//ic-os/hostos/envs:__subpackages__",
        "//ic-os/setupos/envs:__subpackages__",
    ],
)

[
    genrule(
        name = name + "_cleaned",
        testonly = True,
        srcs = [name + "_bin"],
        outs = [name],
        cmd = select({
            "@platforms//os:linux": "objcopy -R .comment -R .note -R .note.gnu.build-id $< $@",
            "@platforms//os:osx": "cp $< $@",
        }),
        executable = True,
        visibility = [
            "//ic-os/boundary-guestos/envs:__subpackages__",
            "//ic-os/guestos/envs:__subpackages__",
            "//ic-os/hostos/envs:__subpackages__",
            "//ic-os/setupos/envs:__subpackages__",
        ],
    )
    for name in TEST_BINARIES
]

[
    genrule(
        name = name + "_cleaned_lib",
        srcs = [name + "_lib"],
        outs = [name],
        cmd = select({
            "@platforms//os:linux": "objcopy -R .comment -R .note -R .note.gnu.build-id $< $@",
            "@platforms//os:osx": "cp $< $@",
        }),
        executable = True,
        visibility = [
            "//ic-os/boundary-api-guestos/envs:__subpackages__",
            "//ic-os/boundary-guestos/envs:__subpackages__",
            "//ic-os/guestos/envs:__subpackages__",
            "//ic-os/hostos/envs:__subpackages__",
            "//ic-os/setupos/envs:__subpackages__",
        ],
    )
    for name in LIBRARIES
]

[
    gzip_compress(
        name = name + ".gz",
        srcs = [name],
    )
    for name in BINARIES
]

filegroup(
    name = "binaries",
    testonly = True,
    srcs = select({
        "@platforms//os:linux": [name + ".gz" for name in BINARIES],
        "@platforms//os:osx": [name + ".gz" for name in BINARIES if name not in LINUX_ONLY],
    }),
)

upload_artifacts(
    name = "upload",
    testonly = True,
    inputs = [":binaries"],
    remote_subdir = "binaries/" + select({
        "@platforms//cpu:x86_64": "x86_64",
        "@platforms//cpu:arm64": "arm64",
        "//conditions:default": "unknown",
    }) + "-" + select({
        "@platforms//os:linux": "linux",
        "@platforms//os:osx": "darwin",
        "//conditions:default": "unknown",
    }),
)

# https://dfinity.atlassian.net/browse/IDX-2599
# various places in the source code, and possibly other repositories reference
# the legacy upload path. Unwinding it without a will involve an unpredictable amount of time.
upload_artifacts(
    name = "legacy_upload",
    testonly = True,
    inputs = [":binaries"],
    remote_subdir = "release",
    target_compatible_with = ["@platforms//os:linux"],
    visibility = ["//testnet/tools:__pkg__"],
)

BINS_TO_TEST = [":" + name for name in BINARIES]

sh_test(
    name = "binary-libraries-test",
    size = "small",
    srcs = ["binary-libraries-test.sh"],
    args = ["$(rootpath " + b + ")" for b in BINS_TO_TEST],
    data = BINS_TO_TEST,
    tags = [
        "test_macos",
    ],
)
