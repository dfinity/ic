---

- name: Download disk images
  vars:
    aux_nodes: "{{ hostvars[inventory_hostname].groups.aux | intersect(hostvars[inventory_hostname].ic_guests) | default([]) }}"
    boundary_nodes: "{{ hostvars[inventory_hostname].groups.boundary | intersect(hostvars[inventory_hostname].ic_guests) | default([]) }}"
    replica_nodes: "{{ hostvars[inventory_hostname].ic_guests | default([]) | difference(aux_nodes)  | difference(boundary_nodes) }}"
  shell: |
    set -eExuo pipefail
    # check if disk image is available on the new or the old location for the given hash
    PROXY_CONNECT_TIMEOUT=5
    PROXY_CDN_URL="http://download.proxy-global.dfinity.network:8080"
    CDN_URL="https://download.dfinity.systems"
    DEFAULT_UNIVERSAL_VM_IMG_SHA256="93c094b72786ca1e5a47776ff8dba48d10ffa2bcd28701fc9759baa175e5558b"

    declare -A proxy_image_cdn=(
      [aux]="${PROXY_CDN_URL}/farm/universal-vm/${DEFAULT_UNIVERSAL_VM_IMG_SHA256}/x86_64-linux"
      [boundary]="${PROXY_CDN_URL}/ic/{{ ic_git_revision }}/boundary-os/disk-img{{ bn_image_type }}"
      [replica]="${PROXY_CDN_URL}/ic/{{ ic_git_revision }}/guest-os/disk-img-dev"
    )

    declare -A image_cdn=(
      [aux]="${CDN_URL}/farm/universal-vm/${DEFAULT_UNIVERSAL_VM_IMG_SHA256}/x86_64-linux"
      [boundary]="${CDN_URL}/ic/{{ ic_git_revision }}/boundary-os/disk-img{{ bn_image_type }}"
      [replica]="${CDN_URL}/ic/{{ ic_git_revision }}/guest-os/disk-img-dev"
    )

    declare -A image_dir=(
      [aux]="/var/local/ic/disk/{{ ic_deployment_name }}/{{ ic_git_revision }}/aux"
      [replica]="/var/local/ic/disk/{{ ic_deployment_name }}/{{ ic_git_revision }}"
      [boundary]="/var/local/ic/disk/{{ ic_deployment_name }}/{{ ic_git_revision }}/boundary{{ bn_image_type }}"
    )

    # Try to download first from the proxy and fallback to the CDN if that fails.
    # The proxy will always fail to connect in prod, so we should timeout connect fairly quickly
    function curl_proxy() {
      input_path=$1
      output_path=$2
      if ! curl --connect-timeout $PROXY_CONNECT_TIMEOUT --retry 5 --fail "$PROXY_CDN_BASE_URL/$input_path" --output $output_path ; then
          curl --retry 5 --fail "$CDN_BASE_URL/$input_path" --output $output_path
      fi
    }

    function curl_disk_img() {
      set -eExuo pipefail
      disk_type=$1
      IMAGE_DIR=${image_dir[$disk_type]}
      mkdir -p "$IMAGE_DIR"
      cd "$IMAGE_DIR"

      # Check if the disk image has already been downloaded
      if sha256sum -c --ignore-missing SHA256SUMS; then return; fi

      PROXY_CDN_BASE_URL="${proxy_image_cdn[$disk_type]}"
      CDN_BASE_URL="${image_cdn[$disk_type]}"
      if [ "$disk_type" == "aux" ]; then
          curl_proxy universal-vm.img.zst disk-img.zst

          chmod 0644 "disk-img.zst"
          chown root:root "disk-img.zst"
      else
          curl_proxy disk-img.tar.zst disk-img.tar.zst
          curl_proxy SHA256SUMS SHA256SUMS

          chmod 0644 "disk-img.tar.zst"
          chown root:root "disk-img.tar.zst"

          sha256sum -c --ignore-missing SHA256SUMS
      fi
    }

    disk_types=()
    if [ ! -z "{{ aux_nodes | join(' ') }}" ]; then
        disk_types+=(aux)
    fi
    if [ ! -z "{{ boundary_nodes | join(' ') }}" ]; then
        disk_types+=(boundary)
    fi
    if [ ! -z "{{ replica_nodes | join(' ') }}" ]; then
        disk_types+=(replica)
    fi

    # download the IC-OS disk images for aux, boundary, and replica in parallel
    set +x
    source /usr/bin/env_parallel.bash
    env_parallel curl_disk_img ::: "${disk_types[@]}"
  args:
    executable: /bin/bash
  register: script_res
  changed_when: "script_res.stdout | default('')"
  retries: 10
  delay: 10
  until: script_res is not failed
  tags: [ "ic_guest" ]

- name: unarchive image files # noqa risky-shell-pipe
  vars:
    aux_nodes: "{{ hostvars[inventory_hostname].groups.aux | intersect(hostvars[inventory_hostname].ic_guests) | default([]) }}"
    boundary_nodes: "{{ hostvars[inventory_hostname].groups.boundary | intersect(hostvars[inventory_hostname].ic_guests) | default([]) }}"
    replica_nodes: "{{ hostvars[inventory_hostname].ic_guests | default([]) | difference(aux_nodes)  | difference(boundary_nodes) }}"
  shell: |
    # if the unpacked file does not exist or if the archive is newer than the unpacked file
    set -eExuo pipefail

    declare -A image_dir=(
        [aux]="/var/local/ic/disk/{{ ic_deployment_name }}/{{ ic_git_revision }}/aux"
        [boundary]="/var/local/ic/disk/{{ ic_deployment_name }}/{{ ic_git_revision }}/boundary{{ bn_image_type }}"
        [replica]="/var/local/ic/disk/{{ ic_deployment_name }}/{{ ic_git_revision }}"
    )

    disk_types=()
    if [ ! -z "{{ aux_nodes | join(' ') }}" ]; then
        disk_types+=(aux)
    fi
    if [ ! -z "{{ boundary_nodes | join(' ') }}" ]; then
        disk_types+=(boundary)
    fi
    if [ ! -z "{{ replica_nodes | join(' ') }}" ]; then
        disk_types+=(replica)
    fi

    # unarchive each disk type
    for disk_type in "${disk_types[@]}"; do
        if [ "$disk_type" == "aux" ]; then
            IMAGE_DIR=${image_dir[$disk_type]}
            cd "$IMAGE_DIR"
            zstd -f -d disk-img.zst -o disk.img
        else
            IMAGE_DIR=${image_dir[$disk_type]}
            cd "$IMAGE_DIR"
            tar xavf disk-img.tar.zst --sparse
        fi
    done

  args:
    executable: /bin/bash
  register: script_res
  changed_when: "script_res.stdout | default('')"
  tags: [ "ic_guest" ]
