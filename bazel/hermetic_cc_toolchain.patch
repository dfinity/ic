# Extend hermetic_cc_toolchain with a wasm target that does not use wasi
# (https://github.com/uber/hermetic_cc_toolchain/pull/214), and add a path to
# put additional restrictions on the generated toolchains so that we can
# restrict which targets pick up the toolchains
# (https://github.com/uber/hermetic_cc_toolchain/pull/213).
# Strip debug_info off every target for determinism
# (https://github.com/ziglang/zig/issues/23821,
# https://github.com/ziglang/zig/issues/23823).
# And update zig to 0.14.1 to fix libunwind
# (https://github.com/llvm/llvm-project/pull/92291).
diff --git a/MODULE.bazel b/MODULE.bazel
index 409d626..15b70b3 100644
--- a/MODULE.bazel
+++ b/MODULE.bazel
@@ -49,7 +49,25 @@ register_toolchains(
     "@zig_sdk//libc_aware/toolchain:linux_arm64_musl",
     # wasm/wasi toolchains
     "@zig_sdk//toolchain:wasip1_wasm",
+    "@zig_sdk//toolchain:none_wasm",
 
     # These toolchains are only registered locally.
     dev_dependency = True,
 )
+
+bazel_dep(name = "bazel_skylib", version = "1.7.1")
+
+new_local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "new_local_repository")
+new_local_repository(
+    name = "strip",
+    build_file_content = """
+load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
+
+native_binary(
+name = "strip_bin",
+src = ":strip",
+visibility = ["//visibility:public"],
+)
+""",
+    path = "/usr/bin",
+)
diff --git a/toolchain/defs.bzl b/toolchain/defs.bzl
index f6f613e..62007fd 100644
--- a/toolchain/defs.bzl
+++ b/toolchain/defs.bzl
@@ -19,20 +19,20 @@ _DEFAULT_INCLUDE_DIRECTORIES = [
 ]
 
 _HOST_PLATFORM_EXT = {
-    "linux-aarch64": "tar.xz",
-    "linux-x86_64": "tar.xz",
-    "macos-aarch64": "tar.xz",
-    "macos-x86_64": "tar.xz",
-    "windows-x86_64": "zip",
+    "aarch64-linux": "tar.xz",
+    "x86_64-linux": "tar.xz",
+    "aarch64-macos": "tar.xz",
+    "x86_64-macos": "tar.xz",
+    "x86_64-windows": "zip",
 }
 
 # map bazel's host_platform to zig's -target= and -mcpu=
 _TARGET_MCPU = {
-    "linux-aarch64": ("aarch64-linux-musl", "baseline"),
-    "linux-x86_64": ("x86_64-linux-musl", "baseline"),
-    "macos-aarch64": ("aarch64-macos-none", "apple_a14"),
-    "macos-x86_64": ("x86_64-macos-none", "baseline"),
-    "windows-x86_64": ("x86_64-windows-gnu", "baseline"),
+    "aarch64-linux": ("aarch64-linux-musl", "baseline"),
+    "x86_64-linux": ("x86_64-linux-musl", "baseline"),
+    "aarch64-macos": ("aarch64-macos-none", "apple_a14"),
+    "x86_64-macos": ("x86_64-macos-none", "baseline"),
+    "x86_64-windows": ("x86_64-windows-gnu", "baseline"),
 }
 
 _compile_failed = """
@@ -60,7 +60,8 @@ def toolchains(
         version = VERSION,
         url_formats = [],
         host_platform_sha256 = HOST_PLATFORM_SHA256,
-        host_platform_ext = _HOST_PLATFORM_EXT):
+        host_platform_ext = _HOST_PLATFORM_EXT,
+        extra_settings = []):
     """
         Download zig toolchain and declare bazel toolchains.
         The platforms are not registered automatically, that should be done by
@@ -83,6 +84,7 @@ def toolchains(
         url_formats = url_formats,
         host_platform_sha256 = host_platform_sha256,
         host_platform_ext = host_platform_ext,
+        extra_settings = extra_settings
     )
 
 def _quote(s):
@@ -100,7 +102,7 @@ def _zig_repository_impl(repository_ctx):
     if os.startswith("windows"):
         os = "windows"
 
-    host_platform = "{}-{}".format(os, arch)
+    host_platform = "{}-{}".format(arch, os)
 
     zig_sha256 = repository_ctx.attr.host_platform_sha256[host_platform]
     zig_ext = repository_ctx.attr.host_platform_ext[host_platform]
@@ -110,6 +112,8 @@ def _zig_repository_impl(repository_ctx):
         "host_platform": host_platform,
     }
 
+    extra_settings = "[" + " ".join([_quote(str(setting)) for setting in repository_ctx.attr.extra_settings]) + "]"
+
     # Fetch Label dependencies before doing download/extract.
     # The Bazel docs are not very clear about this behavior but see:
     # https://bazel.build/extending/repo#when_is_the_implementation_function_executed
@@ -117,7 +121,6 @@ def _zig_repository_impl(repository_ctx):
     # https://github.com/bazelbuild/bazel-gazelle/pull/1206
     for dest, src in {
         "platform/BUILD": "//toolchain/platform:BUILD",
-        "toolchain/BUILD": "//toolchain/toolchain:BUILD",
         "libc/BUILD": "//toolchain/libc:BUILD",
         "libc_aware/platform/BUILD": "//toolchain/libc_aware/platform:BUILD",
         "libc_aware/toolchain/BUILD": "//toolchain/libc_aware/toolchain:BUILD",
@@ -126,6 +129,7 @@ def _zig_repository_impl(repository_ctx):
 
     for dest, src in {
         "BUILD": "//toolchain:BUILD.sdk.bazel",
+        "toolchain/BUILD": "//toolchain/toolchain:BUILD",
     }.items():
         repository_ctx.template(
             dest,
@@ -134,6 +138,7 @@ def _zig_repository_impl(repository_ctx):
             substitutions = {
                 "{zig_sdk_path}": _quote("external/zig_sdk"),
                 "{os}": _quote(os),
+                "{extra_settings}": extra_settings,
             },
         )
 
@@ -148,7 +153,7 @@ def _zig_repository_impl(repository_ctx):
     cache_prefix = repository_ctx.os.environ.get("HERMETIC_CC_TOOLCHAIN_CACHE_PREFIX", "")
     if cache_prefix == "":
         if os == "windows":
-            cache_prefix = "C:\\\\Temp\\\\zig-cache"
+            fail("windows is not supported")
         elif os == "macos":
             cache_prefix = "/var/tmp/zig-cache"
         elif os == "linux":
@@ -156,6 +161,10 @@ def _zig_repository_impl(repository_ctx):
         else:
             fail("unknown os: {}".format(os))
 
+    # use the catchall config to ensure all builds use a `zig-cache/config-FOO/`
+    # subdirectory, including the zig-wrapper itself
+    cache_prefix = cache_prefix + "/config-catchall"
+
     repository_ctx.template(
         "tools/zig-wrapper.zig",
         Label("//toolchain:zig-wrapper.zig"),
@@ -230,6 +239,7 @@ zig_repository = repository_rule(
         "host_platform_sha256": attr.string_dict(),
         "url_formats": attr.string_list(allow_empty = False),
         "host_platform_ext": attr.string_dict(),
+        "extra_settings": attr.label_list(),
     },
     environ = ["HERMETIC_CC_TOOLCHAIN_CACHE_PREFIX"],
     implementation = _zig_repository_impl,
@@ -272,6 +282,7 @@ def declare_files(os):
                 ":zig",
                 ":{}_includes".format(target_config.zigtarget),
                 cxx_tool_label,
+                "@strip//:strip_bin",
             ],
         )
 
@@ -281,6 +292,7 @@ def declare_files(os):
                 ":zig",
                 ":{}_includes".format(target_config.zigtarget),
                 cxx_tool_label,
+                "@strip//:strip_bin",
             ] + native.glob([
                 "lib/libc/{}/**".format(target_config.libc),
                 "lib/libcxx/**",
diff --git a/toolchain/ext.bzl b/toolchain/ext.bzl
index ebf0ff8..c2e8af3 100644
--- a/toolchain/ext.bzl
+++ b/toolchain/ext.bzl
@@ -1,6 +1,11 @@
 load("@hermetic_cc_toolchain//toolchain:defs.bzl", zig_toolchains = "toolchains")
 
 def _toolchains_impl(ctx):
-    zig_toolchains()
+    extra_settings = []
+    for mod in ctx.modules:
+        for tag in mod.tags.extra_settings:
+            extra_settings += tag.settings
 
-toolchains = module_extension(implementation = _toolchains_impl)
+    zig_toolchains(extra_settings = extra_settings)
+
+toolchains = module_extension(implementation = _toolchains_impl, tag_classes = { "extra_settings": tag_class(attrs = { "settings": attr.label_list(doc = "Each setting is added to every toolchain to make them more restrictive.")})})
diff --git a/toolchain/platform/defs.bzl b/toolchain/platform/defs.bzl
index d4a8344..faafc5b 100644
--- a/toolchain/platform/defs.bzl
+++ b/toolchain/platform/defs.bzl
@@ -16,6 +16,7 @@ def declare_platforms():
 
     # We can support GOARCH=wasm32 after https://github.com/golang/go/issues/63131
     declare_platform("wasm", "wasm32", "wasi", "wasip1")
+    declare_platform("wasm", "wasm32", "none", "none")
 
 def declare_libc_aware_platforms():
     # create @zig_sdk//{os}_{arch}_platform entries with zig and go conventions
diff --git a/toolchain/private/defs.bzl b/toolchain/private/defs.bzl
index 716a3a3..6d0e2bc 100644
--- a/toolchain/private/defs.bzl
+++ b/toolchain/private/defs.bzl
@@ -49,6 +49,7 @@ def target_structs():
         for glibc in _GLIBCS:
             ret.append(_target_linux_gnu(gocpu, zigcpu, glibc))
     ret.append(_target_wasm())
+    ret.append(_target_wasm_no_wasi())
     return ret
 
 def _target_macos(gocpu, zigcpu):
@@ -161,7 +162,7 @@ def _target_linux_gnu(gocpu, zigcpu, glibc_version):
         linkopts = [],
         dynamic_library_linkopts = [],
         supports_dynamic_linker = True,
-        copts = [],
+        copts = ["-D_GNU_SOURCE"],
         libc = "glibc",
         bazel_target_cpu = "k8",
         constraint_values = [
@@ -222,3 +223,22 @@ def _target_wasm():
         ld_zig_subcmd = "wasm-ld",
         artifact_name_patterns = [],
     )
+
+def _target_wasm_no_wasi():
+    return struct(
+        gotarget = "none_wasm",
+        zigtarget = "wasm32-freestanding-musl",
+        includes = [] + _INCLUDE_TAIL,
+        linkopts = [],
+        dynamic_library_linkopts = [],
+        supports_dynamic_linker = False,
+        copts = [],
+        libc = "musl",
+        bazel_target_cpu = "wasm32",
+        constraint_values = [
+            "@platforms//os:none",
+            "@platforms//cpu:wasm32",
+        ],
+        ld_zig_subcmd = "wasm-ld",
+        artifact_name_patterns = [],
+    )
diff --git a/toolchain/private/zig_sdk.bzl b/toolchain/private/zig_sdk.bzl
index a328df5..0f60aaf 100644
--- a/toolchain/private/zig_sdk.bzl
+++ b/toolchain/private/zig_sdk.bzl
@@ -1,12 +1,12 @@
-VERSION = "0.12.0"
+VERSION = "0.14.1"
 
 HOST_PLATFORM_SHA256 = {
-    "linux-aarch64": "754f1029484079b7e0ca3b913a0a2f2a6afd5a28990cb224fe8845e72f09de63",
-    "linux-x86_64": "c7ae866b8a76a568e2d5cfd31fe89cdb629bdd161fdd5018b29a4a0a17045cad",
-    "macos-aarch64": "294e224c14fd0822cfb15a35cf39aa14bd9967867999bf8bdfe3db7ddec2a27f",
-    "macos-x86_64": "4d411bf413e7667821324da248e8589278180dbc197f4f282b7dbb599a689311",
-    "windows-aarch64": "04c6b92689241ca7a8a59b5f12d2ca2820c09d5043c3c4808b7e93e41c7bf97b",
-    "windows-x86_64": "2199eb4c2000ddb1fba85ba78f1fcf9c1fb8b3e57658f6a627a8e513131893f5",
+    "aarch64-linux": "f7a654acc967864f7a050ddacfaa778c7504a0eca8d2b678839c21eea47c992b",
+    "x86_64-linux": "24aeeec8af16c381934a6cd7d95c807a8cb2cf7df9fa40d359aa884195c4716c",
+    "aarch64-macos": "39f3dc5e79c22088ce878edc821dedb4ca5a1cd9f5ef915e9b3cc3053e8faefa",
+    "x86_64-macos": "b0f8bdfb9035783db58dd6c19d7dea89892acc3814421853e5752fe4573e5f43",
+    "aarch64-windows": "b5aac0ccc40dd91e8311b1f257717d8e3903b5fefb8f659de6d65a840ad1d0e7",
+    "x86_64-windows": "554f5378228923ffd558eac35e21af020c73789d87afeabf4bfd16f2e6feed2c",
 }
 
 # Official recommended version. Should use this when we have a usable release.
diff --git a/toolchain/toolchain/BUILD b/toolchain/toolchain/BUILD
index 552fcaa..8f7dba5 100644
--- a/toolchain/toolchain/BUILD
+++ b/toolchain/toolchain/BUILD
@@ -4,4 +4,4 @@ package(
     default_visibility = ["//visibility:public"],
 )
 
-declare_toolchains()
+declare_toolchains(extra_settings = {extra_settings})
diff --git a/toolchain/toolchain/defs.bzl b/toolchain/toolchain/defs.bzl
index 50cc881..0549c26 100644
--- a/toolchain/toolchain/defs.bzl
+++ b/toolchain/toolchain/defs.bzl
@@ -1,6 +1,6 @@
 load("@hermetic_cc_toolchain//toolchain/private:defs.bzl", "target_structs")
 
-def declare_toolchains():
+def declare_toolchains(extra_settings = []):
     for target_config in target_structs():
         gotarget = target_config.gotarget
         zigtarget = target_config.zigtarget
@@ -12,7 +12,7 @@ def declare_toolchains():
         if hasattr(target_config, "libc_constraint"):
             extra_constraints = ["@zig_sdk//libc:unconstrained"]
 
-        _declare_toolchain(gotarget, zigtarget, target_config.constraint_values + extra_constraints)
+        _declare_toolchain(gotarget, zigtarget, target_config.constraint_values + extra_constraints, extra_settings)
 
 def declare_libc_aware_toolchains():
     for target_config in target_structs():
@@ -25,13 +25,14 @@ def declare_libc_aware_toolchains():
         if hasattr(target_config, "libc_constraint"):
             _declare_toolchain(gotarget, zigtarget, target_config.constraint_values + [target_config.libc_constraint])
 
-def _declare_toolchain(gotarget, zigtarget, target_compatible_with):
+def _declare_toolchain(gotarget, zigtarget, target_compatible_with, extra_settings):
     # register two kinds of toolchain targets: Go and Zig conventions.
     # Go convention: amd64/arm64, linux/darwin
     native.toolchain(
         name = gotarget,
         exec_compatible_with = None,
         target_compatible_with = target_compatible_with,
+        target_settings = extra_settings,
         toolchain = "@zig_sdk//:%s_cc" % zigtarget,
         toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
     )
@@ -41,6 +42,7 @@ def _declare_toolchain(gotarget, zigtarget, target_compatible_with):
         name = zigtarget,
         exec_compatible_with = None,
         target_compatible_with = target_compatible_with,
+        target_settings = extra_settings,
         toolchain = "@zig_sdk//:%s_cc" % zigtarget,
         toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
     )
diff --git a/toolchain/zig-wrapper.zig b/toolchain/zig-wrapper.zig
index d1d59f9..94bdd4b 100644
--- a/toolchain/zig-wrapper.zig
+++ b/toolchain/zig-wrapper.zig
@@ -55,7 +55,7 @@ const std = @import("std");
 const fs = std.fs;
 const mem = std.mem;
 const process = std.process;
-const ChildProcess = std.ChildProcess;
+const ChildProcess = std.process.Child;
 const ArrayListUnmanaged = std.ArrayListUnmanaged;
 const sep = fs.path.sep_str;
 
@@ -93,7 +93,7 @@ const ParseResults = union(Action) {
 };
 
 // sub-commands in the same folder as `zig-wrapper`
-const sub_commands_target = std.ComptimeStringMap(void, .{
+const sub_commands_target = std.StaticStringMap(void).initComptime(.{
     .{"ar"},
     .{"ld.lld"},
     .{"lld-link"},
@@ -132,7 +132,7 @@ pub fn main() u8 {
             if (builtin.os.tag == .windows)
                 return spawnWindows(arena, params)
             else
-                return execUnix(arena, params);
+                return spawnAndStripUnix(arena, params);
         },
     }
 }
@@ -161,6 +161,71 @@ fn execUnix(arena: mem.Allocator, params: ExecParams) u8 {
     return 1;
 }
 
+fn makeSuffix(allocator: std.mem.Allocator, pwd: []const u8) ![]const u8 {
+    var it = std.mem.tokenizeScalar(u8, pwd, '/');
+
+    while (it.next()) |segment| {
+        if (std.mem.startsWith(u8, segment, "k8-opt-")) {
+            var hasher = std.hash.Wyhash.init(0);
+            hasher.update(segment);
+            const hash_value = hasher.final();
+            return std.fmt.allocPrint(allocator, "config-{x}", .{hash_value});
+        }
+    }
+
+    // no "k8-opt-" found
+    return std.fmt.allocPrint(allocator, "config-catchall", .{});
+}
+
+fn spawnAndStripUnix(arena: mem.Allocator, params: ExecParams) u8 {
+    // Build a strip command
+    const strip_cmd = blk: {
+        var list = ArrayListUnmanaged([]const u8){};
+        list.appendSlice(arena, &[_][]const u8{ "strip", "-S" }) catch |err| {
+            return fatal("error building strip cmd: {s}\n", .{@errorName(err)});
+        };
+
+        // Find any output targets
+        var next = false;
+        for (params.args.items) |param| {
+            if (mem.eql(u8, param, "-o")) {
+                next = true;
+            } else if (next) {
+                list.append(arena, param) catch |err| {
+                    return fatal("error adding output target: {s}\n", .{@errorName(err)});
+                };
+                break;
+            }
+        }
+        break :blk list;
+    };
+
+    // Run the intended zig process
+    var proc = ChildProcess.init(params.args.items, arena);
+    proc.env_map = &params.env;
+
+    const ret = proc.spawnAndWait() catch |err| {
+        return fatal("error spawning {s}: {s}\n", .{ params.args.items[0], @errorName(err) });
+    };
+
+    const code = switch (ret) {
+        .Exited => |code| code,
+        else => |other| return fatal("abnormal exit: {any}\n", .{other}),
+    };
+
+    // Run strip command, ignore output
+    var strip_proc = ChildProcess.init(strip_cmd.items, arena);
+    strip_proc.env_map = &params.env;
+    strip_proc.stdout_behavior = .Ignore;
+    strip_proc.stderr_behavior = .Ignore;
+
+    _ = strip_proc.spawnAndWait() catch |err| {
+        return fatal("running strip: {s}\n", .{@errorName(err)});
+    };
+
+    return code;
+}
+
 // argv_it is an object that has such method:
 //     fn next(self: *Self) ?[]const u8
 // in non-testing code it is *process.ArgIterator.
@@ -217,9 +282,19 @@ fn parseArgs(
     var env = process.getEnvMap(arena) catch |err|
         return parseFatal(arena, "error getting env: {s}", .{@errorName(err)});
 
+    // Get the current working directory (PWD)
+    const allocator = std.heap.page_allocator;
+    const pwd = std.fs.cwd().realpathAlloc(allocator, ".") catch {
+        std.process.exit(1);
+    };
+    defer allocator.free(pwd);
+
+    const suffix = try makeSuffix(arena, pwd);
+    const cache_dir = try std.fmt.allocPrint(arena, "{s}/{s}", .{ CACHE_DIR, suffix });
+
     try env.put("ZIG_LIB_DIR", zig_lib_dir);
-    try env.put("ZIG_LOCAL_CACHE_DIR", CACHE_DIR);
-    try env.put("ZIG_GLOBAL_CACHE_DIR", CACHE_DIR);
+    try env.put("ZIG_LOCAL_CACHE_DIR", cache_dir);
+    try env.put("ZIG_GLOBAL_CACHE_DIR", cache_dir);
 
     // args is the path to the zig binary and args to it.
     var args = ArrayListUnmanaged([]const u8){};
@@ -276,14 +351,14 @@ fn getRunMode(self_exe: []const u8, self_base_noexe: []const u8) error{BadParent
     // strings `is.it.x86_64?-stallinux,macos-`; we are trying to aid users
     // that run things from the wrong directory, not trying to punish the ones
     // having fun.
-    var it = mem.split(u8, triple, "-");
+    var it = mem.splitScalar(u8, triple, '-');
 
     const arch = it.next() orelse return error.BadParent;
     if (mem.indexOf(u8, "aarch64,x86_64,wasm32", arch) == null)
         return error.BadParent;
 
     const got_os = it.next() orelse return error.BadParent;
-    if (mem.indexOf(u8, "linux,macos,windows,wasi", got_os) == null)
+    if (mem.indexOf(u8, "linux,macos,windows,wasi,freestanding", got_os) == null)
         return error.BadParent;
 
     // ABI triple is too much of a moving target
