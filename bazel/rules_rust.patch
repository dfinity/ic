# Backports for https://github.com/bazelbuild/rules_rust/issues/2974 and https://github.com/bazelbuild/rules_rust/pull/2981
diff --git a/cargo/cargo_build_script_runner/bin.rs b/cargo/cargo_build_script_runner/bin.rs
index 2dab3578..b5bb4fca 100644
--- a/cargo/cargo_build_script_runner/bin.rs
+++ b/cargo/cargo_build_script_runner/bin.rs
@@ -187,9 +187,9 @@ fn run_buildrs() -> Result<(), String> {
         .as_bytes(),
     )
     .unwrap_or_else(|_| panic!("Unable to write file {:?}", output_dep_env_path));
-    write(&stdout_path, process_output.stdout)
+    write(&stdout_path, "")
         .unwrap_or_else(|_| panic!("Unable to write file {:?}", stdout_path));
-    write(&stderr_path, process_output.stderr)
+    write(&stderr_path, "")
         .unwrap_or_else(|_| panic!("Unable to write file {:?}", stderr_path));

     let CompileAndLinkFlags {
diff --git a/crate_universe/private/crate.bzl b/crate_universe/private/crate.bzl
index c493e9a6..ad317abf 100644
--- a/crate_universe/private/crate.bzl
+++ b/crate_universe/private/crate.bzl
@@ -230,7 +230,22 @@ def _stringify_label(value):
 def _stringify_list(values):
     if not values:
         return values
-    return [str(x) for x in values]
+
+    if type(values) == "list":
+        return [str(x) for x in values]
+
+
+
+
+    if type(values) == "struct" and type(values.selects) != "NoneType":
+        new_selects = {}
+
+        for k, v in values.selects.items():
+            new_selects[k] = [str(x) for x in values.selects[k]]
+
+        return struct(common = [str(x) for x in values.common], selects = new_selects)
+
+    fail("Cannot stringify unknown type for list '{}'".format(values))

 def _select(common, selects):
     """A Starlark Select for `crate.annotation()`.
