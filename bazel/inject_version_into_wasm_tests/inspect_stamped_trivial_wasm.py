"""
Test(s) for the inject_version_into_wasm function defined in ../canisters.bzl.

Requires the following environment varianbles to be set:

  1. IC_WASM_PATH: Path to the ic-wasm tool, which can be installed via
     `cargo install ic-wasm`.
  2. STAMPED_WASM_PATH: Path to .wasm file generated by a inject_version_into_wasm
     rule. Such a wasm is supposed to have a WASM custom section named
     'icp:public git_commit_id'.
  3. VERSION_TXT_PATH: The contents of this file (with whitespace
     stripped from both ends) contains the value that's supposed to be
     associated with the aforementioned WASM custom section.
"""

import os
import subprocess
import unittest


class InjectVersionIntoWasmTest(unittest.TestCase):
    def test_wasm_custom_section_(self):
        # See the module docstring for a description of these inputs.
        ic_wasm_path = os.getenv("IC_WASM_PATH")
        stamped_wasm_path = os.getenv("STAMPED_WASM_PATH")
        version_txt_path = os.getenv("VERSION_TXT_PATH")

        with open(version_txt_path) as f:
            expected_git_commit_id = f.read().strip()

        list_metadata_process = subprocess.run(
            [ic_wasm_path, stamped_wasm_path, "metadata"],
            capture_output=True,
            check=True,
            text=True,
        )
        self.assertIn("icp:public git_commit_id", list_metadata_process.stdout, f"{repr(list_metadata_process)}")

        show_git_commit_id_process = subprocess.run(
            [ic_wasm_path, stamped_wasm_path, "metadata", "git_commit_id"],
            capture_output=True,
            check=True,
            text=True,
        )
        self.assertIn(expected_git_commit_id, show_git_commit_id_process.stdout, f"{repr(show_git_commit_id_process)}")


if __name__ == "__main__":
    unittest.main()
