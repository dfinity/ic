# allow setting rustc env via build setting
# https://github.com/bazelbuild/rules_rust/pull/3510
diff --git a/rust/private/rust.bzl b/rust/private/rust.bzl
index 74d458eef..bb51c9cf4 100644
--- a/rust/private/rust.bzl
+++ b/rust/private/rust.bzl
@@ -531,12 +531,18 @@ RUSTC_ATTRS = {
     "_error_format": attr.label(
         default = Label("//rust/settings:error_format"),
     ),
+    "_extra_exec_rustc_env": attr.label(
+        default = Label("//rust/settings:extra_exec_rustc_env"),
+    ),
     "_extra_exec_rustc_flag": attr.label(
         default = Label("//rust/settings:extra_exec_rustc_flag"),
     ),
     "_extra_exec_rustc_flags": attr.label(
         default = Label("//rust/settings:extra_exec_rustc_flags"),
     ),
+    "_extra_rustc_env": attr.label(
+        default = Label("//rust/settings:extra_rustc_env"),
+    ),
     "_extra_rustc_flag": attr.label(
         default = Label("//rust/settings:extra_rustc_flag"),
     ),
diff --git a/rust/private/rustc.bzl b/rust/private/rustc.bzl
index d78c28902..1e638fdf9 100644
--- a/rust/private/rustc.bzl
+++ b/rust/private/rustc.bzl
@@ -67,6 +67,16 @@ ErrorFormatInfo = provider(
     fields = {"error_format": "(string) [" + ", ".join(_error_format_values) + "]"},
 )

+ExtraRustcEnvInfo = provider(
+    doc = "Pass each value as an environment variable to non-exec rustc invocations",
+    fields = {"extra_rustc_env": "List[string] Extra env to pass to rustc in non-exec configuration"},
+)
+
+ExtraExecRustcEnvInfo = provider(
+    doc = "Pass each value as an environment variable to exec rustc invocations",
+    fields = {"extra_exec_rustc_env": "List[string] Extra env to pass to rustc in exec configuration"},
+)
+
 ExtraRustcFlagsInfo = provider(
     doc = "Pass each value as an additional flag to non-exec rustc invocations",
     fields = {"extra_rustc_flags": "List[string] Extra flags to pass to rustc in non-exec configuration"},
@@ -1102,6 +1112,10 @@ def construct_arguments(
     else:
         rustc_flags.add_all(toolchain.extra_rustc_flags, map_each = map_flag)

+    # extra_rustc_env applies to the target configuration, not the exec configuration.
+    if hasattr(ctx.attr, "_extra_rustc_env") and not is_exec_configuration(ctx):
+        env.update(ctx.attr._extra_rustc_env[ExtraRustcEnvInfo].extra_rustc_env)
+
     # extra_rustc_flags apply to the target configuration, not the exec configuration.
     if hasattr(ctx.attr, "_extra_rustc_flags") and not is_exec_configuration(ctx):
         rustc_flags.add_all(ctx.attr._extra_rustc_flags[ExtraRustcFlagsInfo].extra_rustc_flags, map_each = map_flag)
@@ -1113,6 +1127,9 @@ def construct_arguments(
         per_crate_rustc_flags = ctx.attr._per_crate_rustc_flag[PerCrateRustcFlagsInfo].per_crate_rustc_flags
         _add_per_crate_rustc_flags(ctx, rustc_flags, map_flag, crate_info, per_crate_rustc_flags)

+    if hasattr(ctx.attr, "_extra_exec_rustc_env") and is_exec_configuration(ctx):
+        env.update(ctx.attr._extra_exec_rustc_env[ExtraExecRustcEnvInfo].extra_exec_rustc_env)
+
     if hasattr(ctx.attr, "_extra_exec_rustc_flags") and is_exec_configuration(ctx):
         rustc_flags.add_all(ctx.attr._extra_exec_rustc_flags[ExtraExecRustcFlagsInfo].extra_exec_rustc_flags, map_each = map_flag)

@@ -2279,6 +2296,24 @@ rustc_output_diagnostics = rule(
     build_setting = config.bool(flag = True),
 )

+def _extra_rustc_env_impl(ctx):
+    env_vars = {}
+    for entry in ctx.build_setting_value:
+        if "=" not in entry:
+            fail("Invalid format for rustc env var: '{}'. Expected 'KEY=value'".format(entry))
+        key, val = entry.split("=", 1)
+        env_vars[key] = val
+    return ExtraRustcEnvInfo(extra_rustc_env = env_vars)
+
+extra_rustc_env = rule(
+    doc = (
+        "Add additional environment variables to rustc in non-exec configuration using " +
+        "`--@rules_rust//rust/settings:extra_rustc_env=FOO=bar`. Multiple values may be specified."
+    ),
+    implementation = _extra_rustc_env_impl,
+    build_setting = config.string_list(flag = True),
+)
+
 def _extra_rustc_flags_impl(ctx):
     return ExtraRustcFlagsInfo(extra_rustc_flags = ctx.build_setting_value)

@@ -2319,6 +2354,24 @@ extra_exec_rustc_flags = rule(
     build_setting = config.string_list(flag = True),
 )

+def _extra_exec_rustc_env_impl(ctx):
+    env_vars = {}
+    for entry in ctx.build_setting_value:
+        if "=" not in entry:
+            fail("Invalid format for rustc env var: '{}'. Expected 'KEY=value'".format(entry))
+        key, val = entry.split("=", 1)
+        env_vars[key] = val
+    return ExtraExecRustcEnvInfo(extra_exec_rustc_env = env_vars)
+
+extra_exec_rustc_env = rule(
+    doc = (
+        "Add additional environment variables to rustc in non-exec configuration using " +
+        "`--@rules_rust//rust/settings:extra_exec_rustc_env=FOO=bar`. Multiple values may be specified."
+    ),
+    implementation = _extra_exec_rustc_env_impl,
+    build_setting = config.string_list(flag = True),
+)
+
 def _extra_exec_rustc_flag_impl(ctx):
     return ExtraExecRustcFlagsInfo(extra_exec_rustc_flags = [f for f in ctx.build_setting_value if f != ""])

diff --git a/rust/settings/BUILD.bazel b/rust/settings/BUILD.bazel
index 8fb46461d..3f6bf3073 100644
--- a/rust/settings/BUILD.bazel
+++ b/rust/settings/BUILD.bazel
@@ -13,8 +13,10 @@ load(
     "experimental_use_coverage_metadata_files",
     "experimental_use_global_allocator",
     "experimental_use_sh_toolchain_for_bootstrap_process_wrapper",
+    "extra_exec_rustc_env",
     "extra_exec_rustc_flag",
     "extra_exec_rustc_flags",
+    "extra_rustc_env",
     "extra_rustc_flag",
     "extra_rustc_flags",
     "incompatible_change_rust_test_compilation_output_directory",
@@ -73,10 +75,14 @@ experimental_use_global_allocator()

 experimental_use_sh_toolchain_for_bootstrap_process_wrapper()

+extra_exec_rustc_env()
+
 extra_exec_rustc_flag()

 extra_exec_rustc_flags()

+extra_rustc_env()
+
 extra_rustc_flag()

 extra_rustc_flags()
diff --git a/rust/settings/settings.bzl b/rust/settings/settings.bzl
index 1444600d2..c795597d0 100644
--- a/rust/settings/settings.bzl
+++ b/rust/settings/settings.bzl
@@ -19,8 +19,10 @@ load("//rust/private:lto.bzl", "rust_lto_flag")
 load(
     "//rust/private:rustc.bzl",
     _error_format = "error_format",
+    _extra_exec_rustc_env = "extra_exec_rustc_env",
     _extra_exec_rustc_flag = "extra_exec_rustc_flag",
     _extra_exec_rustc_flags = "extra_exec_rustc_flags",
+    _extra_rustc_env = "extra_rustc_env",
     _extra_rustc_flag = "extra_rustc_flag",
     _extra_rustc_flags = "extra_rustc_flags",
     _no_std = "no_std",
@@ -258,6 +260,18 @@ def clippy_flags():
         build_setting_default = [],
     )

+# buildifier: disable=unnamed-macro
+def extra_rustc_env():
+    """This setting may be used to pass extra environment variables to rustc from the command line in non-exec configuration.
+
+    It applies across all targets whereas environment variables set in a specific rule apply only to that target.
+    This can be useful for setting build-wide env flags such as `RUSTC_BOOTSTRAP=1`.
+    """
+    _extra_rustc_env(
+        name = "extra_rustc_env",
+        build_setting_default = [],
+    )
+
 # buildifier: disable=unnamed-macro
 def clippy_flag():
     """Add a custom clippy flag from the command line with `--@rules_rust//rust/settings:clippy_flag`.
@@ -292,6 +306,18 @@ def extra_rustc_flag():
         build_setting_default = [],
     )

+# buildifier: disable=unnamed-macro
+def extra_exec_rustc_env():
+    """This setting may be used to pass extra environment variables to rustc from the command line in exec configuration.
+
+    It applies to tools built and run during the build process, such as proc-macros and build scripts.
+    This can be useful for enabling features that are needed during tool compilation.
+    """
+    _extra_exec_rustc_env(
+        name = "extra_exec_rustc_env",
+        build_setting_default = [],
+    )
+
 # buildifier: disable=unnamed-macro
 def extra_exec_rustc_flags():
     """This setting may be used to pass extra options to rustc from the command line in exec configuration.
