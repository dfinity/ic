load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@python_deps//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")
load("//rs/tests:common.bzl", "symlink_dir")

IC_OS_ENV = "//ic-os/guestos/envs/dev"

# there were some issues with loading uuid, therefore we need load requirements individually instead of usings all_requirements
py_library(
    name = "misc",
    srcs = ["common/misc.py"],
    deps = [
        requirement("python-gflags"),
        requirement("six"),
        requirement("termcolor"),
    ],
)

py_test(
    name = "test_misc",
    srcs = ["common/tests/test_misc.py"],
    deps = [":misc"],
)

py_library(
    name = "ssh",
    srcs = ["common/ssh.py"],
    deps = [requirement("termcolor")],
)

py_library(
    name = "workload",
    srcs = ["common/workload.py"],
    deps = [
        ":misc",
        ":ssh",
    ],
)

py_library(
    name = "report",
    srcs = ["common/report.py"],
    deps = [":misc"],
)

py_test(
    name = "test_report",
    srcs = ["common/tests/test_report.py"],
    deps = [
        ":report",
        ":workload",
    ],
)

py_test(
    name = "test_workload",
    srcs = ["common/tests/test_workload.py"],
    deps = [":workload"],
)

py_library(
    name = "ansible",
    srcs = ["common/ansible.py"],
)

py_library(
    name = "ictools",
    srcs = ["common/ictools.py"],
    deps = [
        requirement("cbor"),
        requirement("python-gflags"),
        requirement("requests"),
    ],
)

py_library(
    name = "metrics",
    srcs = ["common/metrics.py"],
)

py_library(
    name = "flamegraphs",
    srcs = ["common/flamegraphs.py"],
    deps = [
        ":metrics",
        ":ssh",
    ],
)

py_library(
    name = "machine_failure",
    srcs = ["common/machine_failure.py"],
)

py_library(
    name = "prometheus",
    srcs = ["common/prometheus.py"],
    deps = [requirement("requests")],
)

py_library(
    name = "base_experiment",
    srcs = ["common/base_experiment.py"],
    deps = [
        ":ansible",
        ":flamegraphs",
        ":ictools",
        ":machine_failure",
        ":misc",
        ":prometheus",
        ":report",
        ":ssh",
        requirement("retry"),
    ],
)

py_test(
    name = "test_workload_description",
    srcs = ["common/tests/test_workload_description.py"],
    data = ["workloads/mixed-query-update.toml"],
    deps = [
        ":base_experiment",
        ":workload",
        requirement("python-gflags"),
        requirement("toml"),
    ],
)

py_library(
    name = "farm",
    srcs = ["common/farm.py"],
    deps = [
        ":ssh",
        requirement("paramiko"),
        requirement("requests"),
        requirement("scp"),
    ],
)

py_library(
    name = "delegation",
    srcs = ["common/delegation.py"],
    deps = [requirement("ic-py")],
)

py_library(
    name = "icpy_stress_experiment",
    srcs = ["common/icpy_stress_experiment.py"],
    deps = [
        ":base_experiment",
        ":delegation",
        ":misc",
        requirement("ic-py"),
        requirement("python-gflags"),
        requirement("matplotlib"),
        requirement("termcolor"),
    ],
)

symlink_dir(
    name = "canisters",
    targets = {
        "//rs/registry/canister:registry-canister": "registry-canister.wasm",
        "//rs/nns/governance:governance-canister": "governance-canister.wasm",
        "//rs/nns/governance:governance-canister-test": "governance-canister_test.wasm",
        "//rs/nns/identity:identity-canister": "identity-canister.wasm",
        "//rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method": "ledger-canister_notify-method.wasm",
        "//rs/nns/handlers/root/impl:root-canister": "root-canister.wasm",
        "//rs/nns/cmc:cycles-minting-canister": "cycles-minting-canister.wasm",
        "//rs/nns/handlers/lifeline/impl:lifeline_canister": "lifeline_canister.wasm",
        "//rs/nns/gtc:genesis-token-canister": "genesis-token-canister.wasm",
        "//rs/nns/sns-wasm:sns-wasm-canister": "sns-wasm-canister.wasm",
        "//rs/nns/nns-ui:nns-ui-canister": "nns-ui-canister.wasm",
        "//rs/rosetta-api/icrc1/ledger:ledger_canister": "ic-icrc1-ledger.wasm",
        "//rs/bitcoin/ckbtc/minter:ckbtc_minter": "ic-ckbtc-minter.wasm",
        "//rs/rust_canisters/xnet_test:xnet-test-canister": "xnet-test-canister.wasm",
        "//rs/rust_canisters/response_payload_test:response-payload-test-canister": "response-payload-test-canister.wasm",
        "//rs/rust_canisters/memory_test:memory_test_canister": "memory-test-canister.wasm",
    },
)

symlink_dir(
    name = "release",
    testonly = True,
    targets = {
        "//rs/prep:ic-prep": "ic-prep",
        "//rs/nns/init:ic-nns-init": "ic-nns-init",
        "//rs/registry/admin:ic-admin": "ic-admin",
        "//rs/workload_generator:ic-workload-generator": "ic-workload-generator",
    },
)

copy_file(
    name = "githash",
    src = IC_OS_ENV + ":version.txt",
    out = "release/githash",
)

copy_to_directory(
    name = "artifacts",
    testonly = True,
    srcs = [
        ":canisters",
        ":githash",
        ":release",
    ],
)

py_binary(
    name = "e2e-scalability-tests",
    testonly = True,
    srcs = ["common/tests/e2e-scalability-tests.py"],
    data = [
        "common/flamegraph.gz",
        "workloads/tiny.toml",
        ":artifacts",
        "//ic-os:scripts/build-bootstrap-config-image.sh",
        "//rs/tests:create-universal-vm-config-image.sh",
    ] + glob([
        "ii/*",
    ]),
    deps = [
        ":base_experiment",
        ":farm",
        ":icpy_stress_experiment",
        ":ictools",
        ":max_capacity_large_payload",
        ":misc",
        ":run_delegation_experiment",
        ":run_large_memory_experiment",
        ":run_large_payload_experiment",
        ":run_mixed_workload_experiment",
        ":run_system_baseline_experiment",
        ":run_xnet_experiment",
        ":workload",
        ":workload_experiment",
        ":workload_xrc_hooks",
        requirement("python-gflags"),
        requirement("six"),
        requirement("ic-py"),
        requirement("toml"),
    ],
)

sh_test(
    name = "run-e2e-scalability-tests",
    timeout = "long",
    srcs = ["common/tests/e2e-scalability-tests.sh"],
    data = [
        ":e2e-scalability-tests",
        "//bazel:version_file_path",
        "//ic-os:scripts/build-bootstrap-config-image.sh",
        IC_OS_ENV + ":disk-img.tar.zst.cas-url",
        IC_OS_ENV + ":disk-img.tar.zst.sha256",
        IC_OS_ENV + ":version.txt",
        "@dfx",
    ],
    env = {
        "E2E_TEST_BIN": "$(rootpath :e2e-scalability-tests)",
        "VERSION_FILE_PATH": "$(rootpath //bazel:version_file_path)",
        "IC_OS_VERSION_FILE": "$(rootpath " + IC_OS_ENV + ":version.txt)",
        "IC_OS_IMAGE_URL": "$(rootpath " + IC_OS_ENV + ":disk-img.tar.zst.cas-url)",
        "IC_OS_IMAGE_SHA256SUM": "$(rootpath " + IC_OS_ENV + ":disk-img.tar.zst.sha256)",
        "dfx_path": "$(rootpath @dfx//:dfx)",
    },
    env_inherit = [
        "HOME",
    ],
    flaky = True,
    tags = [
        "no-sandbox",
        "requires-network",
        "system_test_nightly",
    ],
)

py_library(
    name = "workload_experiment",
    srcs = ["common/workload_experiment.py"],
    deps = [
        ":ansible",
        ":base_experiment",
        ":prometheus",
        ":report",
        ":ssh",
        ":workload_hooks",
        requirement("termcolor"),
    ],
)

py_library(
    name = "workload_hooks",
    srcs = ["workloads/hooks/workload_hooks.py"],
)

py_library(
    name = "workload_xrc_hooks",
    srcs = ["workloads/hooks/xrc_hooks.py"],
    deps = [
        ":misc",
        ":workload_hooks",
        requirement("ic-py"),
    ],
)

# Experiments

py_library(
    name = "run_mixed_workload_experiment",
    srcs = ["experiments/run_mixed_workload_experiment.py"],
    deps = [
        ":misc",
        ":report",
        ":workload",
        ":workload_experiment",
        ":workload_hooks",
        requirement("python-gflags"),
        requirement("toml"),
    ],
)

py_library(
    name = "run_xnet_experiment",
    srcs = ["experiments/run_xnet_experiment.py"],
    deps = [
        ":base_experiment",
        ":misc",
        ":prometheus",
        requirement("ic-py"),
        requirement("python-gflags"),
        requirement("termcolor"),
        requirement("toml"),
    ],
)

py_library(
    name = "run_delegation_experiment",
    srcs = ["experiments/run_delegation_experiment.py"],
    deps = [
        ":delegation",
        ":icpy_stress_experiment",
        ":misc",
        ":report",
    ],
)

py_library(
    name = "run_system_baseline_experiment",
    srcs = ["experiments/run_system_baseline_experiment.py"],
    deps = [
        ":misc",
        ":workload_experiment",
        requirement("python-gflags"),
        requirement("termcolor"),
    ],
)

py_library(
    name = "run_large_payload_experiment",
    srcs = ["experiments/run_large_payload_experiment.py"],
    deps = [
        ":misc",
        ":workload_experiment",
        requirement("python-gflags"),
    ],
)

py_library(
    name = "max_capacity_large_payload",
    srcs = ["experiments/max_capacity_large_payload.py"],
    deps = [
        ":misc",
        ":run_system_baseline_experiment",
        ":workload_experiment",
    ],
)

py_library(
    name = "run_large_memory_experiment",
    srcs = ["experiments/run_large_memory_experiment.py"],
    deps = [
        ":misc",
        ":workload_experiment",
        requirement("python-gflags"),
    ],
)

py_test(
    name = "mock_multi",
    srcs = ["common/tests/mock_multi.py"],
    data = [
        "workloads/mixed-query-update.toml",
        ":artifacts",
    ],
    deps = [
        ":base_experiment",
        ":misc",
        ":run_mixed_workload_experiment",
        ":ssh",
        ":workload",
        ":workload_xrc_hooks",
    ],
)

py_test(
    name = "mock",
    srcs = ["common/tests/mock.py"],
    data = [":artifacts"],
    deps = [
        ":base_experiment",
        ":misc",
        ":report",
        ":ssh",
        ":workload",
        ":workload_experiment",
    ],
)
