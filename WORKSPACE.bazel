workspace(
    name = "ic",
)

load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file", "http_jar")
load("//third_party/lmdb-0.9.70:repository.bzl", "lmdb_repository")
load("//third_party/lmdb-rkv-0.14.99:repository.bzl", "lmdb_rkv_repository")
load("mainnet-canisters.bzl", "mainnet_core_nns_canisters", "mainnet_sns_canisters")

http_archive(
    name = "aspect_rules_sol",
    sha256 = "4e98a4572cd2c5f9e0a4118be3b8d2f0be148c80779ea9da646d0afabe2d609c",
    strip_prefix = "rules_sol-0.1.0",
    url = "https://github.com/aspect-build/rules_sol/releases/download/v0.1.0/rules_sol-v0.1.0.tar.gz",
)

load("@aspect_rules_sol//sol:repositories.bzl", "rules_sol_dependencies", "sol_register_toolchains")

rules_sol_dependencies()

sol_register_toolchains(
    name = "solc",
    sol_version = "0.8.18",
)

http_archive(
    name = "bazel_skylib",
    sha256 = "9f38886a40548c6e96c106b752f242130ee11aaa068a56ba7e56f4511f33e4f2",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.6.1/bazel-skylib-1.6.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.4.2/bazel-skylib-1.6.1.tar.gz",
    ],
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "6dc2da7ab4cf5d7bfc7c949776b1b7c733f05e56edc4bcd9022bb249d2e2a996",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip",
    ],
)

http_archive(
    name = "bazel_gazelle",
    sha256 = "727f3e4edd96ea20c29e8c2ca9e8d2af724d8c7778e7923a854b2c80952bc405",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.30.0/bazel-gazelle-v0.30.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.30.0/bazel-gazelle-v0.30.0.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains(go_version = "1.20.5")

gazelle_dependencies(go_repository_default_config = "//:WORKSPACE.bazel")

http_archive(
    name = "rules_rust",
    integrity = "sha256-JLN47ZcAbx9wEr5Jiib4HduZATGLiDgK7oUi/fvotzU=",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.42.1/rules_rust-v0.42.1.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")
load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

rules_rust_dependencies()

rust_analyzer_dependencies()

rust_register_toolchains(
    edition = "2021",
    # The nightly version is required to compile fuzz tests from Bazel.
    # The version below is chosen so that it is in sync with the non-nightly version.
    versions = [
        "1.77.1",
        "nightly/2024-02-06",
    ],
)

git_repository(
    name = "rules_foreign_cc",
    commit = "9acbb356916760192d4c16301a69267fe44e6dec",
    remote = "https://github.com/bazelbuild/rules_foreign_cc.git",
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

http_archive(
    name = "rules_proto",
    sha256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1",
    strip_prefix = "rules_proto-4.0.0",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
    ],
)

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")
load("//:go_deps.bzl", "go_dependencies")

# gazelle:repository_macro go_deps.bzl%go_dependencies
go_dependencies()

rules_proto_dependencies()

rules_proto_toolchains()

load("//bazel:external_crates.bzl", "external_crates_repository")
load("//bazel/sanitizers_enabled_env:defs.bzl", "sanitizers_enabled_env")

sanitizers_enabled_env(name = "sanitizers_enabled_env")

load("@sanitizers_enabled_env//:defs.bzl", "SANITIZERS_ENABLED")

external_crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.Bazel.Fuzzing.toml.lock" if SANITIZERS_ENABLED else "//:Cargo.Bazel.toml.lock",
    lockfile = "//:Cargo.Bazel.Fuzzing.json.lock" if SANITIZERS_ENABLED else "//:Cargo.Bazel.json.lock",
    sanitizers_enabled = SANITIZERS_ENABLED,
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()

# Motoko support

http_archive(
    name = "rules_motoko",
    sha256 = "f7cb0a906c8efe9d2ad8d27f0f6ac11f6409a771d74874f7e47d45959063dfe3",
    strip_prefix = "rules_motoko-0.2.1",
    urls = ["https://github.com/dfinity/rules_motoko/archive/refs/tags/v0.2.1.tar.gz"],
)

http_archive(
    name = "motoko_base",
    build_file_content = """
filegroup(name = "sources", srcs = glob(["*.mo"]), visibility = ["//visibility:public"])
      """,
    sha256 = "b143d641b31b13fe2d21832d7372dccb067ea1a740396e9fd50af3fe9e713247",
    strip_prefix = "motoko-base-moc-0.8.5/src",
    urls = ["https://github.com/dfinity/motoko-base/archive/refs/tags/moc-0.8.5.tar.gz"],
)

load("@rules_motoko//motoko:repositories.bzl", "rules_motoko_dependencies")

rules_motoko_dependencies()

# Support for constructing archives
http_archive(
    name = "rules_pkg",
    sha256 = "8f9ee2dc10c1ae514ee599a8b42ed99fa262b757058f65ad3c384289ff70c4b8",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.9.1/rules_pkg-0.9.1.tar.gz",
        "https://github.com/bazelbuild/rules_pkg/releases/download/0.9.1/rules_pkg-0.9.1.tar.gz",
    ],
)

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()

# Docker container support

http_archive(
    name = "io_bazel_rules_docker",
    sha256 = "b1e80761a8a8243d03ebca8845e9cc1ba6c82ce7c5179ce2b295cd36f7e394bf",
    urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.25.0/rules_docker-v0.25.0.tar.gz"],
)

load(
    "@io_bazel_rules_docker//toolchains/docker:toolchain.bzl",
    docker_toolchain_configure = "toolchain_configure",
)

docker_toolchain_configure(
    name = "docker_config",
    gzip_target = "@pigz",
)

load(
    "@io_bazel_rules_docker//repositories:repositories.bzl",
    container_repositories = "repositories",
)

# Bitcoin core

load("//third_party/bitcoin-core:bitcoin-core_repository.bzl", "bitcoin_core_repository")

bitcoin_core_repository()

container_repositories()

load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")

container_deps(go_repository_default_config = "@//:WORKSPACE.bazel")

load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_pull",
)

container_pull(
    name = "static-file-server",
    digest = "sha256:c21bed6db05fe08f2da128fe96f5f5a06633348fb5bb37bf3581e6501c6b528a",
    registry = "registry.gitlab.com/dfinity-lab/open/public-docker-registry",
    repository = "halverneus/static-file-server",
)

container_pull(
    name = "bitcoind",
    digest = "sha256:17c7dd21690f3be34630db7389d2f0bff14649e27a964afef03806a6d631e0f1",
    registry = "registry.gitlab.com/dfinity-lab/open/public-docker-registry",
    repository = "kylemanna/bitcoind",
)

container_pull(
    name = "jaeger",
    digest = "sha256:f421219dbd77248301fc42ac6e8ba5026f4bada9448ab33ac89061e21cfe3fea",
    registry = "docker.io",
    repository = "jaegertracing/all-in-one",
)

container_pull(
    name = "minica",
    digest = "sha256:c67e2c1885d438b5927176295d41aaab8a72dd9e1272ba85054bfc78191d05b0",
    registry = "registry.gitlab.com/dfinity-lab/open/public-docker-registry",
    repository = "ryantk/minica",
)

container_pull(
    name = "rust_base",
    digest = "sha256:8e94f031353596c3fc9db6a2499bcc82dacc40cb71e0703476f9fad41677efdf",
    registry = "gcr.io",
    repository = "distroless/cc-debian11",
)

container_pull(
    name = "ubuntu_base",
    digest = "sha256:965fbcae990b0467ed5657caceaec165018ef44a4d2d46c7cdea80a9dff0d1ea",
    registry = "docker.io",
    repository = "ubuntu",
)

container_pull(
    name = "coredns",
    digest = "sha256:be7652ce0b43b1339f3d14d9b14af9f588578011092c1f7893bd55432d83a378",
    registry = "docker.io",
    repository = "coredns/coredns",
    tag = "1.10.1",
)

container_pull(
    name = "pebble",
    digest = "sha256:fc5a537bf8fbc7cc63aa24ec3142283aa9b6ba54529f86eb8ff31fbde7c5b258",
    registry = "docker.io",
    repository = "letsencrypt/pebble",
    tag = "v2.3.1",
)

container_pull(
    name = "python3",
    digest = "sha256:0a56f24afa1fc7f518aa690cb8c7be661225e40b157d9bb8c6ef402164d9faa7",
    registry = "docker.io",
    repository = "python",
    tag = "3-alpine",
)

container_pull(
    name = "alpine_openssl",
    digest = "sha256:cf89651f07a33d2faf4499f72e6f8b0ee2542cd40735d51c7e75b8965c17af0e",
    registry = "docker.io",
    repository = "alpine/openssl",
)

# This image was built with bazel (bazel build //rs/tests:ubuntu_test_runtime_image)
# then uploaded to our GitLab registry using:
#
#  $ bazel build //rs/tests:ubuntu_test_runtime_image
#  $ docker login registry.gitlab.com
#  $ docker load -i bazel-bin/rs/tests/ubuntu_test_runtime_image.tar
#  $ docker tag ubuntu_test_runtime_image:latest "registry.gitlab.com/dfinity-lab/open/public-docker-registry/ubuntu_test_runtime_image:latest"
#  $ docker image push  "registry.gitlab.com/dfinity-lab/open/public-docker-registry/ubuntu_test_runtime_image:latest"
#
# The reason we can't directly depend on //rs/tests:ubuntu_test_runtime_image is that
# the target //rs/tests/httpbin-rs:httpbin_image_base
# fails to build in our container (gitlab-ci/container/container-run.sh).
container_pull(
    name = "ubuntu_test_runtime",
    digest = "sha256:d5b2f17ee8fcd45b4f1580893680b78a540f491e647a9f6971bdaab393e372f7",
    registry = "registry.gitlab.com",
    repository = "dfinity-lab/open/public-docker-registry/ubuntu_test_runtime_image",
)

# URL: registry.gitlab.com/dfinity-lab/open/public-docker-registry/nns-dapp-specs:latest
container_pull(
    name = "nns-dapp-specs",
    digest = "sha256:9e003fe2740f2813bf9e776b9cabd5cdb1fbe15581fc4b78876708fdf3791b3f",
    registry = "registry.gitlab.com",
    repository = "dfinity-lab/open/public-docker-registry/nns-dapp-specs",
)

# Third party dependencies that require special treatment

lmdb_repository(name = "lmdb")

lmdb_rkv_repository(name = "lmdb_rkv")

http_archive(
    name = "pigz",
    build_file_content = """
cc_library(
    name = "zopfli",
    hdrs = glob(["zopfli/src/zopfli/*.h"]),
    srcs = glob(["zopfli/src/zopfli/*.c"]),
)

cc_binary(
    name = "pigz",
    srcs = [
        "pigz.c",
        "try.c",
        "try.h",
        "yarn.c",
        "yarn.h",
    ],
    linkopts = [
        "-lm",
        "-lpthread",
        "-lz",
    ],
    deps = [":zopfli"],
    visibility = ["//visibility:public"],
)""",
    sha256 = "d4396b58bc2875daf8dc3ae9a657be945c2c2697944894fea8a72634eded93ab",
    strip_prefix = "pigz-2.7",
    url = "https://github.com/madler/pigz/archive/refs/tags/v2.7.zip",
)

http_archive(
    name = "buildifier_prebuilt",
    sha256 = "72b5bb0853aac597cce6482ee6c62513318e7f2c0050bc7c319d75d03d8a3875",
    strip_prefix = "buildifier-prebuilt-6.3.3",
    urls = [
        "http://github.com/keith/buildifier-prebuilt/archive/6.3.3.tar.gz",
    ],
)

load("@buildifier_prebuilt//:deps.bzl", "buildifier_prebuilt_deps")

buildifier_prebuilt_deps()

load("@buildifier_prebuilt//:defs.bzl", "buildifier_prebuilt_register_toolchains")

buildifier_prebuilt_register_toolchains()

# Rosetta CLI

load("//bazel:rosetta_cli.bzl", "rosetta_cli_repository")

rosetta_cli_repository(name = "rosetta-cli")

# Closure compiler for JavaScript
http_archive(
    name = "io_bazel_rules_closure",
    sha256 = "a3bef45d4d052adfd7b0146efdfe55989753adbb66e1f4fa4fa8c4f9df4f8196",
    strip_prefix = "rules_closure-4326045ee6c941f12518a2ad5ad990504cf3df9d",
    urls = [
        "https://github.com/bazelbuild/rules_closure/archive/4326045ee6c941f12518a2ad5ad990504cf3df9d.zip",
    ],
)

load("@io_bazel_rules_closure//closure:repositories.bzl", "rules_closure_dependencies", "rules_closure_toolchains")

rules_closure_dependencies()

rules_closure_toolchains()

# rclone binary for upload_artifacts
load("//bazel:rclone.bzl", "rclone_repository")

rclone_repository(name = "rclone")

# trivy binary for upload_artifacts
load("//bazel:trivy.bzl", "trivy_scan")

trivy_scan(name = "trivy")

# shfmt binary for fast shell linting
load("//bazel:shfmt.bzl", "shfmt")

shfmt(name = "shfmt")

# ruff binary for fast python linting
load("//pre-commit:ruff.bzl", "ruff")

ruff(name = "ruff")

# ormolu binary for haskell linting
load("//pre-commit:ormolu.bzl", "ormolu")

ormolu(name = "ormolu")

# buf binary for protobuf linting
load("//pre-commit:buf.bzl", "buf")

buf(name = "buf")

# shellcheck binary
load("//pre-commit:shellcheck.bzl", "shellcheck")

shellcheck(name = "shellcheck")

# candid binary
load("//pre-commit:candid.bzl", "candid")

candid(name = "candid")

# dfx binary for haskell linting
load("//bazel:dfx.bzl", "dfx")

dfx(name = "dfx")

# sns-quill for SNS testing
load("//bazel:sns_quill.bzl", "sns_quill")

sns_quill(name = "sns_quill")

# idl2json for SNS testing
load("//bazel:idl2json.bzl", "idl_to_json")

idl_to_json(name = "idl2json")

load("//bazel:jq.bzl", "jq_repository")

jq_repository(name = "jq")

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "79381b0975ba7d2d5653239e5bab12cf54d89b10217fe771b8edd95047a2e44b",
    strip_prefix = "bazel-lib-1.12.1",
    url = "https://github.com/aspect-build/bazel-lib/archive/refs/tags/v1.12.1.tar.gz",
)

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies")

aspect_bazel_lib_dependencies()

# TLA+ tools
http_jar(
    name = "tlaplus_community_modules",
    sha256 = "109e0828d192c33703d5cbc50b5b6e128acd816565616e27b3855949c7baba9c",
    url = "https://github.com/tlaplus/CommunityModules/releases/download/202302091937/CommunityModules-202302091937.jar",
)

http_jar(
    name = "tlaplus_community_modules_deps",
    sha256 = "762c4bdc25a0cb67043411c7f4f062cc2c038631c9c569539df880e0e78d5cf4",
    url = "https://github.com/tlaplus/CommunityModules/releases/download/202302091937/CommunityModules-deps-202302091937.jar",
)

# Official WebAssembly test suite.
# To be used for testing libraries that handle canister Wasm code.

new_git_repository(
    name = "wasm_spec_testsuite",
    build_file_content = """filegroup(
        name = "wast_files",
        srcs = glob(["**/*.wast"]),
        visibility = ["//visibility:public"]
    )""",
    commit = "4f77306bb63151631d84f58dedf67958eb9911b9",
    remote = "https://github.com/WebAssembly/testsuite.git",
)

mainnet_core_nns_canisters()

mainnet_sns_canisters()

# Asset canister

http_file(
    name = "asset_canister",
    downloaded_file_path = "assetstorage.wasm.gz",
    sha256 = "1286960c50eb7a773cfb5fdd77cc238588f39e21f189cc3eb0f35199a99b9c7e",
    url = "https://github.com/dfinity/sdk/raw/0.14.2/src/distributed/assetstorage.wasm.gz",
)

# Old version of wallet canister

http_file(
    name = "wallet_canister_0.7.2",
    downloaded_file_path = "wallet.wasm",
    sha256 = "1404b28b1c66491689b59e184a9de3c2be0dbdd75d952f29113b516742b7f898",
    url = "https://github.com/dfinity/sdk/raw/0.7.2/src/distributed/wallet.wasm",
)

# Bitcoin canister

http_file(
    name = "btc_canister",
    downloaded_file_path = "ic-btc-canister.wasm.gz",
    sha256 = "8cc43d3f40bb734a0c87f42ae19eee70c360f2d66a0c88c631f0f0e785505133",
    url = "https://github.com/dfinity/bitcoin-canister/releases/download/release%2F2023-06-12/ic-btc-canister.wasm.gz",
)

# Bitcoin Adapter Mainnet Data for Integration Test

# The files have been generated by syncing bitcoind client, followed
# by requesting all the desired data using a bash script, such as:
#
# declare -a headers=()
# for h in {0..800000}
# do
#     hash=$(bitcoin-cli getblockhash $h)
#     header=$(bitcoin-cli getblockheader $hash | jq '{version, prev_blockhash:.previousblockhash, merkle_root:.merkleroot, time, bits, nonce}')
#     headers+=("$header")
# done
# echo "[" $(IFS=,; echo "${headers[*]}") "]"

# Contains the first 800_000 headers of the Bitcoin mainnet blockchain.
http_file(
    name = "bitcoin_adapter_mainnet_headers",
    downloaded_file_path = "mainnet_headers_800k.json.gz",
    sha256 = "fb58cd3c0e2efe298eeb96751ae2276e938b39e2f1d9760ea47a9f3a8288d214",
    url = "https://download.dfinity.systems/testdata/mainnet_headers_800k.json.gz",
)

# Contains blocks 350_990 to 350_999 (inclusive) of the Bitcoin mainnet blockchain.
http_file(
    name = "bitcoin_adapter_mainnet_blocks",
    downloaded_file_path = "blocks.json.gz",
    sha256 = "4ba1e7d0b4a2fea5692bb4c79a4c9e077325312a50facef13256ba8d45bc8f2a",
    url = "https://download.dfinity.systems/testdata/blocks.json.gz",
)

# Contains the first 800_000 headers of the Bitcoin testnet blockchain.
http_file(
    name = "bitcoin_adapter_testnet_headers",
    downloaded_file_path = "testnet_headers.json.gz",
    sha256 = "c01542d816d9631a7e59210aea29c1d46ed805b0bcbfd9e067d8d53a5e5919c8",
    url = "https://download.dfinity.systems/testdata/testnet_headers.json.gz",
)

# Contains blocks 350_990 to 350_999 (inclusive) of the Bitcoin testnet blockchain.
http_file(
    name = "bitcoin_adapter_testnet_blocks",
    downloaded_file_path = "testnet_blocks.json.gz",
    sha256 = "ae57b5b58d8a1e89545c0caedeb114d0dd179e0c5fd4a44e43321b2cdbac74fb",
    url = "https://download.dfinity.systems/testdata/testnet_blocks.json.gz",
)

# Internet Identity canister (test build)

http_file(
    name = "ii_dev_canister",
    downloaded_file_path = "internet_identity_dev.wasm.gz",
    sha256 = "2357d822cd451f25c0edab3e45db52ab140a2ac8c4b0170201c78acc5bc11779",
    url = "https://github.com/dfinity/internet-identity/releases/download/release-2024-05-13/internet_identity_dev.wasm.gz",
)

# NNS frontend dapp canister

http_file(
    name = "nns_dapp_canister",
    downloaded_file_path = "nns_dapp_canister.wasm.gz",
    sha256 = "f4c5df6fdb8ee3aa043419ed4e4cc1fafdb07b4fde1c7faeb2a6730dfa04127f",
    url = "https://github.com/dfinity/nns-dapp/releases/download/proposal-129618/nns-dapp_test.wasm.gz",
)

# SNS aggregator canister

http_file(
    name = "sns_aggregator",
    downloaded_file_path = "sns_aggregator_dev.wasm.gz",
    sha256 = "8a18ab37807605fe912080b4a072fc7735b4657e9d22b3867c345250c6e77d91",
    url = "https://github.com/dfinity/nns-dapp/releases/download/proposal-129618/sns_aggregator_dev.wasm.gz",
)

# Cycles Ledger canister

http_file(
    name = "cycles-ledger.wasm.gz",
    sha256 = "4f26aae9edef5b4e2c785c1dc6f312163af055f22954dd99d515d8a862bd59bd",
    url = "https://github.com/dfinity/cycles-ledger/releases/download/cycles-ledger-v0.2.3/cycles-ledger.wasm.gz",
)

# Subnet Rental Canister

http_file(
    name = "subnet_rental_canister",
    downloaded_file_path = "subnet_rental_canister.wasm",
    sha256 = "c4d4db8618a6ce9c24672f57cd88572a2a66ae78cbf1315fe96ae96e598c3fbf",
    url = "https://github.com/dfinity/subnet-rental-canister/releases/download/0.1.0/subnet_rental_canister.wasm",
)

# Import Python rules

http_archive(
    name = "rules_python",
    sha256 = "9d04041ac92a0985e344235f5d946f71ac543f1b1565f2cdbc9a2aaee8adf55b",
    strip_prefix = "rules_python-0.26.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.26.0/rules_python-0.26.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3_10",
    python_version = "3.10",
)

load("@python3_10//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "python_deps",
    python_interpreter_target = interpreter,
    requirements_lock = "//:requirements.txt",
)

load("@python_deps//:requirements.bzl", "install_deps")

install_deps()

# Financial Integration artifacts for upgrade testing

# first ic-icrc1-ledger release (see https://dashboard.internetcomputer.org/proposal/104499)
http_file(
    name = "ic-icrc1-ledger-first-version.wasm.gz",
    sha256 = "7af4f7308c883c286d4a5c0448b6bd03bd4d8bffebd58c4fc7114761ad652932",
    url = "https://download.dfinity.systems/ic/0456f740295aabdd287811f1ed51829082b3df01/canisters/ic-icrc1-ledger.wasm.gz",
)

# ic-icrc1-ledger releases without ICRC-3
http_file(
    name = "ic-icrc1-ledger-wo-icrc-3.wasm.gz",
    sha256 = "dc42ffd30d6616068b2dd10023ab0ff8d49b0cbce7582c4673c18caa7412dd3a",
    url = "https://download.dfinity.systems/ic/300dc603a92b5f70dae79229793c902f346af3cc/canisters/ic-icrc1-ledger.wasm.gz",
)

http_file(
    name = "ic-icrc1-ledger-wo-icrc-3-u256.wasm.gz",
    sha256 = "8730fd2aa3b9fe67468fc5e853436f618d0b16be34ff30d7e6492eac55f78d90",
    url = "https://download.dfinity.systems/ic/300dc603a92b5f70dae79229793c902f346af3cc/canisters/ic-icrc1-ledger-u256.wasm.gz",
)

# Haskell toolchain for spec_compliance tests

http_archive(
    name = "rules_haskell",
    sha256 = "ebc5309d1617492b7edb63cded5d5cec4c32f146f2dee2935ae133f036e441f4",
    strip_prefix = "rules_haskell-9d29e14b313123a0735abd0989c620d754500452",
    url = "https://github.com/tweag/rules_haskell/archive/9d29e14b313123a0735abd0989c620d754500452.tar.gz",
)

http_archive(
    name = "rules_sh",
    sha256 = "d4ad015a8e72e92a5c171efa760524502e098cd927ae800dfad03b02dad2299a",
    strip_prefix = "rules_sh-06170f1fbff23f900bc04dfbdb75ed1acf2b8c42",
    urls = ["https://github.com/tweag/rules_sh/archive/06170f1fbff23f900bc04dfbdb75ed1acf2b8c42.tar.gz"],
)

load(
    "@rules_haskell//haskell:toolchain.bzl",
    "rules_haskell_toolchains",
)

rules_haskell_toolchains(
    version = "9.6.2",
)

load(
    "@rules_haskell//haskell:cabal.bzl",
    "stack_snapshot",
)

#
# Run this command to regenerate lock file after changing the rule above:
# bazel run @stackage-unpinned//:pin
#
stack_snapshot(
    name = "stackage",
    components = {
        "attoparsec": [
            "lib",
            "lib:attoparsec-internal",
        ],
    },
    components_dependencies = {
        "attoparsec": """{"lib:attoparsec": ["lib:attoparsec-internal"]}""",
    },
    packages = [
        "QuickCheck",
        "aeson",
        "array",
        "asn1-encoding",
        "asn1-types",
        "async",
        "atomic-write",
        "base",
        "base16",
        "base32",
        "base64-bytestring",
        "binary",
        "bytes",
        "bytestring",
        "case-insensitive",
        "cborg",
        "cereal",
        "conduit",
        "constraints",
        "containers",
        "crypton-connection",
        "crypton-x509",
        "crypton-x509-store",
        "crypton-x509-validation",
        "cryptonite",
        "data-default-class",
        "deepseq",
        "digest",
        "directory",
        "dlist",
        "ed25519",
        "either",
        "entropy",
        "file-embed",
        "filepath",
        "hashable",
        "hex-text",
        "hspec",
        "http-client",
        "http-client-tls",
        "http-types",
        "leb128-cereal",
        "megaparsec",
        "memory",
        "mtl",
        "murmur3",
        "network",
        "network-uri",
        "optparse-applicative",
        "parallel",
        "parser-combinators",
        "prettyprinter",
        "primitive",
        "process",
        "quickcheck-io",
        "random",
        "row-types",
        "safe",
        "scientific",
        "secp256k1-haskell",
        "serialise",
        "split",
        "splitmix",
        "string-conversions",
        "tasty",
        "tasty-ant-xml",
        "tasty-html",
        "tasty-hunit",
        "tasty-quickcheck",
        "tasty-rerun",
        "template-haskell",
        "temporary",
        "text",
        "time",
        "tls",
        "transformers",
        "uglymemo",
        "unordered-containers",
        "utf8-string",
        "vector",
        "wai",
        "wai-cors",
        "wai-extra",
        "warp",
        "wide-word",
        "word8",
        "zlib",
    ],
    snapshot = "nightly-2023-07-29",
    stack_snapshot_json = "//:stackage_snapshot.json",
)

http_archive(
    name = "haskell-candid",
    sha256 = "df5116a59502da272d261a772cd7019486f9ddc47361d43a195316ccb8500f84",
    strip_prefix = "haskell-candid-a682fca78f5770d3ec0c1184ecf7de866dc5ae77",
    urls = ["https://github.com/nomeata/haskell-candid/archive/a682fca78f5770d3ec0c1184ecf7de866dc5ae77.tar.gz"],
)

http_archive(
    name = "miracl-core",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")
load("@bazel_skylib//rules:run_binary.bzl", "run_binary")
py_binary(
    name = "generate",
    srcs = ["c/config64.py"],
    main = "c/config64.py",
    data = [],
    deps = [],
)
run_binary(
    name = "cbits",
    srcs = glob(["c/*.c", "c/*.h"]),
    outs = [
      "aes.c",
      "big_384_58.c",
      "bls_BLS12381.c",
      "ecp2_BLS12381.c",
      "ecp_BLS12381.c",
      "fp12_BLS12381.c",
      "fp2_BLS12381.c",
      "fp4_BLS12381.c",
      "fp_BLS12381.c",
      "gcm.c",
      "hash.c",
      "hmac.c",
      "newhope.c",
      "oct.c",
      "pair_BLS12381.c",
      "randapi.c",
      "rand.c",
      "rom_curve_BLS12381.c",
      "rom_field_BLS12381.c",
      "share.c",
      "arch.h",
      "big_384_58.h",
      "bls_BLS12381.h",
      "config_big_384_58.h",
      "config_curve_BLS12381.h",
      "config_field_BLS12381.h",
      "core.h",
      "ecdh_BLS12381.h",
      "ecp2_BLS12381.h",
      "ecp_BLS12381.h",
      "fp12_BLS12381.h",
      "fp2_BLS12381.h",
      "fp4_BLS12381.h",
      "fp_BLS12381.h",
      "hpke_BLS12381.h",
      "mpin_BLS12381.h",
      "newhope.h",
      "pair_BLS12381.h",
      "randapi.h",
      "x509.h",
    ],
    args = ["--options=31", "--path=$(location c/arch.h)", "--output-path=$(location arch.h)"],
    target_compatible_with = ["@platforms//os:linux"],
    tool = ":generate",
    visibility = ["//visibility:public"],
)
cc_library(
    name = "lib",
    srcs = [
      ":aes.c",
      ":big_384_58.c",
      ":bls_BLS12381.c",
      ":ecp2_BLS12381.c",
      ":ecp_BLS12381.c",
      ":fp12_BLS12381.c",
      ":fp2_BLS12381.c",
      ":fp4_BLS12381.c",
      ":fp_BLS12381.c",
      ":gcm.c",
      ":hash.c",
      ":hmac.c",
      ":newhope.c",
      ":oct.c",
      ":pair_BLS12381.c",
      ":randapi.c",
      ":rand.c",
      ":rom_curve_BLS12381.c",
      ":rom_field_BLS12381.c",
      ":share.c",
    ],
    hdrs = [
      ":arch.h",
      ":big_384_58.h",
      ":bls_BLS12381.h",
      ":config_big_384_58.h",
      ":config_curve_BLS12381.h",
      ":config_field_BLS12381.h",
      ":core.h",
      ":ecdh_BLS12381.h",
      ":ecp2_BLS12381.h",
      ":ecp_BLS12381.h",
      ":fp12_BLS12381.h",
      ":fp2_BLS12381.h",
      ":fp4_BLS12381.h",
      ":fp_BLS12381.h",
      ":hpke_BLS12381.h",
      ":mpin_BLS12381.h",
      ":newhope.h",
      ":pair_BLS12381.h",
      ":randapi.h",
      ":x509.h",
    ],
    includes = [":cbits"],
    visibility = ["//visibility:public"],
    target_compatible_with = ["@platforms//os:linux"],
)""",
    patch_args = ["-p1"],
    patches = ["//hs/spec_compliance:miracl-core.patch"],
    sha256 = "b93a14c35f56eca8dddaab95dea94294d51ca680a7d6bb1c1f048e1cd71550cd",
    strip_prefix = "core-ec77b2817a0e360b1893affe4cfa44d19391efc7",
    urls = ["https://github.com/miracl/core/archive/ec77b2817a0e360b1893affe4cfa44d19391efc7.tar.gz"],
)

# interface spec v0.22
http_file(
    name = "interface_spec",
    downloaded_file_path = "ic.did",
    sha256 = "bf3987bd483cf710ff0c54134350ca188c29ff0fdd38567aa4df5e74131543e4",
    url = "https://raw.githubusercontent.com/dfinity/interface-spec/a82220c1156f5e3e80ea65be6a4f69b766cbe6d1/spec/_attachments/ic.did",
)

load("//rs/tests:kubeconfig.bzl", "kubeconfig")

kubeconfig()
