workspace(
    name = "ic",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("//bazel:mainnet-canisters.bzl", "canisters")
load("//bazel:mainnet-icos-images.bzl", "get_mainnet_guestos_images", "get_mainnet_setupos_images")

# We cannot derive the Bazel repository names (e.g. @mainnet_nns_registry_canister) directly
# from the canister names because we use inconsistent repo names. Same goes for filenames.
# For each new canister defined in the source JSON file (see `path`) a mapping can be added
# from canister name (as per JSON) to filename (and to repo name, resp.).
#
# Additionally the `repositories` list GitHub repositories for canisters. If a canister has an
# entry in `repositories`, then the source JSON file must specify a `tag` and the canister
# artifact will be fetched from the tag's release page.
canisters(
    name = "mainnet_canisters",
    filenames = {
        "registry": "registry-canister.wasm.gz",
        "governance": "governance-canister.wasm.gz",
        "governance-canister_test": "governance-canister_test.wasm.gz",
        "ledger": "ledger-canister_notify-method.wasm.gz",
        "archive": "ledger-archive-node-canister.wasm.gz",
        "index": "ic-icp-index-canister.wasm.gz",
        "root": "root-canister.wasm.gz",
        "lifeline": "lifeline_canister.wasm.gz",
        "genesis-token": "genesis-token-canister.wasm.gz",
        "cycles-minting": "cycles-minting-canister.wasm.gz",
        "sns-wasm": "sns-wasm-canister.wasm.gz",
        "ck_btc_archive": "ic-icrc1-archive.wasm.gz",
        "ck_btc_ledger": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v1": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v2": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v2_noledgerversion": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v3": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_index": "ic-icrc1-index-ng.wasm.gz",
        "ck_eth_archive": "ic-icrc1-archive-u256.wasm.gz",
        "ck_eth_ledger": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v1": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v2": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v2_noledgerversion": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v3": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_index": "ic-icrc1-index-ng-u256.wasm.gz",
        "sns_root": "sns-root-canister.wasm.gz",
        "sns_governance": "sns-governance-canister.wasm.gz",
        "swap": "sns-swap-canister.wasm.gz",
        "sns_ledger": "ic-icrc1-ledger.wasm.gz",
        "sns_ledger_v2": "ic-icrc1-ledger.wasm.gz",
        "sns_archive": "ic-icrc1-archive.wasm.gz",
        "sns_index": "ic-icrc1-index-ng.wasm.gz",
        "node-rewards": "node-rewards-canister.wasm.gz",
        "internet_identity_test": "internet_identity_dev.wasm.gz",
        "nns_dapp_test": "nns-dapp_test.wasm.gz",
        "sns_aggregator_test": "sns_aggregator_dev.wasm.gz",
        "cycles_ledger": "cycles-ledger.wasm.gz",
        "cycles_ledger_index": "ic-icrc1-index-ng-u256.wasm.gz",
        "bitcoin_testnet": "ic-btc-canister.wasm.gz",
    },
    path = "//:mainnet-canister-revisions.json",
    repositories = {
        "cycles_ledger": "dfinity/cycles-ledger",
        "internet_identity_test": "dfinity/internet-identity",
        "nns_dapp_test": "dfinity/nns-dapp",
        "sns_aggregator_test": "dfinity/nns-dapp",
        "bitcoin_testnet": "dfinity/bitcoin-canister",
    },
)

http_archive(
    name = "rules_rust",
    integrity = "sha256-5Kgp+5cZcrJoTOUq9CF6KJdNsB2zNzvYM9UnYMoY5lc=",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.66.0/rules_rust-0.66.0.tar.gz"],
)

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")
load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")
load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

rules_rust_dependencies()

rust_analyzer_dependencies()

crate_universe_dependencies()

rust_register_toolchains(
    edition = "2024",
    strip_level = {"x86_64-unknown-linux-gnu": {
        "dbg": "none",
        "fastbuild": "none",
        "opt": "none",
    }},
    versions = ["1.90.0"],
)

load("//bazel:external_crates.bzl", "external_crates_repository")

external_crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.Bazel.toml.lock",
    lockfile = "//:Cargo.Bazel.json.lock",
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()

# Motoko support

http_archive(
    name = "rules_motoko",
    sha256 = "f7cb0a906c8efe9d2ad8d27f0f6ac11f6409a771d74874f7e47d45959063dfe3",
    strip_prefix = "rules_motoko-0.2.1",
    urls = ["https://github.com/dfinity/rules_motoko/archive/refs/tags/v0.2.1.tar.gz"],
)

load("@rules_motoko//motoko:repositories.bzl", "rules_motoko_dependencies")

rules_motoko_dependencies()

# ormolu binary for haskell linting
load("//pre-commit:ormolu.bzl", "ormolu")

ormolu(name = "ormolu")

# Mainnet ICOS image support
get_mainnet_setupos_images()

get_mainnet_guestos_images()
