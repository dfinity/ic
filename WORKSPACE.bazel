workspace(
    name = "ic",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file", "http_jar")
load("//bazel:mainnet-canisters.bzl", "canisters")
load("//third_party/lmdb:repository.bzl", "lmdb_repository")

# We cannot derive the Bazel repository names (e.g. @mainnet_nns_registry_canister) directly
# from the canister names because we use inconsistent repo names. Same goes for filenames.
# For each new canister defined in the source JSON file (see `path`) a mapping can be added
# from canister name (as per JSON) to filename (and to repo name, resp.).
canisters(
    name = "canisters",
    filenames = {
        "registry": "registry-canister.wasm.gz",
        "governance": "governance-canister.wasm.gz",
        "ledger": "ledger-canister_notify-method.wasm.gz",
        "archive": "ledger-archive-node-canister.wasm.gz",
        "index": "ic-icp-index-canister.wasm.gz",
        "root": "root-canister.wasm.gz",
        "lifeline": "lifeline_canister.wasm.gz",
        "genesis-token": "genesis-token-canister.wasm.gz",
        "cycles-minting": "cycles-minting-canister.wasm.gz",
        "sns-wasm": "sns-wasm-canister.wasm.gz",
        "ck_btc_ledger": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_index": "ic-icrc1-index-ng.wasm.gz",
        "ck_eth_ledger": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_index": "ic-icrc1-index-ng-u256.wasm.gz",
        "sns_root": "sns-root-canister.wasm.gz",
        "sns_governance": "sns-governance-canister.wasm.gz",
        "swap": "sns-swap-canister.wasm.gz",
        "sns_ledger": "ic-icrc1-ledger.wasm.gz",
        "sns_archive": "ic-icrc1-archive.wasm.gz",
        "sns_index": "ic-icrc1-index-ng.wasm.gz",
    },
    path = "//:mainnet-canisters.json",
    reponames = {
        "registry": "mainnet_nns_registry_canister",
        "governance": "mainnet_nns_governance_canister",
        "ledger": "mainnet_icp_ledger_canister",
        "archive": "mainnet_icp_ledger-archive-node-canister",
        "index": "mainnet_icp_index_canister",
        "root": "mainnet_nns_root-canister",
        "lifeline": "mainnet_nns_lifeline_canister",
        "genesis-token": "mainnet_nns_genesis-token-canister",
        "cycles-minting": "mainnet_nns_cycles-minting-canister",
        "sns-wasm": "mainnet_nns_sns-wasm-canister",
        "ck_btc_ledger": "mainnet_ckbtc_ic-icrc1-ledger",
        "ck_btc_index": "mainnet_ckbtc-index-ng",
        "ck_eth_ledger": "mainnet_cketh_ic-icrc1-ledger-u256",
        "ck_eth_index": "mainnet_cketh-index-ng",
        "sns_root": "mainnet_sns-root-canister",
        "sns_governance": "mainnet_sns-governance-canister",
        "swap": "mainnet_sns-swap-canister",
        "sns_ledger": "mainnet_ic-icrc1-ledger",
        "sns_archive": "mainnet_ic-icrc1-archive",
        "sns_index": "mainnet_ic-icrc1-index-ng",
    },
)

load("@canisters//:defs.bzl", "canister_deps")

canister_deps()

http_archive(
    name = "aspect_rules_sol",
    sha256 = "4e98a4572cd2c5f9e0a4118be3b8d2f0be148c80779ea9da646d0afabe2d609c",
    strip_prefix = "rules_sol-0.1.0",
    url = "https://github.com/aspect-build/rules_sol/releases/download/v0.1.0/rules_sol-v0.1.0.tar.gz",
)

load("@aspect_rules_sol//sol:repositories.bzl", "rules_sol_dependencies", "sol_register_toolchains")

rules_sol_dependencies()

sol_register_toolchains(
    name = "solc",
    sol_version = "0.8.18",
)

http_archive(
    name = "rules_rust",
    integrity = "sha256-JLN47ZcAbx9wEr5Jiib4HduZATGLiDgK7oUi/fvotzU=",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.42.1/rules_rust-v0.42.1.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")
load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

rules_rust_dependencies()

rust_analyzer_dependencies()

rust_register_toolchains(
    edition = "2021",
    # The nightly version is required to compile fuzz tests from Bazel.
    # The version below is chosen so that it is in sync with the non-nightly version.
    versions = [
        "1.81.0",
        # Use the nightly version from the day before the branch.
        # -
        # NB! Due to a regression in the compiler https://github.com/rust-lang/rust/issues/128895, that's
        # only back-ported to stable, we use a more recent version.
        "nightly/2024-09-23",
    ],
)

# Necessary for our ic-os Makefile build
http_archive(
    name = "rules_foreign_cc",
    sha256 = "db6fcdb4f5ac217658f2c3aabd61e618d7fadc1cdf7d806ab1b52f2709d3fc66",
    strip_prefix = "rules_foreign_cc-9acbb356916760192d4c16301a69267fe44e6dec",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/9acbb356916760192d4c16301a69267fe44e6dec.tar.gz",
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

load("//bazel:external_crates.bzl", "external_crates_repository")
load("//bazel/sanitizers_enabled_env:defs.bzl", "sanitizers_enabled_env")

sanitizers_enabled_env(name = "sanitizers_enabled_env")

load("@sanitizers_enabled_env//:defs.bzl", "SANITIZERS_ENABLED")

external_crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.Bazel.Fuzzing.toml.lock" if SANITIZERS_ENABLED else "//:Cargo.Bazel.toml.lock",
    lockfile = "//:Cargo.Bazel.Fuzzing.json.lock" if SANITIZERS_ENABLED else "//:Cargo.Bazel.json.lock",
    sanitizers_enabled = SANITIZERS_ENABLED,
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()

# Motoko support

http_archive(
    name = "rules_motoko",
    sha256 = "f7cb0a906c8efe9d2ad8d27f0f6ac11f6409a771d74874f7e47d45959063dfe3",
    strip_prefix = "rules_motoko-0.2.1",
    urls = ["https://github.com/dfinity/rules_motoko/archive/refs/tags/v0.2.1.tar.gz"],
)

load("@rules_motoko//motoko:repositories.bzl", "rules_motoko_dependencies")

rules_motoko_dependencies()

# Third party dependencies that require special treatment

lmdb_repository()

http_archive(
    name = "pigz",
    build_file_content = """
cc_library(
    name = "zopfli",
    hdrs = glob(["zopfli/src/zopfli/*.h"]),
    srcs = glob(["zopfli/src/zopfli/*.c"]),
)

cc_binary(
    name = "pigz",
    srcs = [
        "pigz.c",
        "try.c",
        "try.h",
        "yarn.c",
        "yarn.h",
    ],
    linkopts = [
        "-lm",
        "-lpthread",
        "-lz",
    ],
    deps = [":zopfli"],
    visibility = ["//visibility:public"],
)""",
    sha256 = "688fe1d805b33a4ae8cbf86ba56aa1a5d647e959219c7d3aeb7d041c228af1ef",
    strip_prefix = "pigz-2.8",
    url = "https://github.com/madler/pigz/archive/refs/tags/v2.8.zip",
)

http_archive(
    name = "buildifier_prebuilt",
    sha256 = "72b5bb0853aac597cce6482ee6c62513318e7f2c0050bc7c319d75d03d8a3875",
    strip_prefix = "buildifier-prebuilt-6.3.3",
    urls = [
        "http://github.com/keith/buildifier-prebuilt/archive/6.3.3.tar.gz",
    ],
)

load("@buildifier_prebuilt//:deps.bzl", "buildifier_prebuilt_deps")

buildifier_prebuilt_deps()

load("@buildifier_prebuilt//:defs.bzl", "buildifier_prebuilt_register_toolchains")

buildifier_prebuilt_register_toolchains()

# Rosetta CLI

load("//bazel:rosetta_cli.bzl", "rosetta_cli_repository")

rosetta_cli_repository(name = "rosetta-cli")

# Closure compiler for JavaScript
http_archive(
    name = "io_bazel_rules_closure",
    sha256 = "a3bef45d4d052adfd7b0146efdfe55989753adbb66e1f4fa4fa8c4f9df4f8196",
    strip_prefix = "rules_closure-4326045ee6c941f12518a2ad5ad990504cf3df9d",
    urls = [
        "https://github.com/bazelbuild/rules_closure/archive/4326045ee6c941f12518a2ad5ad990504cf3df9d.zip",
    ],
)

load("@io_bazel_rules_closure//closure:repositories.bzl", "rules_closure_dependencies", "rules_closure_toolchains")

# we instruct rules_closure to omit some dependencies that we already
# pull via MODULE.bazel
rules_closure_dependencies(
    omit_com_google_protobuf = True,
    omit_rules_java = True,
    omit_rules_proto = True,
)

rules_closure_toolchains()

# rclone binary for upload_artifacts
load("//bazel:rclone.bzl", "rclone_repository")

rclone_repository(name = "rclone")

# trivy binary for upload_artifacts
load("//bazel:trivy.bzl", "trivy_scan")

trivy_scan(name = "trivy")

# shfmt binary for fast shell formatting
load("//bazel:shfmt.bzl", "shfmt")

shfmt(name = "shfmt")

# ruff binary for fast python linting
load("//pre-commit:ruff.bzl", "ruff")

ruff(name = "ruff")

# ormolu binary for haskell linting
load("//pre-commit:ormolu.bzl", "ormolu")

ormolu(name = "ormolu")

# buf binary for protobuf linting
load("//pre-commit:buf.bzl", "buf")

buf(name = "buf")

# candid binary
load("//pre-commit:candid.bzl", "candid")

candid(name = "candid")

# dfx binary for haskell linting
load("//bazel:dfx.bzl", "dfx")

dfx(name = "dfx")

# sns-quill for SNS testing
load("//bazel:sns_quill.bzl", "sns_quill")

sns_quill(name = "sns_quill")

# idl2json for SNS testing
load("//bazel:idl2json.bzl", "idl_to_json")

idl_to_json(name = "idl2json")

load("//bazel:jq.bzl", "jq_repository")

jq_repository(name = "jq")

# TLA+ tools
http_jar(
    name = "tlaplus_community_modules",
    sha256 = "109e0828d192c33703d5cbc50b5b6e128acd816565616e27b3855949c7baba9c",
    url = "https://github.com/tlaplus/CommunityModules/releases/download/202302091937/CommunityModules-202302091937.jar",
)

http_jar(
    name = "tlaplus_community_modules_deps",
    sha256 = "762c4bdc25a0cb67043411c7f4f062cc2c038631c9c569539df880e0e78d5cf4",
    url = "https://github.com/tlaplus/CommunityModules/releases/download/202302091937/CommunityModules-deps-202302091937.jar",
)

# Apalache model checker for TLA+
http_archive(
    name = "tla_apalache",
    build_file_content = """
package(default_visibility = ["//visibility:public"])

exports_files([ "bin/apalache-mc" ])
    """,
    sha256 = "173a683707c2a639c955328746461cad39e4b8a5adff95e156ce3bf376ba293b",
    strip_prefix = "apalache-0.44.11",
    url = "https://github.com/apalache-mc/apalache/releases/download/v0.44.11/apalache-0.44.11.tgz",
)

# Official WebAssembly test suite.
# To be used for testing libraries that handle canister Wasm code.
http_archive(
    name = "wasm_spec_testsuite",
    build_file_content = """
# Exports the various test suites that we use

filegroup(
    name = "base_wast_files",
    srcs = glob(["*.wast"]),
    visibility = ["//visibility:public"]
)
filegroup(
    name = "multi_memory_wast_files",
    srcs = glob(["proposals/multi-memory/*.wast"]),
    visibility = ["//visibility:public"]
)
filegroup(
    name = "memory64_wast_files",
    srcs = glob(["proposals/memory64/*.wast"]),
    visibility = ["//visibility:public"]
)

     """,
    sha256 = "9afc0e7c250b5f0dcf32e9a95860b99a392ab78a653fcf3705778e8a9357f3c4",
    strip_prefix = "testsuite-4f77306bb63151631d84f58dedf67958eb9911b9",
    url = "https://github.com/WebAssembly/testsuite/archive/4f77306bb63151631d84f58dedf67958eb9911b9.tar.gz",
)

# Asset canister

http_file(
    name = "asset_canister",
    downloaded_file_path = "assetstorage.wasm.gz",
    sha256 = "1286960c50eb7a773cfb5fdd77cc238588f39e21f189cc3eb0f35199a99b9c7e",
    url = "https://github.com/dfinity/sdk/raw/0.14.2/src/distributed/assetstorage.wasm.gz",
)

# Old version of wallet canister

http_file(
    name = "wallet_canister_0.7.2",
    downloaded_file_path = "wallet.wasm",
    sha256 = "1404b28b1c66491689b59e184a9de3c2be0dbdd75d952f29113b516742b7f898",
    url = "https://github.com/dfinity/sdk/raw/0.7.2/src/distributed/wallet.wasm",
)

# Bitcoin canister

http_file(
    name = "btc_canister",
    downloaded_file_path = "ic-btc-canister.wasm.gz",
    sha256 = "f18d28cbebf49cbd2b6a3dba8f6da1399b95714c7cf100d3fb31ba9c33941daa",
    url = "https://github.com/dfinity/bitcoin-canister/releases/download/release%2F2024-07-28/ic-btc-canister.wasm.gz",
)

# Bitcoin Adapter Mainnet Data for Integration Test

# The files have been generated by syncing bitcoind client, followed
# by requesting all the desired data using a bash script, such as:
#
# declare -a headers=()
# for h in {0..800000}
# do
#     hash=$(bitcoin-cli getblockhash $h)
#     header=$(bitcoin-cli getblockheader $hash | jq '{version, prev_blockhash:.previousblockhash, merkle_root:.merkleroot, time, bits, nonce}')
#     headers+=("$header")
# done
# echo "[" $(IFS=,; echo "${headers[*]}") "]"

# Contains the first 800_000 headers of the Bitcoin mainnet blockchain.
http_file(
    name = "bitcoin_adapter_mainnet_headers",
    downloaded_file_path = "mainnet_headers_800k.json.gz",
    sha256 = "fb58cd3c0e2efe298eeb96751ae2276e938b39e2f1d9760ea47a9f3a8288d214",
    url = "https://download.dfinity.systems/testdata/mainnet_headers_800k.json.gz",
)

# Contains blocks 350_990 to 350_999 (inclusive) of the Bitcoin mainnet blockchain.
http_file(
    name = "bitcoin_adapter_mainnet_blocks",
    downloaded_file_path = "blocks.json.gz",
    sha256 = "4ba1e7d0b4a2fea5692bb4c79a4c9e077325312a50facef13256ba8d45bc8f2a",
    url = "https://download.dfinity.systems/testdata/blocks.json.gz",
)

# Contains the first 800_000 headers of the Bitcoin testnet blockchain.
http_file(
    name = "bitcoin_adapter_testnet_headers",
    downloaded_file_path = "testnet_headers.json.gz",
    sha256 = "c01542d816d9631a7e59210aea29c1d46ed805b0bcbfd9e067d8d53a5e5919c8",
    url = "https://download.dfinity.systems/testdata/testnet_headers.json.gz",
)

# Contains blocks 350_990 to 350_999 (inclusive) of the Bitcoin testnet blockchain.
http_file(
    name = "bitcoin_adapter_testnet_blocks",
    downloaded_file_path = "testnet_blocks.json.gz",
    sha256 = "ae57b5b58d8a1e89545c0caedeb114d0dd179e0c5fd4a44e43321b2cdbac74fb",
    url = "https://download.dfinity.systems/testdata/testnet_blocks.json.gz",
)

# Internet Identity canister (test build)

http_file(
    name = "ii_dev_canister",
    downloaded_file_path = "internet_identity_dev.wasm.gz",
    sha256 = "2357d822cd451f25c0edab3e45db52ab140a2ac8c4b0170201c78acc5bc11779",
    url = "https://github.com/dfinity/internet-identity/releases/download/release-2024-05-13/internet_identity_dev.wasm.gz",
)

# NNS frontend dapp canister

http_file(
    name = "nns_dapp_canister",
    downloaded_file_path = "nns_dapp_canister.wasm.gz",
    sha256 = "f4c5df6fdb8ee3aa043419ed4e4cc1fafdb07b4fde1c7faeb2a6730dfa04127f",
    url = "https://github.com/dfinity/nns-dapp/releases/download/proposal-129618/nns-dapp_test.wasm.gz",
)

# SNS aggregator canister

http_file(
    name = "sns_aggregator",
    downloaded_file_path = "sns_aggregator_dev.wasm.gz",
    sha256 = "8a18ab37807605fe912080b4a072fc7735b4657e9d22b3867c345250c6e77d91",
    url = "https://github.com/dfinity/nns-dapp/releases/download/proposal-129618/sns_aggregator_dev.wasm.gz",
)

# Cycles Ledger canister

http_file(
    name = "cycles-ledger.wasm.gz",
    sha256 = "4f26aae9edef5b4e2c785c1dc6f312163af055f22954dd99d515d8a862bd59bd",
    url = "https://github.com/dfinity/cycles-ledger/releases/download/cycles-ledger-v0.2.3/cycles-ledger.wasm.gz",
)

# Subnet Rental Canister

http_file(
    name = "subnet_rental_canister",
    downloaded_file_path = "subnet_rental_canister.wasm",
    sha256 = "c4d4db8618a6ce9c24672f57cd88572a2a66ae78cbf1315fe96ae96e598c3fbf",
    url = "https://github.com/dfinity/subnet-rental-canister/releases/download/0.1.0/subnet_rental_canister.wasm",
)

# Financial Integration artifacts for upgrade testing

# first ic-icrc1-ledger release (see https://dashboard.internetcomputer.org/proposal/104499)
http_file(
    name = "ic-icrc1-ledger-first-version.wasm.gz",
    sha256 = "7af4f7308c883c286d4a5c0448b6bd03bd4d8bffebd58c4fc7114761ad652932",
    url = "https://download.dfinity.systems/ic/0456f740295aabdd287811f1ed51829082b3df01/canisters/ic-icrc1-ledger.wasm.gz",
)

# ic-icrc1-ledger releases without ICRC-3
http_file(
    name = "ic-icrc1-ledger-wo-icrc-3.wasm.gz",
    sha256 = "dc42ffd30d6616068b2dd10023ab0ff8d49b0cbce7582c4673c18caa7412dd3a",
    url = "https://download.dfinity.systems/ic/300dc603a92b5f70dae79229793c902f346af3cc/canisters/ic-icrc1-ledger.wasm.gz",
)

http_file(
    name = "ic-icrc1-ledger-wo-icrc-3-u256.wasm.gz",
    sha256 = "8730fd2aa3b9fe67468fc5e853436f618d0b16be34ff30d7e6492eac55f78d90",
    url = "https://download.dfinity.systems/ic/300dc603a92b5f70dae79229793c902f346af3cc/canisters/ic-icrc1-ledger-u256.wasm.gz",
)

# XC artifacts for testing

# EVM RPC canister

http_file(
    name = "evm_rpc.wasm.gz",
    sha256 = "5f4a871b2369768fb7e69b08d367ac0288b95dcdfda9bd2c37283aa84e6b58b4",
    url = "https://github.com/internet-computer-protocol/evm-rpc-canister/releases/download/v2.1.0/evm_rpc.wasm.gz",
)

http_archive(
    name = "haskell-candid",
    sha256 = "bd9d67c3f719ac4cfb5ba339b52dd8ee985b11029a53e97b3cd555334f28d1e3",
    strip_prefix = "haskell-candid-b4ebdea36ad0b7cbf6f69ddbbfffc73434ecb222",
    urls = ["https://github.com/nomeata/haskell-candid/archive/b4ebdea36ad0b7cbf6f69ddbbfffc73434ecb222.tar.gz"],
)

http_archive(
    name = "miracl-core",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")
load("@bazel_skylib//rules:run_binary.bzl", "run_binary")
py_binary(
    name = "generate",
    srcs = ["c/config64.py"],
    main = "c/config64.py",
    data = [],
    deps = [],
)
run_binary(
    name = "cbits",
    srcs = glob(["c/*.c", "c/*.h"]),
    outs = [
      "aes.c",
      "big_384_58.c",
      "bls_BLS12381.c",
      "ecp2_BLS12381.c",
      "ecp_BLS12381.c",
      "fp12_BLS12381.c",
      "fp2_BLS12381.c",
      "fp4_BLS12381.c",
      "fp_BLS12381.c",
      "gcm.c",
      "hash.c",
      "hmac.c",
      "newhope.c",
      "oct.c",
      "pair_BLS12381.c",
      "randapi.c",
      "rand.c",
      "rom_curve_BLS12381.c",
      "rom_field_BLS12381.c",
      "share.c",
      "arch.h",
      "big_384_58.h",
      "bls_BLS12381.h",
      "config_big_384_58.h",
      "config_curve_BLS12381.h",
      "config_field_BLS12381.h",
      "core.h",
      "ecdh_BLS12381.h",
      "ecp2_BLS12381.h",
      "ecp_BLS12381.h",
      "fp12_BLS12381.h",
      "fp2_BLS12381.h",
      "fp4_BLS12381.h",
      "fp_BLS12381.h",
      "hpke_BLS12381.h",
      "mpin_BLS12381.h",
      "newhope.h",
      "pair_BLS12381.h",
      "randapi.h",
      "x509.h",
    ],
    args = ["--options=31", "--path=$(location c/arch.h)", "--output-path=$(location arch.h)"],
    target_compatible_with = ["@platforms//os:linux"],
    tool = ":generate",
    visibility = ["//visibility:public"],
)
cc_library(
    name = "lib",
    srcs = [
      ":aes.c",
      ":big_384_58.c",
      ":bls_BLS12381.c",
      ":ecp2_BLS12381.c",
      ":ecp_BLS12381.c",
      ":fp12_BLS12381.c",
      ":fp2_BLS12381.c",
      ":fp4_BLS12381.c",
      ":fp_BLS12381.c",
      ":gcm.c",
      ":hash.c",
      ":hmac.c",
      ":newhope.c",
      ":oct.c",
      ":pair_BLS12381.c",
      ":randapi.c",
      ":rand.c",
      ":rom_curve_BLS12381.c",
      ":rom_field_BLS12381.c",
      ":share.c",
    ],
    hdrs = [
      ":arch.h",
      ":big_384_58.h",
      ":bls_BLS12381.h",
      ":config_big_384_58.h",
      ":config_curve_BLS12381.h",
      ":config_field_BLS12381.h",
      ":core.h",
      ":ecdh_BLS12381.h",
      ":ecp2_BLS12381.h",
      ":ecp_BLS12381.h",
      ":fp12_BLS12381.h",
      ":fp2_BLS12381.h",
      ":fp4_BLS12381.h",
      ":fp_BLS12381.h",
      ":hpke_BLS12381.h",
      ":mpin_BLS12381.h",
      ":newhope.h",
      ":pair_BLS12381.h",
      ":randapi.h",
      ":x509.h",
    ],
    includes = [":cbits"],
    visibility = ["//visibility:public"],
    target_compatible_with = ["@platforms//os:linux"],
)""",
    patch_args = ["-p1"],
    patches = ["//hs/spec_compliance:miracl-core.patch"],
    sha256 = "b93a14c35f56eca8dddaab95dea94294d51ca680a7d6bb1c1f048e1cd71550cd",
    strip_prefix = "core-ec77b2817a0e360b1893affe4cfa44d19391efc7",
    urls = ["https://github.com/miracl/core/archive/ec77b2817a0e360b1893affe4cfa44d19391efc7.tar.gz"],
)

# interface spec v0.22
http_file(
    name = "interface_spec",
    downloaded_file_path = "ic.did",
    sha256 = "bf3987bd483cf710ff0c54134350ca188c29ff0fdd38567aa4df5e74131543e4",
    url = "https://raw.githubusercontent.com/dfinity/interface-spec/a82220c1156f5e3e80ea65be6a4f69b766cbe6d1/spec/_attachments/ic.did",
)

http_archive(
    name = "bitcoin_core",
    build_file_content = """
package(default_visibility = ["//visibility:public"])
filegroup(
    name = "bitcoind",
    srcs = ["bin/bitcoind"],
)
""",
    sha256 = "2a6974c5486f528793c79d42694b5987401e4a43c97f62b1383abf35bcee44a8",
    strip_prefix = "bitcoin-27.0",
    urls = [
        "https://bitcoin.org/bin/bitcoin-core-27.0/bitcoin-27.0-x86_64-linux-gnu.tar.gz",
        "https://bitcoincore.org/bin/bitcoin-core-27.0/bitcoin-27.0-x86_64-linux-gnu.tar.gz",
    ],
)

http_file(
    name = "bitcoin_example_canister",
    downloaded_file_path = "basic_bitcoin.wasm.gz",
    sha256 = "2a428e8d35518ce22002e498f7d618a9eeeddf57371f965e92cf480dd3cbd046",
    url = "https://github.com/dfinity/examples/releases/download/rust-basic-bitcoin-24-09-16/basic_bitcoin.wasm.gz",
)

http_file(
    name = "pocket-ic-mainnet-gz",
    sha256 = "454891cac2421f3f894759ec5e6b6e48fbb544d79197bc29b88d34b93d78a4f1",
    url = "https://download.dfinity.systems/ic/52ebccfba8855e23dcad9657a8d6e6be01df71f9/binaries/x86_64-linux/pocket-ic.gz",
)
