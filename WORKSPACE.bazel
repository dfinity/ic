workspace(
    name = "ic",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("//bazel:mainnet-canisters.bzl", "canisters")
load("//bazel:mainnet-icos-images.bzl", "get_mainnet_guestos_images", "get_mainnet_setupos_images")
load("//third_party/jemalloc:repository.bzl", "jemalloc_repository")
load("//third_party/libfuzzer:repository.bzl", "libfuzzer_repository")
load("//third_party/lmdb:repository.bzl", "lmdb_repository")

# We cannot derive the Bazel repository names (e.g. @mainnet_nns_registry_canister) directly
# from the canister names because we use inconsistent repo names. Same goes for filenames.
# For each new canister defined in the source JSON file (see `path`) a mapping can be added
# from canister name (as per JSON) to filename (and to repo name, resp.).
canisters(
    name = "canisters",
    filenames = {
        "registry": "registry-canister.wasm.gz",
        "governance": "governance-canister.wasm.gz",
        "governance-canister_test": "governance-canister_test.wasm.gz",
        "ledger": "ledger-canister_notify-method.wasm.gz",
        "archive": "ledger-archive-node-canister.wasm.gz",
        "index": "ic-icp-index-canister.wasm.gz",
        "root": "root-canister.wasm.gz",
        "lifeline": "lifeline_canister.wasm.gz",
        "genesis-token": "genesis-token-canister.wasm.gz",
        "cycles-minting": "cycles-minting-canister.wasm.gz",
        "sns-wasm": "sns-wasm-canister.wasm.gz",
        "ck_btc_archive": "ic-icrc1-archive.wasm.gz",
        "ck_btc_ledger": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v1": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v2": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v2_noledgerversion": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_ledger_v3": "ic-icrc1-ledger.wasm.gz",
        "ck_btc_index": "ic-icrc1-index-ng.wasm.gz",
        "ck_eth_archive": "ic-icrc1-archive-u256.wasm.gz",
        "ck_eth_ledger": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v1": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v2": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v2_noledgerversion": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_ledger_v3": "ic-icrc1-ledger-u256.wasm.gz",
        "ck_eth_index": "ic-icrc1-index-ng-u256.wasm.gz",
        "sns_root": "sns-root-canister.wasm.gz",
        "sns_governance": "sns-governance-canister.wasm.gz",
        "swap": "sns-swap-canister.wasm.gz",
        "sns_ledger": "ic-icrc1-ledger.wasm.gz",
        "sns_ledger_v2": "ic-icrc1-ledger.wasm.gz",
        "sns_archive": "ic-icrc1-archive.wasm.gz",
        "sns_index": "ic-icrc1-index-ng.wasm.gz",
        "node-rewards": "node-rewards-canister.wasm.gz",
        "internet_identity_test": "internet_identity_dev.wasm.gz",
        "nns_dapp_test": "nns-dapp_test.wasm.gz",
        "sns_aggregator_test": "sns_aggregator_dev.wasm.gz",
        "cycles_ledger": "cycles-ledger.wasm.gz",
        "cycles_ledger_index": "ic-icrc1-index-ng-u256.wasm.gz",
        "bitcoin_testnet": "ic-btc-canister.wasm.gz",
    },
    path = "//:mainnet-canister-revisions.json",
    reponames = {
        "registry": "mainnet_nns_registry_canister",
        "governance": "mainnet_nns_governance_canister",
        "governance-canister_test": "nns_governance_canister_test_at_mainnet_commit",
        "ledger": "mainnet_icp_ledger_canister",
        "archive": "mainnet_icp_ledger-archive-node-canister",
        "index": "mainnet_icp_index_canister",
        "root": "mainnet_nns_root-canister",
        "lifeline": "mainnet_nns_lifeline_canister",
        "genesis-token": "mainnet_nns_genesis-token-canister",
        "cycles-minting": "mainnet_nns_cycles-minting-canister",
        "sns-wasm": "mainnet_nns_sns-wasm-canister",
        "ck_btc_archive": "mainnet_ckbtc_ic-icrc1-archive",
        "ck_btc_ledger": "mainnet_ckbtc_ic-icrc1-ledger",
        "ck_btc_ledger_v1": "mainnet_ckbtc_ic-icrc1-ledger-v1",
        "ck_btc_ledger_v2": "mainnet_ckbtc_ic-icrc1-ledger-v2",
        "ck_btc_ledger_v2_noledgerversion": "mainnet_ckbtc_ic-icrc1-ledger-v2-noledgerversion",
        "ck_btc_ledger_v3": "mainnet_ckbtc_ic-icrc1-ledger-v3",
        "ck_btc_index": "mainnet_ckbtc-index-ng",
        "ck_eth_archive": "mainnet_cketh_ic-icrc1-archive-u256",
        "ck_eth_ledger": "mainnet_cketh_ic-icrc1-ledger-u256",
        "ck_eth_ledger_v1": "mainnet_cketh_ic-icrc1-ledger-u256-v1",
        "ck_eth_ledger_v2": "mainnet_cketh_ic-icrc1-ledger-u256-v2",
        "ck_eth_ledger_v2_noledgerversion": "mainnet_cketh_ic-icrc1-ledger-u256-v2-noledgerversion",
        "ck_eth_ledger_v3": "mainnet_cketh_ic-icrc1-ledger-u256-v3",
        "ck_eth_index": "mainnet_cketh-index-ng",
        "sns_root": "mainnet_sns-root-canister",
        "sns_governance": "mainnet_sns-governance-canister",
        "swap": "mainnet_sns-swap-canister",
        "sns_ledger": "mainnet_ic-icrc1-ledger",
        "sns_ledger_v2": "mainnet_ic-icrc1-ledger-v2",
        "sns_archive": "mainnet_ic-icrc1-archive",
        "sns_index": "mainnet_ic-icrc1-index-ng",
        "node-rewards": "mainnet_node-rewards-canister",
        "internet_identity_test": "internet_identity_dev_at_mainnet_commit",
        "nns_dapp_test": "nns_dapp_test_at_mainnet_commit",
        "sns_aggregator_test": "sns_aggregator_test_at_mainnet_commit",
        "cycles_ledger": "mainnet_cycles_ledger_canister",
        "cycles_ledger_index": "mainnet_cycles_ledger_index",
        "bitcoin_testnet": "bitcoin_testnet_canister_at_mainnet_commit",
    },
    repositories = {
        "cycles_ledger": "dfinity/cycles-ledger",
        "internet_identity_test": "dfinity/internet-identity",
        "nns_dapp_test": "dfinity/nns-dapp",
        "sns_aggregator_test": "dfinity/nns-dapp",
        "bitcoin_testnet": "dfinity/bitcoin-canister",
    },
)

load("@canisters//:defs.bzl", "canister_deps")

canister_deps()

http_archive(
    name = "aspect_rules_sol",
    sha256 = "4e98a4572cd2c5f9e0a4118be3b8d2f0be148c80779ea9da646d0afabe2d609c",
    strip_prefix = "rules_sol-0.1.0",
    url = "https://github.com/aspect-build/rules_sol/releases/download/v0.1.0/rules_sol-v0.1.0.tar.gz",
)

load("@aspect_rules_sol//sol:repositories.bzl", "rules_sol_dependencies", "sol_register_toolchains")

rules_sol_dependencies()

sol_register_toolchains(
    name = "solc",
    sol_version = "0.8.18",
)

http_archive(
    name = "rules_rust",
    integrity = "sha256-2GH766nwQzOgrmnkSO6D1pF/JC3bt/41xo/CEqarpUY=",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.64.0/rules_rust-0.64.0.tar.gz"],
)

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")
load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")
load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

rules_rust_dependencies()

rust_analyzer_dependencies()

crate_universe_dependencies()

rust_register_toolchains(
    edition = "2024",
    extra_rustc_flags = {
        # We need to use lld on aarch64-linux because the default gold linker runs into the following bug when linking pocket-ic-server:
        # /usr/bin/ld.gold: internal error in update_erratum_insn, at ../../gold/aarch64.cc:1003
        "aarch64-unknown-linux-gnu": [
            "-C",
            "link-arg=-fuse-ld=lld",
        ],
    },
    strip_level = {"x86_64-unknown-linux-gnu": {
        "dbg": "none",
        "fastbuild": "none",
        "opt": "none",
    }},
    versions = ["1.89.0"],
)

load("//bazel:external_crates.bzl", "external_crates_repository")

external_crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.Bazel.toml.lock",
    lockfile = "//:Cargo.Bazel.json.lock",
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()

# Motoko support

http_archive(
    name = "rules_motoko",
    sha256 = "f7cb0a906c8efe9d2ad8d27f0f6ac11f6409a771d74874f7e47d45959063dfe3",
    strip_prefix = "rules_motoko-0.2.1",
    urls = ["https://github.com/dfinity/rules_motoko/archive/refs/tags/v0.2.1.tar.gz"],
)

load("@rules_motoko//motoko:repositories.bzl", "rules_motoko_dependencies")

rules_motoko_dependencies()

# Third party dependencies that require special treatment

lmdb_repository()

jemalloc_repository()

libfuzzer_repository()

# Rosetta CLI

load("//bazel:rosetta_cli.bzl", "rosetta_cli_repository")

rosetta_cli_repository(name = "rosetta-cli")

# rclone binary for upload_artifacts
load("//bazel:rclone.bzl", "rclone_repository")

rclone_repository(name = "rclone")

# trivy binary for vulnerability scanning
load("//bazel:trivy.bzl", "trivy_scan")

trivy_scan(name = "trivy")

# shfmt binary for fast shell formatting
load("//bazel:shfmt.bzl", "shfmt")

shfmt(name = "shfmt")

# ruff binary for fast python linting
load("//pre-commit:ruff.bzl", "ruff")

ruff(name = "ruff")

# ormolu binary for haskell linting
load("//pre-commit:ormolu.bzl", "ormolu")

ormolu(name = "ormolu")

# buf binary for protobuf linting
load("//pre-commit:buf.bzl", "buf")

buf(name = "buf")

# candid binary
load("//pre-commit:candid.bzl", "candid")

candid(name = "candid")

# dfx binary for haskell linting
load("//bazel:dfx.bzl", "dfx")

dfx(name = "dfx")

# sns-quill for SNS testing
load("//bazel:sns_quill.bzl", "sns_quill")

sns_quill(name = "sns_quill")

# idl2json for SNS testing
load("//bazel:idl2json.bzl", "idl_to_json")

idl_to_json(name = "idl2json")

# Mainnet ICOS image support
get_mainnet_setupos_images()

get_mainnet_guestos_images()
