name: 'Bazel action'
description: |
    An action for running bazel commands with extra, CI-specific options.
inputs:
  run:
    required: true
    description: |
      The commands to run. Will be evaluated with bash.
  execlogs-artifact-name:
    required: false
    description: "When provided, the execlogs will be uploaded as an artifact with the specified name."
  GPG_PASSPHRASE:
    required: true
    description: "GPG key to encrypt build events. Upload can be disabled by explicitly setting the input to an empty string."

runs:
  using: "composite"
  steps:

    # Create a known tempdir where build events will be written
    - id: metrics-tmpdir
      shell: bash
      run: |
        metrics_out=$(mktemp -d)
        echo "dir=$metrics_out" >> $GITHUB_OUTPUT


    # Run the specified commands
    - name: Run bazel commands
      shell: bash
      env:
        # Used by the bazel wrapper
        BUILDBUDDY_LINKS: '[CI Job](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
      run: |
        set -euo pipefail

        # Here we overwrite the PATH with our custom bazel wrapper to ensure
        # the specified commands are run with the CI-specific options included
        # in the wrapper.
        export BAZEL_ACTION_OLDPATH="$PATH"
        # github.action_path doesn't seem to work
        PATH="$PWD/.github/actions/bazel/bin:$BAZEL_ACTION_OLDPATH"
        hash -r

        # Used by the bazel wrapper
        export BAZEL_ACTION_METRICS_OUT='${{ steps.metrics-tmpdir.outputs.dir }}'

        ${{ inputs.run }}

    # Look for files generated by the build
    - name: Encrypt build events
      shell: bash
      # only upload on success or failure but _not_ on canceled jobs
      if: (success() || failure()) && inputs.GPG_PASSPHRASE != ''
      run: |
        for bep in $(find '${{ steps.metrics-tmpdir.outputs.dir }}' -name 'bazel-bep-*.pb'); do
            gpg --symmetric --cipher-algo AES256 -o "$bep.gpg" \
                --passphrase '${{ inputs.GPG_PASSPHRASE }}' --batch --yes "$bep"
            rm -f "$bep"
        done

    - name: Upload bazel-bep
      # runs only if previous steps succeeded or failed;
      # we avoid collecting artifacts of jobs that were cancelled
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}-bep
        retention-days: 14
        if-no-files-found: ignore
        compression-level: 9
        path: |
          ${{ steps.metrics-tmpdir.outputs.dir }}/bazel-bep-*.pb.gpg
          ${{ steps.metrics-tmpdir.outputs.dir }}/profile-*.json


      # Remove unnecessary entries from the JSON execlogs and create a CSV out of them
    - name: Clean up execlogs
      shell: bash
      if: (success() || failure()) && inputs.execlogs-artifact-name != ''
      run: |
        execlogs_json_in='${{ steps.metrics-tmpdir.outputs.dir }}/execlogs.json'
        find '${{ steps.metrics-tmpdir.outputs.dir }}' -name 'execlog-*.json' \
          -exec cat {} \; > "$execlogs_json_in"

        execlogs_csv_out='${{ steps.metrics-tmpdir.outputs.dir }}/execlogs.csv'
        if ! [ -s "$execlogs_json_in" ]; then
          echo "no execlogs found"
          exit 0
        fi

        # this filters out some entries from the input JSON execlogs. Without this,
        # jq takes 3+ minutes to parse the execlogs.
        # Effectively removes a full line of "commandArgs", and takes care of skipping
        # multiple lines for some multiline array values we don't care about
        prog='
          BEGIN { arr = 0; }
          arr == 1 && /  }],?/ { arr = 0; next }
          arr == 1 { next }
          /  "commandArgs":.*/ { next }
          /  "environmentVariables": \[\{/ { arr = 1; next; }
          /  "inputs": \[\{/ { arr = 1; next; }
          { print }
          '

        # Turns the JSON execlogs into a CSV with the following columns:
        #   <label>,<output path>,<hash>
        # only the target labels matching "whitelist_pat" are considered
        whitelist_pat='^//'
        time (cat "$execlogs_json_in" \
          | awk "$prog" \
          | jq -cMr --arg whitelist_pat "$whitelist_pat" \
              'select(.targetLabel | test($whitelist_pat)) | .targetLabel as $targetLabel | .actualOutputs | map(. | $targetLabel+","+.path+","+.digest.hash) | .[]' \
          >"$execlogs_csv_out")

    - name: Upload execution log
      if: (success() || failure()) && inputs.execlogs-artifact-name != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.execlogs-artifact-name }}
        if-no-files-found: ignore
        path: |
          ${{ steps.metrics-tmpdir.outputs.dir }}/execlogs.csv

    - name: Cleanup
      shell: bash
      if: always()
      run: |
        rm -rf '${{ steps.metrics-tmpdir.outputs.dir }}'
