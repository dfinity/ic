name: 'Bazel action'
description: |
    An action for running bazel commands with extra, CI-specific options.
inputs:
  run:
    required: true
    description: |
      The commands to run. Will be evaluated with bash.
  execlogs-artifact-name:
    required: false
    description: "When provided, the execlogs will be uploaded as an artifact with the specified name."
  GPG_PASSPHRASE:
    required: true
    description: "GPG key to encrypt build events. Upload can be disabled by explicitly setting the input to an empty string."

runs:
  using: "composite"
  steps:

    # Create a known tempdir where build events will be written
    - id: metrics-tmpdir
      shell: bash
      run: |
        metrics_out=$(mktemp -d)
        echo "dir=$metrics_out" >> $GITHUB_OUTPUT


    # Run the specified commands
    - name: Run bazel commands
      shell: bash
      env:
        # Used by the bazel wrapper
        BUILDBUDDY_LINKS: '[CI Job](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
      run: |
        set -euo pipefail

        # Here we overwrite the PATH with our custom bazel wrapper to ensure
        # the specified commands are run with the CI-specific options included
        # in the wrapper.
        export BAZEL_ACTION_OLDPATH="$PATH"
        # github.action_path doesn't seem to work
        PATH="$PWD/.github/actions/bazel/bin:$BAZEL_ACTION_OLDPATH"
        hash -r

        # Used by the bazel wrapper
        export BAZEL_ACTION_METRICS_OUT='${{ steps.metrics-tmpdir.outputs.dir }}'

        ${{ inputs.run }}

    # Look for files generated by the build
    - name: Encrypt build events
      shell: bash
      # only upload on success or failure but _not_ on canceled jobs
      if: (success() || failure()) && inputs.GPG_PASSPHRASE != ''
      run: |
        for bep in $(find '${{ steps.metrics-tmpdir.outputs.dir }}' -name 'bazel-bep-*.pb'); do
            gpg --symmetric --cipher-algo AES256 -o "$bep.gpg" \
                --passphrase '${{ inputs.GPG_PASSPHRASE }}' --batch --yes "$bep"
            rm -f "$bep"
        done

    - name: Upload bazel-bep
      # runs only if previous steps succeeded or failed;
      # we avoid collecting artifacts of jobs that were cancelled
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        # NOTE: github.action provides a unique identify for the artifact name
        # in case the action is called several times:
        #   https://docs.github.com/en/actions/reference/accessing-contextual-information-about-workflow-runs#github-context
        name: ${{ github.job }}-${{ github.action }}-bep
        retention-days: 14
        if-no-files-found: ignore
        compression-level: 9
        path: |
          ${{ steps.metrics-tmpdir.outputs.dir }}/bazel-bep-*.pb.gpg
          ${{ steps.metrics-tmpdir.outputs.dir }}/profile-*.json


    # We use execlog2csv to process the proto-based execution logs and convert them
    # to CSV for easier processing
    - name: Install execlog2csv
      shell: bash
      if: (success() || failure()) && inputs.execlogs-artifact-name != ''
      run: |
        cd $(mktemp -d)

        version="0.0.2" # execlog2csv version

        # for more platforms see artifacts list:
        # https://github.com/dfinity/execlog2csv/releases/latest
        if [[ $(uname -m) == "x86_64" ]]; then
          arch="amd64"
        elif [[ $(uname -m) == "aarch64" ]]; then
          arch="arm64"
        else
          echo "unexpected architecture: '$(uname -m)'"
          exit 1
        fi

        if [[ $(uname) == "Linux" ]]; then
          os="linux"
        elif [[ $(uname) == "Darwin" ]]; then
          os="darwin"
        else
          echo "unexpected os: '$(uname -m)'"
          exit 1
        fi

        filename="execlog2csv_${version}_${os}_${arch}"
        echo "filename: $filename"
        dl_url="https://github.com/dfinity/execlog2csv/releases/download/v$version/$filename.zip"
        echo "downloading '$dl_url'"
        curl -SLO "$dl_url"
        unzip "$filename.zip"
        sudo mv "./execlog2csv_v$version" /usr/local/bin/execlog2csv
        rm "$filename.zip"
        execlog2csv --help

    - name: Convert execlogs to CSV
      shell: bash
      if: (success() || failure()) && inputs.execlogs-artifact-name != ''
      run: |
        execlog="$(mktemp)"
        trap "rm -f $execlog" INT TERM EXIT
        # The goal is to have as few non-reproducible bazel targets as possible.
        # So we forbid all of them except for the following known ones:
        excludes=(
          ^@@crate_index__cranelift-assembler-x64 # has a non reproducible generated-files.rs in its OUT_DIR.
          ^@@crate_index__cranelift-isle          # has a non reproducible isle_tests.rs in its OUT_DIR.
          ^@@crate_index__secp256k1-sys           # has non reproducible object files, like lax_der_parsing.o, in it OUT_DIR.
          ^@@crate_index__sev                     # build.rs depends on the presence of /dev/sev and /dev/sev-guest. See: https://github.com/virtee/sev/issues/315
        )
        for execlog_zst in $(find '${{ steps.metrics-tmpdir.outputs.dir }}' -name 'execlog-*.zst'); do
          zstd -f -d "$execlog_zst" -o "$execlog"
          execlog2csv \
            --input_execlog="$execlog" \
            --exclude "${excludes[*]}"
        done > '${{ steps.metrics-tmpdir.outputs.dir }}/execlogs.csv'

    - name: Upload execution log
      if: (success() || failure()) && inputs.execlogs-artifact-name != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.execlogs-artifact-name }}
        path: |
          ${{ steps.metrics-tmpdir.outputs.dir }}/execlogs.csv

    - name: Cleanup
      shell: bash
      if: always()
      run: |
        rm -rf '${{ steps.metrics-tmpdir.outputs.dir }}'
