name: 'Bazel-Test-All'
description: 'Run Bazel Test with some optional speed optimizations'
inputs:
  diff-only:
    required: false
    default: false
  stamp-build:
    required: false
    default: true
  upload-artifacts:
    required: false
    default: false
  execlogs-artifact-name:
    required: false
    description: "When provided, the execlogs will be uploaded as an artifact with the specified name."
  extra-bazel-args:
    required: true
    description: "Extra arguments to pass to 'bazel test'"
  CLOUD_CREDENTIALS_CONTENT:
    required: false
  GPG_PASSPHRASE:
    required: true
    description: "GPG key to encrypt build events. Upload can be disabled by explicitly setting the input to an empty string."

runs:
  using: "composite"
  steps:
      - name: Run Bazel Commands
        uses: ./.github/actions/bazel
        env:
          MERGE_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          BRANCH_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        with:
          GPG_PASSPHRASE: ${{ inputs.GPG_PASSPHRASE }}
          execlogs-artifact-name: ${{ inputs.execlogs-artifact-name }}
          run: |
            set -euo pipefail
            [ -n "${NODE_NAME:-}" ] && echo "::notice::Node Name: ${NODE_NAME:-}"

            diff_only='${{ inputs.diff-only }}'
            stamp_build='${{ inputs.stamp-build }}'

            bazel_args=(
                --config=flaky_retry # auto retry eg systests
            )

            if [[ $stamp_build == "true" ]]; then
              # make sure the version is stamped in
              bazel_args+=( --config=stamped )
            fi

            if [[ $diff_only == "true" ]]; then
                target_pattern_file=$(mktemp)
                trap "rm $target_pattern_file" INT TERM EXIT

                merge_base_sha='${{ github.event.pull_request.base.sha }}'
                branch_head_sha='${{ github.event.pull_request.head.sha }}'

                # we can't use HEAD as a fallback for branch_head_sha because that is
                # the merge commit which contains the changes of the current HEAD of master
                # XXX: the logic was ported from a legacy script though ranges like `HEAD..`
                # may not make much sense
                commit_range="${merge_base_sha:-HEAD}..${branch_head_sha:-}"
                # get bazel targets that changed in the commit range and take the union with
                # the targets that are expected to be built.
                comm -12 \
                  <("${CI_PROJECT_DIR:-}"/ci/bazel-scripts/diff.sh test "$commit_range" | sort) \
                  <(IFS='+'; bazel query "//... except attr(tags, \"manual\", //...)" | sort; ) > "$target_pattern_file"

                # if bazel targets is empty we don't need to run any tests
                if [ $(wc <"$target_pattern_file" -l) -eq 0 ]; then
                  echo "No bazel targets to build"
                  exit 0
                fi

                # If there are targets to build, pass them as a file to avoid bash & the OS
                # complaining about the argument list being too long.
                bazel_args+=( --target_pattern_file="$target_pattern_file" )
            else
                bazel_args+=( //... )
            fi

            echo "Building as user: $(whoami)"
            echo "Bazel version: $(bazel version)"

            bazel test ${{ inputs.extra-bazel-args }} "${bazel_args[@]}"

      - name: Upload to S3
        uses: ./.github/actions/upload-artifacts
        if: inputs.upload-artifacts == 'true' && inputs.CLOUD_CREDENTIALS_CONTENT != ''
        with:
          name: Bazel Test All
          # with --check_up_to_date Bazel will error out if the artifacts
          # to be uploaded were not built in the build step above
          # (this ensures that the exact artifacts built above are uploaded)
          upload-command: bazel run --check_up_to_date //:upload-artifacts
          credentials-content: ${{ inputs.CLOUD_CREDENTIALS_CONTENT }}
