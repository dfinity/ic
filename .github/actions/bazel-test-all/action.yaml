name: 'Bazel-Test-All'
description: 'Run Bazel Test'
inputs:
  diff-only:
    required: false
    default: false
  release-build:
    required: false
    default: true
  execlogs-artifact-name:
    required: false
    description: "When provided, the execlogs will be uploaded as an artifact with the specified name."
  BAZEL_COMMAND:
    required: true
    default: 'test'
  BAZEL_TARGETS:
    required: true
  CLOUD_CREDENTIALS_CONTENT:
    required: false
  SSH_PRIVATE_KEY_BACKUP_POD:
    required: false
  GPG_PASSPHRASE:
    required: true
    description: "GPG key to encrypt build events. Upload can be disabled by explicitly setting the input to an empty string."

runs:
  using: "composite"
  steps:
      - name: Prepare worker cache
        shell: bash
        run: |
          # freshly deployed k8s machines require ownership correctly set
          if [ -e /cache ]; then
            sudo find /cache \( -not -user 1001 -or -not -group 1001 \) -exec chown 1001:1001 {} +
          fi

      - name: Set up backup pod access
        shell: bash
        if: inputs.SSH_PRIVATE_KEY_BACKUP_POD != ''
        run: |
          # The following adds the SSH private key to the ssh-agent such that CI can SSH into the backup pod.
          if [ -z "${SSH_AUTH_SOCK:-}" ]; then
            eval "$(ssh-agent -s)"
            ssh-add - <<< '${{ inputs.SSH_PRIVATE_KEY_BACKUP_POD }}'
            echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> "$GITHUB_ENV"
          fi

          rm -rf ~/.ssh
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo -e "Host *\nUser github-runner\n" > ~/.ssh/config

      - name: Write AWS credentials
        shell: bash
        if: inputs.CLOUD_CREDENTIALS_CONTENT != ''
        run: |
          AWS_CREDS="${HOME}/.aws/credentials"
          mkdir -p "$(dirname "${AWS_CREDS}")"
          echo '${{ inputs.CLOUD_CREDENTIALS_CONTENT }}' >"$AWS_CREDS"

      - name: Run Bazel Commands
        uses: ./.github/actions/bazel
        env:
          MERGE_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          BRANCH_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        with:
          GPG_PASSPHRASE: ${{ inputs.GPG_PASSPHRASE }}
          execlogs-artifact-name: ${{ inputs.execlogs-artifact-name }}
          run: |
            set -euo pipefail

            diff_only='${{ inputs.diff-only }}'
            release_build='${{ inputs.release-build }}'

            bazel_args=( )

            if [[ $release_build == "true" ]]; then
              bazel_args+=( --config=release )
            fi

            BAZEL_TARGETS='${{ inputs.BAZEL_TARGETS }}'

            bazel_targets=( )
            for tgt in $BAZEL_TARGETS; do
              bazel_targets+=( "$tgt" )
            done


            if [[ $diff_only == "true" ]]; then
                target_pattern_file=$(mktemp)
                trap "rm $target_pattern_file" INT TERM EXIT

                merge_base_sha='${{ github.event.pull_request.base.sha }}'
                branch_head_sha='${{ github.event.pull_request.head.sha }}'

                # we can't use HEAD as a fallback for branch_head_sha because that is
                # the merge commit which contains the changes of the current HEAD of master
                # XXX: the logic was ported from a legacy script though ranges like `HEAD..`
                # may not make much sense
                commit_range="${merge_base_sha:-HEAD}..${branch_head_sha:-}"
                # get bazel targets that changed in the commit range and take the union with
                # the targets that are expected to be built.
                comm -12 \
                  <("${CI_PROJECT_DIR:-}"/ci/bazel-scripts/diff.sh "$commit_range" | sort) \
                  <(IFS='+'; bazel query "${bazel_targets[*]} except attr(tags, \"manual\", //...)" | sort; ) > "$target_pattern_file"

                # if bazel targets is empty we don't need to run any tests
                if [ $(wc <"$target_pattern_file" -l) -eq 0 ]; then
                  echo "No bazel targets to build"
                  exit 0
                fi

                # If there are targets to build, pass them as a file to avoid bash & the OS
                # complaining about the argument list being too long.
                bazel_args+=( --target_pattern_file="$target_pattern_file" )
            else
                bazel_args+=( "${bazel_targets[@]}" )
            fi

            echo "Building as user: $(whoami)"
            echo "Bazel version: $(bazel version)"

            if [[ $release_build == "true" ]]; then
              bazel ${{ inputs.BAZEL_COMMAND }} "${bazel_args[@]}" --config=release
            else
              bazel ${{ inputs.BAZEL_COMMAND }} "${bazel_args[@]}"
            fi
