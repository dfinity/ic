name: 'Bazel-Test-All'
description: 'Run Bazel Test'
inputs:
  BAZEL_COMMAND:
    required: true
    default: 'test'
  BAZEL_TARGETS:
    required: true
  BUILDEVENT_APIKEY:
    required: false
  CLOUD_CREDENTIALS_CONTENT:
    required: false
  SSH_PRIVATE_KEY_BACKUP_POD:
    required: false
  GPG_PASSPHRASE:
    required: false
    description: "GPG key to encrypt build events. If the key is not set, events won't be uploaded."

runs:
  using: "composite"
  steps:
      - name: Prepare worker cache
        shell: bash
        run: |
          # freshly deployed k8s machines require ownership correctly set
          if [ -e /cache ]; then
            sudo find /cache \( -not -user 1001 -or -not -group 1001 \) -exec chown 1001:1001 {} +
          fi

      - name: Set up backup pod access
        shell: bash
        if: inputs.SSH_PRIVATE_KEY_BACKUP_POD != ''
        run: |
          # The following adds the SSH private key to the ssh-agent such that CI can SSH into the backup pod.
          if [ -z "${SSH_AUTH_SOCK:-}" ]; then
            eval "$(ssh-agent -s)"
            ssh-add - <<< '${{ inputs.SSH_PRIVATE_KEY_BACKUP_POD }}'
            echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> "$GITHUB_ENV"
          fi

          rm -rf ~/.ssh
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo -e "Host *\nUser github-runner\n" > ~/.ssh/config

      - name: Write AWS credentials
        shell: bash
        if: inputs.CLOUD_CREDENTIALS_CONTENT != ''
        run: |
          AWS_CREDS="${HOME}/.aws/credentials"
          mkdir -p "$(dirname "${AWS_CREDS}")"
          echo '${{ inputs.CLOUD_CREDENTIALS_CONTENT }}' >"$AWS_CREDS"

      - name: Run Bazel Test All
        id: bazel-test-all
        shell: bash
        run: |
          ${GITHUB_WORKSPACE}/ci/bazel-scripts/main.sh
        env:
          BAZEL_COMMAND: ${{ inputs.BAZEL_COMMAND }}
          BAZEL_TARGETS: ${{ inputs.BAZEL_TARGETS }}
          BRANCH_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          CI_EVENT_NAME: ${{ github.event_name }}
          CI_JOB_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MERGE_BASE_SHA: ${{ github.event.pull_request.base.sha }}

      - name: Export bazel build events to honeycomb
        shell: bash
        # only upload on success or failure but _not_ on canceled jobs
        if: (success() || failure()) && inputs.BUILDEVENT_APIKEY != ''
        run: |
          if [ -f ./bazel-bep.pb ]; then
              # avoid output unless an error occurs during bes export. This ensures
              # only the (more relevant) output from the main bazel command is shown.
              exportout=$(mktemp)
              if ! BUILDEVENT_APIKEY='${{ inputs.BUILDEVENT_APIKEY }}' bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb" 2> "$exportout" >&2; then
                echo "bes export failed:"
                cat "$exportout"
              fi
              rm "$exportout"
              echo "BEP events exported to honeycomb!"
          fi

      - name: Encrypt build events
        shell: bash
        # only upload on success or failure but _not_ on canceled jobs
        if: (success() || failure()) && inputs.GPG_PASSPHRASE != ''
        run: |
          if [ -f ./bazel-bep.pb ]; then
              gpg --symmetric --cipher-algo AES256 -o bazel-bep.pb.gpg \
                  --passphrase '${{ inputs.GPG_PASSPHRASE }}' --batch --yes bazel-bep.pb
              rm -f ./bazel-bep.pb
          fi
