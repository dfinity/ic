name: 'Bazel-Test-All'
description: 'Run Bazel Test'
inputs:
  diff-only:
    required: false
    default: false
  release-build:
    required: false
    default: true
  BAZEL_COMMAND:
    required: true
    default: 'test'
  BAZEL_TARGETS:
    required: true
  CLOUD_CREDENTIALS_CONTENT:
    required: false
  SSH_PRIVATE_KEY_BACKUP_POD:
    required: false
  GPG_PASSPHRASE:
    required: true
    description: "GPG key to encrypt build events. Upload can be disabled by explicitly setting the input to an empty string."

runs:
  using: "composite"
  steps:
      - name: Prepare worker cache
        shell: bash
        run: |
          # freshly deployed k8s machines require ownership correctly set
          if [ -e /cache ]; then
            sudo find /cache \( -not -user 1001 -or -not -group 1001 \) -exec chown 1001:1001 {} +
          fi

      - name: Set up backup pod access
        shell: bash
        if: inputs.SSH_PRIVATE_KEY_BACKUP_POD != ''
        run: |
          # The following adds the SSH private key to the ssh-agent such that CI can SSH into the backup pod.
          if [ -z "${SSH_AUTH_SOCK:-}" ]; then
            eval "$(ssh-agent -s)"
            ssh-add - <<< '${{ inputs.SSH_PRIVATE_KEY_BACKUP_POD }}'
            echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> "$GITHUB_ENV"
          fi

          rm -rf ~/.ssh
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo -e "Host *\nUser github-runner\n" > ~/.ssh/config

      - name: Write AWS credentials
        shell: bash
        if: inputs.CLOUD_CREDENTIALS_CONTENT != ''
        run: |
          AWS_CREDS="${HOME}/.aws/credentials"
          mkdir -p "$(dirname "${AWS_CREDS}")"
          echo '${{ inputs.CLOUD_CREDENTIALS_CONTENT }}' >"$AWS_CREDS"

      - name: Run Bazel Commands
        uses: ./.github/actions/bazel
        env:
          MERGE_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          BRANCH_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        with:
          GPG_PASSPHRASE: ${{ inputs.GPG_PASSPHRASE }}
          run: |

            diff_only='${{ inputs.diff-only }}'
            release_build='${{ inputs.release-build }}'

            # Some environment variables needed by diff.sh
            export BAZEL_TARGETS='${{ inputs.BAZEL_TARGETS }}'
            export BAZEL_COMMAND='${{ inputs.BAZEL_COMMAND }}'

            if [[ $diff_only == "true" ]]; then
                # get bazel targets that changed within the MR
                BAZEL_TARGETS=$("${CI_PROJECT_DIR:-}"/ci/bazel-scripts/diff.sh)
            fi

            # if bazel targets is empty we don't need to run any tests
            if [ -z "${BAZEL_TARGETS:-}" ]; then
                echo "No bazel targets to build"
                exit 0
            fi

            echo "Building as user: $(whoami)"
            echo "Bazel version: $(bazel version)"

            if [[ $release_build == "true" ]]; then
              bazel ${{ inputs.BAZEL_COMMAND }} $BAZEL_TARGETS --config=release
            else
              bazel ${{ inputs.BAZEL_COMMAND }} $BAZEL_TARGETS
            fi
