name: CI PR Only
# Jobs that run on PRs, but no other pipelines

on:
  merge_group:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  # only triggered on PR, so head_ref will always be set
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true
env:
  CI_PROJECT_DIR: ${{ github.workspace }}
  MERGE_BRANCH: ${{ github.event.pull_request.base.ref }}
  ORG: ${{ github.repository_owner }}

jobs:
  # This job is not run, but just used to set anchor references for other jobs
  anchor-setup:
    if: false
    name: Anchor Setup
    runs-on: &dind-large-setup
      labels: dind-large
    container: &container-setup
      image: ghcr.io/dfinity/ic-build@sha256:3b1bdea254318bca524e9c61a441452f3585c8046888702438546a6de5be0d1a
      options: >-
         -e NODE_NAME
    steps:
      - &checkout
        name: Checkout
        uses: actions/checkout@v4
      - &generate-bazel-invocation-ids
        name: Generate Bazel invocation IDs
        id: gen-uuids
        uses: ./.github/actions/generate-invocation-ids

  insta-tests:
    name: Quick Feedback Tests
    runs-on: &dind-small-setup
      labels: dind-small
    container: *container-setup
    timeout-minutes: 30
    if: ${{ github.event_name != 'merge_group' }}
    steps:
      - *checkout
      - name: Generate Bazel invocation IDs
        id: gen-uuids
        uses: ./.github/actions/generate-invocation-ids
        with:
          targets: |
            [{
              "name": "Test",
              "output_id": "test_id"
            }]
      - name: Run insta-tests
        uses: ./.github/actions/bazel
        with:
          run: bazel test --invocation_id="${{ fromJSON(steps.gen-uuids.outputs.output).test_id }}" //:insta_tests
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  bazel-build-fuzzers-archives:
    name: Bazel Build Fuzzers Archives
    runs-on: *dind-large-setup
    container: *container-setup
    timeout-minutes: 90
    if: ${{ github.event_name != 'merge_group' }}
    steps:
      - *checkout
      - name: Filter Relevant Files
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        with:
          filters: |
            fuzzers:
              - '.github/workflows/ci-pr-only.yml'
              - 'bin/fuzzing/build-all-fuzzers.sh'
              - 'bazel/fuzz_testing.bzl'
      - name: Run Bazel Build Fuzzers Archives
        id: bazel-build-fuzzers-archives
        if: steps.filter.outputs.fuzzers == 'true'
        shell: bash
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}"/bin/fuzzing/
          ./build-all-fuzzers.sh --zip

  lock-generate:
    name: Lock Generate
    runs-on: *dind-small-setup
    container: *container-setup
    timeout-minutes: 30
    if: ${{ github.event_name != 'merge_group' }}
    env:
      CI_EVENT_NAME: ${{ github.event_name }}
    steps:
      - name: Filter Relevant Files
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        with:
          filters: |
            lock-generate:
              - '.github/workflows/ci-pr-only.yml'
              - '.bazelrc'
              - '.bazelversion'
              - '**/*.bazel'
              - '**/*.bzl'
              - '**/*.lock'
              - '**/*.rs'
              - '**/*.toml'
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PR_CREATION_BOT_APP_ID }}
          private-key: ${{ secrets.PR_CREATION_BOT_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.app-token.outputs.token }}
      - name: Run Lock Generate
        id: lock-generate
        if: steps.filter.outputs.lock-generate == 'true'
        run: ./ci/scripts/lock-generate.sh

  generate-config-fixtures:
    name: Generate Config Fixtures
    runs-on: *dind-small-setup
    container: *container-setup
    timeout-minutes: 10
    if: ${{ github.event_name != 'merge_group' }}
    env:
      CI_EVENT_NAME: ${{ github.event_name }}
    steps:
      - name: Filter Relevant Files
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        with:
          filters: |
            generate-config-fixtures:
              - 'rs/ic_os/config_types/**'
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PR_CREATION_BOT_APP_ID }}
          private-key: ${{ secrets.PR_CREATION_BOT_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.app-token.outputs.token }}
      - name: Run Generate Config Fixtures
        id: generate-config-fixtures
        if: steps.filter.outputs.generate-config-fixtures == 'true'
        run: ./ci/scripts/generate-config-fixtures.sh

  dependencies-check:
    name: Dependency Scan for PR
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.event_name != 'merge_group' }}
    permissions:
      contents: read
      pull-requests: write
    env:
      SHELL_WRAPPER: "/usr/bin/time"
      CARGO_AUDIT_VERSION: "0.21.0"
      CARGO_WASMPACK_VERSION: "0.12.1"
      CI_MERGE_REQUEST_IID: ${{ github.event.pull_request.number }}
      CI_PROJECT_PATH: ${{ github.repository }}
      CI_PIPELINE_ID: ${{ github.run_id }}
      CI_COMMIT_SHA: ${{ github.sha }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      SLACK_PSEC_BOT_OAUTH_TOKEN: ${{ secrets.SLACK_PSEC_BOT_OAUTH_TOKEN }}
      REPO_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 256
      - name: Filter Relevant Files
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        with:
          filters: |
            depcheck:
              - '.github/workflows/ci-pr-only.yml'
              - 'bazel/external_crates.bzl'
              - '**/*.lock'
              - '**/*.toml'
      - name: Set up Python
        uses: actions/setup-python@v5
        if: steps.filter.outputs.depcheck == 'true'
        with:
          python-version: "3.12"
      - name: Setup environment deps
        id: setup-environment-deps
        if: steps.filter.outputs.depcheck == 'true'
        shell: bash
        run: |
          # Ignore externally-managed-environment pip error, install packages system-wide.
          PIP_BREAK_SYSTEM_PACKAGES=1 pip3 install --ignore-installed -r requirements.txt
          cargo install cargo-audit --version "${CARGO_AUDIT_VERSION}"
          cargo install wasm-pack --version "${CARGO_WASMPACK_VERSION}"
      - name: Dependency Scan for Pull Request
        id: dependencies-check
        if: steps.filter.outputs.depcheck == 'true'
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH=$PWD/ci/src:$PWD/ci/src/dependencies
          cd ci/src/dependencies/
          $SHELL_WRAPPER python3 job/bazel_rust_ic_scanner_merge_job.py

  # CI job is also executed in Schedule Hourly
  bazel-test-coverage:
    name: Bazel Test Coverage
    runs-on: *dind-large-setup
    container: *container-setup
    timeout-minutes: 90
    if: contains(github.event.pull_request.labels.*.name, 'CI_COVERAGE')
    permissions:
      contents: read
      pull-requests: read
    steps:
      - *checkout
      - name: Run Bazel Test Coverage
        shell: bash
        run: |
          ./ci/scripts/bazel-coverage.sh
      - name: Upload bazel-coverage
        uses: actions/upload-artifact@v4
        with:
          name: bazel-coverage
          retention-days: 1
          if-no-files-found: ignore
          compression-level: 9
          path: |
            cov_html.zip
