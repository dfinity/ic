name: Schedule Hourly

on:
  schedule:
    - cron: "0 7-23 * * *"
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  CI_COMMIT_SHA: ${{ github.sha }}
  CI_JOB_NAME: ${{ github.job }}
  CI_JOB_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  CI_PIPELINE_SOURCE: ${{ github.event_name }}
  CI_PROJECT_DIR: ${{ github.workspace }}
  CI_RUN_ID: ${{ github.run_id }}
  RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  BUILDEVENT_DATASET: "github-ci-dfinity"

anchors:
  image: &image
    image: ghcr.io/dfinity/ic-build@sha256:ced9611af39119f62feedc8a5ad75a8fac478cb43d2d56b623023766f6ce8ca7
  dind-large-setup: &dind-large-setup
    runs-on:
      labels: dind-large
    container:
      <<: *image
      options: >-
        -e NODE_NAME
        --privileged --cgroupns host
        -v /cache:/cache -v /var/sysimage:/var/sysimage -v /var/tmp:/var/tmp
    timeout-minutes: 120
  checkout: &checkout
    name: Checkout
    uses: actions/checkout@v4
  before-script: &before-script
    name: Before script
    id: before-script
    shell: bash
    run: |
      [ -n "${NODE_NAME:-}" ] && echo "Node: $NODE_NAME"
  docker-login: &docker-login
    name: Login to Dockerhub
    shell: bash
    run: ./ci/scripts/docker-login.sh
    env:
      DOCKER_HUB_USER: ${{ vars.DOCKER_HUB_USER }}
      DOCKER_HUB_PASSWORD_RO: ${{ secrets.DOCKER_HUB_PASSWORD_RO }}
  bazel-bep: &bazel-bep
    name: Upload bazel-bep
    # runs only if previous step succeeded or failed;
    # we avoid collecting artifacts of jobs that were cancelled
    if: success() || failure()
    uses: actions/upload-artifact@v4
    with:
      name: ${{ github.job }}-bep
      retention-days: 14
      if-no-files-found: ignore
      compression-level: 9
      path: |
        bazel-bep.pb
        profile.json

jobs:
  bazel-build-all-no-cache:
    name: Bazel Build All No Cache
    <<: *dind-large-setup
    steps:
      - <<: *checkout
      - <<: *before-script
      - <<: *docker-login
      - name: Run Bazel Build All No Cache
        uses:  ./.github/actions/bazel-test-all/
        env:
          AWS_SHARED_CREDENTIALS_CONTENT: ${{ secrets.AWS_SHARED_CREDENTIALS_FILE }}
        with:
          BAZEL_CI_CONFIG: "--config=ci"
          BAZEL_COMMAND: "build"
          BAZEL_EXTRA_ARGS: "--repository_cache= --disk_cache= --noremote_accept_cached --remote_instance_name=${CI_COMMIT_SHA} --@rules_rust//rust/settings:pipelined_compilation=True"
      - <<: *bazel-bep

  bazel-system-test-hourly:
    name: Bazel System Tests Hourly
    <<: *dind-large-setup
    runs-on:
      group: zh1
      labels: dind-large
    steps:
      - <<: *checkout
      - <<: *before-script
      - <<: *docker-login
      - name: Run Bazel System Test Hourly
        id: bazel-test-all
        uses:  ./.github/actions/bazel-test-all/
        with:
          BAZEL_COMMAND: "test"
          BAZEL_TARGETS: "//rs/..."
          BAZEL_CI_CONFIG: "--config=ci --repository_cache=/cache/bazel"
          BAZEL_EXTRA_ARGS: "--keep_going --test_tag_filters=system_test_hourly"
          BUILDEVENT_APIKEY: ${{ secrets.HONEYCOMB_API_TOKEN }}
      - <<: *bazel-bep

  # CI job is also executed in PR on use of 'CI_COVERAGE' label
  bazel-test-coverage:
    name: Bazel Test Coverage
    <<: *dind-large-setup
    steps:
      - <<: *checkout
      - <<: *before-script
      - name: Run Bazel Test Coverage
        shell: bash
        run: |
          ./ci/scripts/bazel-coverage.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
