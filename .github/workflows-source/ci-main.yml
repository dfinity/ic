name: CI Main

on:
  merge_group:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - master
      - 'dev-gh-*'
  pull_request:
    branches-ignore:
      - hotfix-* # This is to ensure that this workflow is not triggered twice on ic-private, as it's already triggered from release-testing
  # Used as reusable workflow within release-testing workflow
  workflow_call:

# runs for the same workflow are cancelled on PRs but not on master
# explanation: on push to master head_ref is not set, so we want it to fall back to run_id so it is not cancelled
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

env:
  CI_COMMIT_SHA: ${{ github.sha }}
  CI_JOB_NAME: ${{ github.job }}
  CI_PROJECT_DIR: ${{ github.workspace }}
  CI_EVENT_NAME: ${{ github.event_name }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  CI_RUN_ID: ${{ github.run_id }}

anchors:
  image: &image
    image: ghcr.io/dfinity/ic-build@sha256:40399f5c94cfc35201bc26e30fa7dded1b839f13773840819fd6c314ca2cf840
  dind-large-setup: &dind-large-setup
    runs-on:
      labels: dind-large
    container:
      <<: *image
      options: >-
        -e NODE_NAME --privileged --cgroupns host
    timeout-minutes: 90
  dind-small-setup: &dind-small-setup
    runs-on:
      labels: dind-small
    container:
      <<: *image
      options: >-
        -e NODE_NAME
    timeout-minutes: 30
  checkout: &checkout
    name: Checkout
    uses: actions/checkout@v4
    with:
      fetch-depth: ${{ github.event_name == 'pull_request' && 256 || 0 }}
  python-setup: &python-setup
    name: Set up Python
    uses: actions/setup-python@v5
    with:
      python-version: '3.12'

jobs:
  config:
    name: Set Config
    runs-on: ubuntu-latest
    outputs:
      release-build: ${{ steps.config.outputs.release-build }}
      diff_only: ${{ steps.config.outputs.diff_only }}
      skip_long_tests: ${{ steps.config.outputs.skip_long_tests }}
      full_macos_build: ${{ steps.config.outputs.full_macos_build }}
    steps:
      - name: Infer build config
        id: config
        run: |
          set -euo pipefail

          # List of "protected" branches, i.e. branches (not necessarily "protected" in the GitHub sense) where we need
          # the full build to occur (including versioning)
          protected_branches=("^master$" "^rc--" "^hotfix-" "^master-private$")
          for pattern in "${protected_branches[@]}"; do
              if [[ "$BRANCH_NAME" =~ $pattern ]]; then
                  is_protected_branch="true"
                  break
              fi
          done

          if [[ "${is_protected_branch:-}" == "true" || '${{ github.event_name }}' == 'workflow_call' ]]; then
              # if we are on a "protected" branch, targeting an rc branch or
              # we're called from another workflow (i.e. release-testing) we
              # upload all artifacts and run a release build (with versioning)
              release_build="true"
              diff_only="false"
              skip_long_tests="false"
          elif [[ '${{ github.event_name }}' == "merge_group" ]]; then
              # on a merge group, we don't upload the artifacts (i.e. no release
              # build) but we ensure all targets are built (no diff)
              release_build="false"
              diff_only="false"
              skip_long_tests="true"
          elif [[ '${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'CI_ALL_BAZEL_TARGETS') }}' == 'true' ]]; then
              # "CI_ALL_BAZEL_TARGETS" is set and act as if we're on a protected
              # branch
              release_build="true"
              diff_only="false"
              skip_long_tests="false"
          elif [[ '${{ github.event_name == 'push' }}' == 'true' && "$BRANCH_NAME" =~ '^dev-gh-' ]]; then
              # On pushes to dev-gh-* branches don't do a release, build all targets except long_tests.
              release_build="false"
              diff_only="false"
              skip_long_tests="true"
          else
              # default behavior is to not release, only build targets with modified inputs and skip long_tests.
              release_build="false"
              diff_only="true"
              skip_long_tests="true"
          fi

          if [[ $release_build == 'true' ]] || [[ '${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'CI_MACOS_INTEL') }}' == 'true' ]]; then
              full_macos_build="true"
          else
              full_macos_build="false"
          fi


          echo "| config | value |" >> "$GITHUB_STEP_SUMMARY"
          echo "| --- | --- |" >> "$GITHUB_STEP_SUMMARY"

          echo "release-build: $release_build"
          echo "release-build=$release_build" >> "$GITHUB_OUTPUT"
          echo "| \`release-build\` | \`$release_build\` |" >> "$GITHUB_STEP_SUMMARY"

          echo "diff_only: $diff_only"
          echo "diff_only=$diff_only" >> "$GITHUB_OUTPUT"
          echo "| \`diff_only\` | \`$diff_only\` |" >> "$GITHUB_STEP_SUMMARY"

          echo "skip_long_tests: $skip_long_tests"
          echo "skip_long_tests=$skip_long_tests" >> "$GITHUB_OUTPUT"
          echo "| \`skip_long_tests\` | \`$skip_long_tests\` |" >> "$GITHUB_STEP_SUMMARY"

          echo "full_macos_build: $full_macos_build"
          echo "full_macos_build=$full_macos_build" >> "$GITHUB_OUTPUT"
          echo "| \`full_macos_build\` | \`$full_macos_build\` |" >> "$GITHUB_STEP_SUMMARY"

  bazel-test-all:
    name: Bazel Test All
    needs: [ config ]
    <<: *dind-large-setup
    timeout-minutes: 120
    env:
      # Only run ci/bazel-scripts/diff.sh on PRs that are not labeled with "CI_ALL_BAZEL_TARGETS".
      OVERRIDE_DIDC_CHECK: ${{ contains(github.event.pull_request.labels.*.name, 'CI_OVERRIDE_DIDC_CHECK') }}
      CI_OVERRIDE_BUF_BREAKING: ${{ contains(github.event.pull_request.labels.*.name, 'CI_OVERRIDE_BUF_BREAKING') }}
    steps:
      - <<: *checkout
      - name: "Node Name"
        run: |
          echo "::notice::Node Name: ${NODE_NAME}"

      - name: Run Bazel Commands
        uses: ./.github/actions/bazel
        with:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          execlogs-artifact-name: execlogs-bazel-test-all
          run: |
            set -euo pipefail

            RELEASE_BUILD='${{ needs.config.outputs.release-build }}'
            DIFF_ONLY='${{ needs.config.outputs.diff_only }}'
            SKIP_LONG_TESTS='${{ needs.config.outputs.skip_long_tests }}'
            BASE_SHA='${{ github.event.pull_request.base.sha }}'
            HEAD_SHA='${{ github.event.pull_request.head.sha }}'

            # Determine bazel_args based on event type or branch name
            bazel_args=(
              --config=lint # enable lint checks
              --config=flaky_retry # auto retry eg systests
              )
            if [[ "$CI_EVENT_NAME" == 'merge_group' ]]; then
                bazel_args+=( --test_timeout_filters=short,moderate --flaky_test_attempts=3 )
            elif [[ $BRANCH_NAME =~ ^hotfix-.* ]]; then
                bazel_args+=( --test_timeout_filters=short,moderate )
            else
                bazel_args+=( --keep_going )
            fi

            if [[ "$RELEASE_BUILD" == 'true' ]]; then
              # make sure the version is stamped in
              bazel_args+=( --config=stamped )
            fi

            # If there are targets to test, pass them as a file to bazel to avoid bash & the OS
            # complaining about the argument list being too long.
            target_pattern_file=$(mktemp)
            trap "rm $target_pattern_file" INT TERM EXIT
            targets_args=()
            if [[ "$SKIP_LONG_TESTS" == 'true' ]]; then
              targets_args+=("--skip_long_tests")
            fi
            if [[ "$DIFF_ONLY" == 'true' ]]; then
              targets_args+=("--base=$BASE_SHA" "--head=$HEAD_SHA")
            fi
            "${CI_PROJECT_DIR:-}"/ci/bazel-scripts/targets.py test "${targets_args[@]}" >"$target_pattern_file"
            num_targets=$(wc <"$target_pattern_file" -l)
            # if bazel targets is empty we don't need to run any tests
            if [ "$num_targets" -eq 0 ]; then
              echo "No bazel targets"
              exit 0
            fi
            echo "Testing the following $num_targets targets:"
            cat "$target_pattern_file"
            bazel_args+=( --target_pattern_file="$target_pattern_file" )

            echo "Building as user: $(whoami)"
            echo "Bazel version: $(bazel version)"

            bazel test "${bazel_args[@]}"

      - name: Upload to S3
        uses: ./.github/actions/upload-artifacts
        if: needs.config.outputs.release-build == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        with:
          name: Bazel Test All
          # with --check_up_to_date Bazel will error out if the artifacts
          # to be uploaded were not built in the build step above
          # (this ensures that the exact artifacts built above are uploaded)
          upload-command: bazel run --check_up_to_date //:upload-artifacts
          credentials-content: ${{ secrets.CLOUD_CREDENTIALS_CONTENT }}

  bazel-test-macos-intel:
    name: Bazel Test macOS Intel
    needs: [ config ]
    timeout-minutes: 130
    runs-on:
      labels: macOS
    # Run on protected branches, but only on public repo
    if: github.repository == 'dfinity/ic'
    steps:
      - <<: *checkout
        # The amd64-darwin runners are pretty slow so we don't always run the tests -- we do however
        # wanna make sure bazel evaluates successfully.
      - name: Evaluate workspace
        uses: ./.github/actions/bazel
        with:
          run: |
            bazel build \
              --config=stamped \
              --build_tag_filters=test_macos \
              //... --nobuild

      - name: Build & Test
        if: ${{ needs.config.outputs.full_macos_build == 'true' }}
        uses: ./.github/actions/bazel
        with:
          run: |
            bazel test \
              --config=stamped \
              --test_tag_filters=test_macos \
              //...

      - name: Upload artifacts
        # NOTE: GHA output quirk, 'true' is a string
        if: ${{ needs.config.outputs.full_macos_build == 'true' && needs.config.outputs.release-build == 'true' }}
        uses: ./.github/actions/upload-artifacts
        with:
          name: macOS Intel artifacts
          upload-command: bazel run --check_up_to_date //:upload-artifacts
          credentials-content: ${{ secrets.CLOUD_CREDENTIALS_CONTENT }}

      - name: Purge Bazel Output
        if: always()
        shell: bash
        run: |
          # Clean up the output base for the next run
          sudo rm -rf /var/tmp/bazel-output

  # Build & test the arm64-linux variant of pocket-ic-server and makes
  # it available as a GHA artifact
  # NOTE: uses 'namespace.so' runners
  bazel-test-arm64-linux:
    name: Bazel Test arm64-linux
    runs-on: namespace-profile-arm64-linux # profile created in namespace console
    if: github.repository == 'dfinity/ic' # only run on public repo, not private since Namespace runners are not configured there, so these CI jobs get stuck otherwise.
    steps:
      - name: Set up Bazel cache
        run: |
          # Creates a bazelrc configuration fragment which tells bazel where the cache lives.
          nsc bazel cache setup --bazelrc=/tmp/bazel-cache.bazelrc
      - uses: actions/checkout@v4

      - name: Build and Test
        run: |
          # run pocket-ic tests
          bazel \
            --noworkspace_rc \
            --bazelrc=./bazel/conf/.bazelrc.build --bazelrc=/tmp/bazel-cache.bazelrc \
            test \
              //packages/pocket-ic:all \
              //rs/pocket_ic_server:test \
              //rs/pocket_ic_server:gateway \
              //rs/pocket_ic_server:pocket-ic-server

          mkdir -p build
          cp \
            ./bazel-bin/rs/pocket_ic_server/pocket-ic-server \
            ./build/pocket-ic-server-arm64-linux

      - name: Upload pocket-ic-server
        uses: actions/upload-artifact@v4
        with:
          name: pocket-ic-server-arm64-linux
          path: ./build/pocket-ic-server-arm64-linux

  bazel-test-arm64-darwin:
    name: Bazel Test macOS Apple Silicon
    timeout-minutes: 120
    runs-on: namespace-profile-darwin # profile created in namespace console
    if: github.repository == 'dfinity/ic' # only run on public repo, not private since Namespace runners are not configured there, so these CI jobs get stuck otherwise.
    steps:
      - name: Set up Bazel cache
        run: |
          # Creates a bazelrc configuration fragment which tells bazel where the cache lives.
          nsc bazel cache setup --bazelrc=/tmp/bazel-cache.bazelrc
      - uses: actions/checkout@v4

      # Build and test, excluding 'upload' jobs that are not required on macOS (used in reproducibility tests)
      - name: Test
        run: |
          # Setup zig-cache
          mkdir -p /tmp/zig-cache

          bazel_targets=(
            # make sure codebase builds for local development
            //rs/...
            //publish/binaries/...

            # necessary artifacts & tests for pocket -ic
            //packages/pocket-ic:all \
            # NOTE: technically covered by //rs/... above, but
            # added explicitly for clarity
            //rs/pocket_ic_server:test \
            //rs/pocket_ic_server:gateway \
            //rs/pocket_ic_server:pocket-ic-server
          )

          bazel \
            --noworkspace_rc \
            --bazelrc=./bazel/conf/.bazelrc.build --bazelrc=/tmp/bazel-cache.bazelrc \
            test \
            --test_tag_filters="test_macos,test_macos_slow" \
            "${bazel_targets[@]}"

          mkdir -p build
          cp \
            ./bazel-bin/rs/pocket_ic_server/pocket-ic-server \
            ./build/pocket-ic-server-arm64-darwin

      - name: Upload pocket-ic-server
        uses: actions/upload-artifact@v4
        with:
          name: pocket-ic-server-arm64-darwin
          path: ./build/pocket-ic-server-arm64-darwin

  # Upload external artifacts, retrieved from non-DFINITY runner builds.
  upload-external-artifacts:
    name: Upload external artifacts
    <<: *dind-large-setup
    needs: [bazel-test-arm64-linux, bazel-test-arm64-darwin, config]
    if: ${{ needs.config.outputs.release-build == 'true' }} # GHA output quirk, 'true' is a string
    steps:
      - uses: actions/checkout@v4
      - name: Download pocket-ic-server (arm64-linux)
        uses: actions/download-artifact@v4
        with:
          name: pocket-ic-server-arm64-linux
          # avoid downloading to workspace to avoid version being marked as dirty
          path: ~/.cache/pocket-ic-server-arm64-linux

      - name: Download pocket-ic-server (arm64-darwin)
        uses: actions/download-artifact@v4
        with:
          name: pocket-ic-server-arm64-darwin
          # avoid downloading to workspace to avoid version being marked as dirty
          path: ~/.cache/pocket-ic-server-arm64-darwin

      - name: Prepare bundle
        id: prepare-bundle
        run: |
            bundledir=$(mktemp -d)

            # Create a "bundle" that the uploader can digest
            mkdir -p "$bundledir/binaries/arm64-linux/"
            cp ~/.cache/pocket-ic-server-arm64-linux/pocket-ic-server-arm64-linux "$bundledir/binaries/arm64-linux/pocket-ic-server-arm64-linux"

            mkdir -p "$bundledir/binaries/arm64-darwin/"
            cp ~/.cache/pocket-ic-server-arm64-darwin/pocket-ic-server-arm64-darwin "$bundledir/binaries/arm64-darwin/pocket-ic-server-arm64-darwin"

            echo bundledir="$bundledir" >> "$GITHUB_OUTPUT"

      - name: Upload
        uses: ./.github/actions/upload-artifacts
        with:
          name: arm64 artifacts
          upload-command: bazel run --config=stamped //:artifact-uploader -- ${{ steps.prepare-bundle.outputs.bundledir }}
          credentials-content: ${{ secrets.CLOUD_CREDENTIALS_CONTENT }}

  bazel-run-fuzzers:
    name: Bazel Run Fuzzers
    <<: *dind-large-setup
    steps:
      - <<: *checkout
      - name: Run Libfuzzer targets
        uses: ./.github/actions/bazel
        with:
          run: ./bin/fuzzing/run-all-fuzzers.sh --libfuzzer 100
      - name: Run AFL targets
        uses: ./.github/actions/bazel
        with:
          run: ./bin/fuzzing/run-all-fuzzers.sh --afl 100

  python-ci-tests:
    name: Python CI Tests
    <<: *dind-small-setup
    steps:
      - <<: *checkout
      - <<: *python-setup
      - name: Run Python CI Tests
        shell: bash
        run: |
          set -xeuo pipefail
          export PYTHONPATH=$PWD/ci/src:$PWD/ci/src/dependencies
          # Ignore externally-managed-environment pip error, install packages system-wide.
          PIP_BREAK_SYSTEM_PACKAGES=1 pip3 install --ignore-installed -r requirements.txt
          cd ci/src
          pytest -m "not fails_on_merge_train" -v -o junit_family=xunit1 \
            --junitxml=../../test_report.xml --cov=. --cov-report=term \
            --cov-report=term-missing --cov-report=html --cov-branch
        env:
          CI_COMMIT_REF_PROTECTED: ${{ github.ref_protected }}
          CI_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REPO_NAME: ${{ github.repository }}

  build-ic:
    needs: [ config ]
    name: Build IC
    <<: *dind-large-setup
    # keep options from dind-large-setup but run on dind-small-setup
    runs-on:
      labels: dind-small
    if: ${{ github.event_name != 'merge_group' }}
    steps:
      - <<: *checkout
      - name: "Node Name"
        run: |
          echo "::notice::Node Name: ${NODE_NAME}"
      - name: Run Build IC
        uses: ./.github/actions/bazel
        with:
          execlogs-artifact-name: execlogs-build-ic
          run: |
            set -euo pipefail

            RELEASE_BUILD='${{ needs.config.outputs.release-build }}'
            DIFF_ONLY='${{ needs.config.outputs.diff_only }}'
            BASE_SHA='${{ github.event.pull_request.base.sha }}'
            HEAD_SHA='${{ github.event.pull_request.head.sha }}'

            cd "$CI_PROJECT_DIR"

            # run full release build on "protected" branches
            if [[ "$RELEASE_BUILD" == 'true' ]]; then
                ci/container/build-ic.sh -i -c -b
                exit 0
            fi

            # run full non-release build if not asked to diff
            if ! [ "$DIFF_ONLY" == 'true' ]; then
                ci/container/build-ic.sh -i -c -b --no-release
                exit 0
            fi

            # otherwise, infer targets to build
            targets=$(mktemp)
            trap "rm $targets" INT TERM EXIT
            targets_args=()
            commit_range_arg=""
            if [[ "$DIFF_ONLY" == 'true' ]]; then
              targets_args+=("--base=$BASE_SHA" "--head=$HEAD_SHA")
            fi
            ci/bazel-scripts/targets.py build "${targets_args[@]}" >"$targets"

            echo "Considering the following $(wc <"$targets" -l) targets:"
            cat "$targets"

            ARGS=()

            if grep -q '^//ic-os' <"$targets"; then
                ARGS+=(-i)
            fi
            if grep -q '^//publish/canisters' <"$targets"; then
                ARGS+=(-c)
            fi
            if grep -q '^//publish/binaries' <"$targets"; then
                ARGS+=(-b)
            fi

            if [[ ${#ARGS[@]} -eq 0 ]]; then
                echo "No changes that require building IC-OS, binaries or canisters."
                exit 0
            fi

            ci/container/build-ic.sh "${ARGS[@]}" --no-release

  build-determinism:
    name: Build Determinism
    runs-on: ubuntu-latest
    needs: [build-ic, bazel-test-all]
    steps:
      - name: Download execution logs (cache)
        uses: actions/download-artifact@v4
        with:
          name: execlogs-bazel-test-all
          path: execlogs-cache
      - name: Download execution logs (nocache)
        uses: actions/download-artifact@v4
        with:
          name: execlogs-build-ic
          path: execlogs-nocache

      - name: Build Determinism Test
        run: |
          set -euo pipefail

          n_lines_cache=$(cat execlogs-cache/execlogs.csv | wc -l)
          n_lines_nocache=$(cat execlogs-nocache/execlogs.csv | wc -l)
          echo "comparing $n_lines_cache (cache) and $n_lines_nocache (nocache) lines"

          # running tests may not pull all targets locally. If that's the case,
          # there will be 0 lines and nothing to compare.
          if [ "$n_lines_cache" -eq 0 ] || [ "$n_lines_nocache" -eq 0 ]; then
            echo "No lines to compare"
            exit 0
          fi

          # sort the files by the field we join on (artifact path), see below
          sponge=$(mktemp)

          sort -t, -k2 <execlogs-cache/execlogs.csv >"$sponge"
          cp "$sponge" execlogs-cache/execlogs.csv

          sort -t, -k2 <execlogs-nocache/execlogs.csv >"$sponge"
          cp "$sponge" execlogs-nocache/execlogs.csv

          rm "$sponge"

          # join the CSVs (separator ',') and compare the hashes. This creates a table with the following columns:
          #   //rs/foo,bazel-out/path/to-artifact,deadbeef,deafb33f
          # target label (1.1), artifact path (1.2), and hashes (1.3 & 2.3). The join is done
          # on the artifact path, second field on input one (-1) and input two (-2) :'-12 -22'
          # The output is then compared with awk, printing mismatches, and keeping track of how many mismatches we
          # encountered.
          join \
            -t, -o 1.1,1.2,1.3,2.3 -12 -22 \
            execlogs-cache/execlogs.csv \
            execlogs-nocache/execlogs.csv \
            | awk -F, 'BEGIN { N_BAD=0; } $3 != $4 { print $1 " " $2 ": " $3 " != " $4; N_BAD++; } END { if (N_BAD) { print N_BAD " mismatches found"; exit 1; } else { print "No mismatches"; }; }'

  bazel-build-all-no-cache:
    name: Bazel Build All No Cache
    needs: [config]
    if: ${{ needs.config.outputs.skip_long_tests != 'true' }} # GHA output quirk, 'true' is a string
    <<: *dind-large-setup
    steps:
      - <<: *checkout
      - name: Run Bazel Build All No Cache
        uses: ./.github/actions/bazel
        with:
          run: bazel build --config=stamped --config=local //...
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  cargo-clippy-linux:
    name: Cargo Clippy Linux
    <<: *dind-small-setup
    steps:
      - <<: *checkout
      - name: Filter Rust Files [*.{rs,toml,lock}]
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        if : |
          github.event_name == 'pull_request' ||
          github.event_name == 'merge_group'
        with:
          filters: |
            cargo:
              - "**/*.rs"
              - "**/*.toml"
              - "**/*.lock"
      - name: Run Cargo Clippy Linux
        id: cargo-clippy-linux
        if: |
          steps.filter.outputs.cargo == 'true' ||
          github.event_name == 'schedule' ||
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'workflow_call'
        shell: bash
        run: |
          set -eExuo pipefail
          export CARGO_TERM_COLOR=always # ensure output has colors
          "$CI_PROJECT_DIR"/ci/scripts/rust-lint.sh

  cargo-build-release-linux:
    name: Cargo Build Release Linux
    <<: *dind-small-setup
    steps:
      - <<: *checkout
      - name: Filter Rust Files [*.{rs,toml,lock}]
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        if : |
          github.event_name == 'pull_request' ||
          github.event_name == 'merge_group'
        with:
          filters: |
            cargo:
              - "**/*.rs"
              - "**/*.toml"
              - "**/*.lock"
      - name: Run Cargo Build Release Linux
        id: cargo-build-release-linux
        if: |
          steps.filter.outputs.cargo == 'true' ||
          github.event_name == 'schedule' ||
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'workflow_call'
        shell: bash
        run: |
          set -eExuo pipefail
          export CARGO_TERM_COLOR=always # ensure output has colors
          cargo build --release --locked

  check-pull-request-bazel-targets:
    name: Check PULL_REQUEST_BAZEL_TARGETS
    <<: *dind-small-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check PULL_REQUEST_BAZEL_TARGETS
        run: ./ci/bazel-scripts/targets.py check
