regexp -s boot_disk '^\(([a-z0-9]*),[a-z0-9]*\)/EFI/BOOT' $fw_path

set prefix=($boot_disk,gpt2)

# GRUB needs to be in "normal mode" to show the menu interface
insmod normal

set default=0
# GRUB menu timeout exists for manual NNS recovery via guestos-recovery-upgrader service
set timeout=15
set timeout_style=menu

if [ -s $prefix/grubenv ]; then
  load_env
fi

# boot_alternative should be "A" or "B" to indicate whether we will use
# the A or B variant of the system (see below for mapping to
# partitions).
# If unset (very first boot), defaults to "A".
if [ "${boot_alternative}" = "" ]; then
    set boot_alternative=A
fi

# boot_cycle should be one of:
#
# - "install": this state exists only once, after initial install of the
#   system
#
# - "stable": this indicates that we consider the system given in
#   boot_alternative as "good": we will always try booting it
#
# - "first_boot": this indicates that we are booting for the very first
#   time after an upgrade into the system given by "boot_alternative"
#   we will boot this system and then go into "failsafe_check" state
#
# - "failsafe_check": we have tried booting the currently active system,
#   but the target system did not 'acknowledge' that it got into a
#   working state (by changing state to "stable" after it booted
#   successfully)
#   we will fall back to the alternative system and declare it stable
#
# If unset (very first boot), default to "stable"
if [ "${boot_cycle}" = "" ]; then
    set boot_cycle=stable
    save_env boot_alternative boot_cycle
fi
if [ "${boot_cycle}" = "install" ]; then
    set boot_cycle=stable
    save_env boot_alternative boot_cycle
    BOOT_STATE=install
elif [ "${boot_cycle}" = "first_boot" ]; then
    set boot_cycle="failsafe_check"
    save_env boot_alternative boot_cycle
    BOOT_STATE=upgrade
elif [ "${boot_cycle}" = "failsafe_check" ]; then
    if [ "${boot_alternative}" = "A" ]; then
        set boot_alternative=B
    else
        set boot_alternative=A
    fi
    set boot_cycle="stable"
    save_env boot_alternative boot_cycle
    BOOT_STATE=failsafe
else
    BOOT_STATE=stable
fi

if [ "${boot_alternative}" = "A" ]; then
    set root=(lvm/hostlvm-A_boot)
    set linux_root=/dev/hostlvm/A_root
else
    set root=(lvm/hostlvm-B_boot)
    set linux_root=/dev/hostlvm/B_root
fi

echo Booting linux from system "${boot_alternative}" (state: "${boot_cycle}")...

menuentry "Boot System ${boot_alternative} (${BOOT_STATE})" {
    if [ -f "${boot}/boot_args" ]; then
        echo "Loading boot args ${boot}/boot_args"
        source "${boot}/boot_args"
        # Use the appropriate boot args based on boot_alternative
        if [ "${boot_alternative}" = "A" ]; then
            if [ -z "${BOOT_ARGS_A}" ]; then
                echo "Error: BOOT_ARGS_A is not defined in ${boot}/boot_args"
                exit 1
            fi
            echo "Boot arguments: ${BOOT_ARGS_A}"
            linux /vmlinuz $BOOT_ARGS_A
        else
            if [ -z "${BOOT_ARGS_B}" ]; then
                echo "Error: BOOT_ARGS_B is not defined in ${boot}/boot_args"
                exit 1
            fi
            echo "Boot arguments: ${BOOT_ARGS_B}"
            linux /vmlinuz $BOOT_ARGS_B
        fi
    else
        # Fallback to old method if boot_args doesn't exist
        echo "Warning: boot_args not found, using fallback method"
        if [ -f ${boot}/extra_boot_args ]; then
            echo Loading extra boot args ${boot}/extra_boot_args
            source ${boot}/extra_boot_args
            echo Extra boot arguments $EXTRA_BOOT_ARGS
        fi

        linux /vmlinuz root=$linux_root console=ttyS0,115200 console=tty0 nomodeset video=1024x768 dfinity.system=$boot_alternative $EXTRA_BOOT_ARGS
    fi

    if [ -f ${boot}/initrd.img ]; then
        echo Loading initial ram disk ${boot}/initrd.img
        initrd ${boot}/initrd.img
    fi
}
