regexp -s boot_disk '^\(([a-z0-9]*),[a-z0-9]*\)/EFI/BOOT' $cmdpath

set prefix=($boot_disk,gpt2)

if [ -s $prefix/grubenv ]; then
  load_env
fi

# boot_alternative should be "A" or "B" to indicate whether we will use
# the A or B variant of the system (see below for mapping to
# partitions).
# If unset (very first boot), defaults to "A".
if [ "${boot_alternative}" = "" ]; then
    set boot_alternative=A
fi

# boot_cycle should be one of:
#
# - "install": this state exists only once, after initial install of the
#   system
#
# - "stable": this indicates that we consider the system given in
#   boot_alternative as "good": we will always try booting it
#
# - "first_boot": this indicates that we are booting for the very first
#   time after an upgrade into the system given by "boot_alternative"
#   we will boot this system and then go into "failsafe_check" state
#
# - "failsafe_check": we have tried booting the currently active system,
#   but the target system did not 'acknowledge' that it got into a
#   working state (by changing state to "stable" after it booted
#   successfully)
#   we will fall back to the alternative system and declare it stable
#
# If unset (very first boot), default to "stable"
if [ "${boot_cycle}" = "" ]; then
    set boot_cycle=stable
    save_env boot_alternative boot_cycle
fi

if [ "${boot_cycle}" = "install" ]; then
    set boot_cycle=stable
    save_env boot_alternative boot_cycle
    BOOT_STATE=install
elif [ "${boot_cycle}" = "first_boot" ]; then
    set boot_cycle="failsafe_check"
    save_env boot_alternative boot_cycle
    BOOT_STATE=upgrade
elif [ "${boot_cycle}" = "failsafe_check" ]; then
    if [ "${boot_alternative}" = "A"]; then
        set boot_alternative=B
    else
        set boot_alternative=A
    fi
    set boot_cycle="stable"
    save_env boot_alternative boot_cycle
    BOOT_STATE=failsafe
else
    BOOT_STATE=stable
fi

if [ "${boot_alternative}" = "A" ]; then
    set root=($boot_disk,gpt4)
    set linux_root=/dev/vda5
else
    set root=($boot_disk,gpt7)
    set linux_root=/dev/vda8
fi

echo Booting linux from system "${boot_alternative}" (state: "${boot_cycle}")...

if [ -f ${boot}/extra_boot_args ]; then
    echo Loading extra boot args ${boot}/extra_boot_args
    # This is not really great -- we are directly sourcing the target
    # file while we would only want a single variable out of it.
    # I don't think there is another way.
    source ${boot}/extra_boot_args
    echo Extra boot arguments $EXTRA_BOOT_ARGS
fi

linux /vmlinuz root=$linux_root console=ttyS0 dfinity.system=$boot_alternative dfinity.boot_state=$BOOT_STATE $EXTRA_BOOT_ARGS

if [ -f ${boot}/initrd.img ] ; then
    echo Loading initial ram disk ${boot}/initrd.img
    initrd ${boot}/initrd.img
fi


boot
