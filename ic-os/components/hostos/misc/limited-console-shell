#!/bin/bash
# Limited Console Shell - POC implementation
# Provides restricted access to HostOS administrative commands

source /opt/ic/bin/config.sh

# Show available commands
show_menu() {
    echo "=== HostOS Limited Console ==="
    echo "Available commands:"
    echo "1. system-status      - Show system status"
    echo "2. service-status     - Show service status" 
    echo "3. restart-service    - Restart a service"
    echo "4. view-logs          - View service logs"
    echo "5. network-interfaces - Show network interfaces"
    echo "6. network-routing    - Show routing table"
    echo "7. network-dns        - Show DNS configuration"
    echo "8. network-connectivity - Test network connectivity"
    echo "9. network-settings   - Show network settings from config"
    echo "10. guestos-logs      - Show last 50 lines of guestos serial log"
    echo "11. config-json       - Show /boot/config/config.json"
    echo "12. failed-services   - Show failed services"
    echo "13. clear             - Clear the console"
    echo "14. exit              - Exit console"
    echo ""
}

# Command dispatcher
execute_command() {
    case "$1" in
        "system-status")
            echo "=== System Status ==="
            echo "Hostname: $(hostname)"
            echo "Uptime: $(uptime)"
            echo "Memory: $(free -h | grep Mem)"
            echo "Disk Usage: $(df -h / | tail -1)"
            ;;
        "service-status")
            echo "Enter service name (e.g., guestos, vsock-agent): "
            read service
            sudo systemctl status "$service"
            ;;
        "restart-service")
            echo "Enter service name (e.g., guestos, vsock-agent): "
            read service
            sudo systemctl restart "$service"
            ;;
        "view-logs")
            echo "Enter service name (e.g., guestos, vsock-agent): "
            read service
            sudo journalctl -u "$service" --no-pager -n 50
            ;;
        "network-interfaces")
            echo "=== Network Interfaces ==="
            ip addr show
            ;;
        "network-routing")
            echo "=== Routing Table ==="
            ip route show
            ;;
        "network-dns")
            echo "=== DNS Configuration ==="
            cat /etc/resolv.conf
            ;;
        "network-connectivity")
            echo "=== Network Connectivity Tests ==="
            echo "Testing connectivity to 8.8.8.8..."
            ping -c 3 8.8.8.8 2>/dev/null || echo "Ping to 8.8.8.8 failed"
            echo ""
            echo "Traceroute to 8.8.8.8 (first 10 hops):"
            traceroute -m 10 8.8.8.8 2>/dev/null || echo "Traceroute not available"
            echo ""
            ;;
        "network-settings")
            echo "=== Network Settings from Config ==="
            local network_settings=$(get_config_value '.network_settings' 2>/dev/null)
            if [ -n "$network_settings" ]; then
                echo "$network_settings" | jq . 2>/dev/null || echo "$network_settings"
            else
                echo "No network settings found in config"
            fi
            ;;
        "guestos-logs")
            echo "=== GuestOS Serial Log (Last 50 lines) ==="
            if [ -f "/var/log/libvirt/qemu/guestos-serial.log" ]; then
                tail -n 50 /var/log/libvirt/qemu/guestos-serial.log
            else
                echo "GuestOS serial log not found at /var/log/libvirt/qemu/guestos-serial.log"
            fi
            ;;
        "config-json")
            echo "=== /boot/config/config.json ==="
            cat /boot/config/config.json 
            ;;
        "failed-services")
            echo "=== Failed Services ==="
            echo "Services in failed state:"
            systemctl --failed --no-pager
            echo ""
            echo "Services with errors in the last 24 hours:"
            journalctl --since "24 hours ago" --priority=err --no-pager | head -20
            ;;
        "clear")
            clear
            ;;
        "exit")
            echo "Exiting limited console..."
            exit 0
            ;;
        *)
            echo "Unknown command: $1"
            show_menu
            ;;
    esac
}

# Main loop
echo "Welcome to HostOS Limited Console"
echo "Type 'help' for available commands or 'exit' to quit"
echo ""

while true; do
    echo -n "limited-console> "
    read -r command

    if [ "$command" = "help" ]; then
        show_menu
    else
        execute_command "$command"
    fi
done
