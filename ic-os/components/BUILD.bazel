load("//ic-os/components/conformance_tests:defs.bzl", "check_unused_components_test")
load("boundary-guestos.bzl", boundaryos_component_files = "component_files")
load("guestos.bzl", guestos_component_files = "component_files")
load("hostos.bzl", hostos_component_files = "component_files")
load("setupos.bzl", setupos_component_files = "component_files")

package(default_visibility = ["//ic-os:__subpackages__"])

PUBLIC_GUESTOS_EXPORTS = [
    "ic/generate-ic-config/ic.json5.template",
    "networking/dev-certs/canister_http_test_ca.cert",
    "networking/dev-certs/canister_http_test_ca.key",
    "hostos-scripts/build-bootstrap-config-image.sh",
]

exports_files(PUBLIC_GUESTOS_EXPORTS)

exports_files(
    glob(
        ["**"],
        exclude = PUBLIC_GUESTOS_EXPORTS,
    ),
    visibility = [
        "//ic-os/boundary-guestos:__subpackages__",
        "//ic-os/guestos:__subpackages__",
        "//ic-os/hostos:__subpackages__",
        "//ic-os/setupos:__subpackages__",
    ],
)

genrule(
    name = "commit_timestamp_txt",
    # Depend on //:bazel-timestamp so that the commit timestamp is not cached.
    srcs = ["//:bazel-timestamp"],
    outs = ["commit_timestamp.txt"],
    cmd = select({
        "//bazel:is_release_build": "git show -s --format=%ct > $@",
        # Use a constant in non-release builds to improve caching.
        "//conditions:default": "echo 4000000000 > $@",
    }),
    tags = [
        "local",
    ],
)

used_components = guestos_component_files | hostos_component_files | setupos_component_files | boundaryos_component_files

REPO_COMPONENTS = glob(
    ["**/*"],
    exclude = [
        "**/BUILD.bazel",
        "**/*.bzl",
        "**/*.md",
        "**/*.adoc",
    ],
)

# files used for testing and development that aren't "used" by any ic-os variant
ignored_repo_components = [
    "hostos-scripts/generate-guestos-config/dev-generate-guestos-config.sh",
    "networking/dev-certs/canister_http_test_ca.key",
    "networking/dev-certs/root_cert_gen.sh",
]

check_unused_components_test(
    name = "check_unused_components_test",
    ignored_repo_components = ignored_repo_components,
    repo_components = REPO_COMPONENTS,
    used_components = used_components.keys(),
)

genrule(
    name = "validate-ic-json5-script",
    testonly = True,
    outs = ["validate-ic-json5.sh"],
    cmd = """
    cat <<EOF > $@
#!/bin/bash
set -eux
TEMPFILE=\\$$(mktemp)
# The version of 'json5' available on CI containers does not support
# the '--validate' argument so we have to copy to a temporary file
# and compile in place with the '-c' argument to check validity.
sed <"\\$${1?missing json5 file}" 's/{{[^}]*}}/0/g' >"\\$$TEMPFILE"
echo "Validating: \\$$1"
json5 -c "\\$$TEMPFILE"
rm "\\$$TEMPFILE"
EOF
    """,
    tags = ["manual"],
)

sh_test(
    name = "validate-ic-json5",
    srcs = ["validate-ic-json5-script"],
    args = ["$(execpath ic/generate-ic-config/ic.json5.template)"],
    data = ["ic/generate-ic-config/ic.json5.template"],
    tags = ["manual"],
)
