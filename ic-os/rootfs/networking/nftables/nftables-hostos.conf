table ip filter {
  set rate_limit {
    type ipv4_addr
    size 65535
    flags dynamic
  }

  set connection_limit {
    type ipv4_addr
    size 65535
    flags dynamic
  }

  set local_networks {
    type ipv4_addr
    flags interval
    elements = { 
      10.0.0.0/8, 
      172.16.0.0/12,
      192.168.0.0/16
    }
  }
  
  chain metrics_proxy {
    ct state { new } add @rate_limit { ip saddr limit rate over 100/minute } drop comment "Maximum 100 connections per minute"
    ct state { new } add @connection_limit { ip saddr ct count over 2 } drop comment "No more than 2 connections per source at a time"
    accept
  }

  chain INPUT {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmp type destination-unreachable accept
    icmp type source-quench accept
    icmp type time-exceeded accept
    icmp type parameter-problem accept
    icmp type echo-request accept
    icmp type echo-reply accept
    ip saddr @local_networks ct state { new } tcp dport { 22 } accept
    ip saddr @local_networks ct state { new } udp dport { 67 } accept
    tcp dport { 42372 } goto metrics_proxy
  }

  chain FORWARD {
    type filter hook forward priority filter; policy drop;
  }

  chain OUTPUT {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmp type destination-unreachable accept
    icmp type source-quench accept
    icmp type time-exceeded accept
    icmp type parameter-problem accept
    icmp type echo-request accept
    icmp type echo-reply accept
    ip daddr { 0.0.0.0/0 } ct state { new } tcp dport { 53 } accept
    ip daddr { 0.0.0.0/0 } ct state { new } udp dport { 53 } accept
    ip daddr { 0.0.0.0/0 } ct state { new } udp dport { 123 } accept
    ip daddr { 0.0.0.0/0 } ct state { new } tcp dport { 80, 443 } accept
  }
}

table ip6 filter {
  set rate_limit {
    type ipv6_addr
    size 65535
    flags dynamic
  }

  set connection_limit {
    type ipv6_addr
    size 65535
    flags dynamic
  }

  set dfinity_dcs {
    type ipv6_addr
    flags interval
    elements =  {
      2604:1380:4601:6200::/56,       # AM6 Equinix boundary
      2001:920:401a:1708::/64,        # AN1
      2607:f758:1220::/64,            # AT1
      2604:3fc0:2001::/48,            # AT2
      2604:7e00:30:3::/64,            # AW1
      2001:438:fffd:11c::/64,         # BC1
      2600:c0d:3002:4::/64,           # BO1
      2001:920:401a:1710::/64,        # BR1
      2001:920:401a:1706::/64,        # BR2
      2a04:9dc0:0:108::/64,           # BU1
      2607:f6f0:3004::/48,            # CH1-old
      2602:fb2b:120::/48,             # CH1 InfraDC prefix
      2604:7e00:50::/64,              # CH2
      2607:ff70:3:2::/64,             # CH3
      2604:1380:4641:6100::/56,       # DA11 Equinix boundary
      2600:3000:6100:200::/64,        # DL1
      2604:6800:258:1::/64,           # DM1 InfraDC annex
      2600:3000:1300:1300::/64,       # DN1
      2001:470:1:c76::/64,            # FM1
      2001:4d78:40d::/48,             # FR1-old
      2602:fb2b:110::/48,             # FR1 InfraDC prefix
      2001:4d78:400:10a::/64,         # FR2
      2604:1380:4091:3000::/56,       # FR2 Equinix boundary
      2a0f:cd00:2::/56,               # GE1
      2a00:fa0:3::/48,                # GE2
      2604:b900:4001:76::/64,         # HU1
      2600:2c01:21::/64,              # JV1
      2a02:800:2:2003::/64,           # LJ1
      2a0b:21c0:4003:2::/64,          # LN1
      2a0b:21c0:4006:100::/56,        # LN1-add
      2600:3006:1400:1500::/64,       # LV1
      2a00:fc0:5000:300::/64,         # MB1
      2001:1900:2100:2827::/64,       # MM1
      2a0b:21c0:b002:2::/64,          # MR1
      2a01:138:900a::/48,             # MU1
      2607:f1d0:10:1::/64,            # NY1
      2604:3fc0:3002::/48,            # OR1
      2610:190:6000:1::/64,           # PH1
      2600:3004:1200:1200::/56,       # PL1
      2600:c00:2:100::/64,            # SE1 InfraDC annex
      2602:fb2b:100::/48,             # SF1 InfraDC prefix
      2401:3f00:1000:24::/64,         # SG1
      2604:1380:40e1:4700::/56,       # SG1 Equinix boundary
      2401:3f00:1000:22::/64,         # SG2
      2401:3f00:1000:23::/64,         # SG3
      2600:c02:b002:15::/64,          # SJ1
      2610:190:df01:5::/64,           # ST1
      2604:1380:45e1:a600::/56,       # SV15 Equinix boundary
      2607:f758:c300::/64,            # TP1
      2602:ffe4:801:16::/64,          # TY1
      2602:ffe4:801:17::/64,          # TY2
      2602:ffe4:801:18::/64,          # TY3
      2a00:fb01:400::/55,             # ZH1
      2a00:fb01:400:100::/64,         # ZH2
      2a02:418:3002::/48,             # ZH3
      2a02:41b:300e::/48,             # ZH4
      2a01:2a8:a13d::/48,             # ZH5
      2a01:2a8:a13c::/48,             # ZH6
      2a01:2a8:a13e::/48,             # ZH7
      fd00:2:1:1::/64                 # Private prefix used by [Ref A]
    } # comment "DFINITY operated DC's"

    # [Ref A]
    # ic/testnet/tests/pipeline/pipeline.yml
    # ic.json5.template
    # This is used by the qemu-system instances spawned inside of the docker gitlab-runner to allow multiple deterministic dynamic on-the-fly VM "test" nodes for running automated tests. Each docker namespace has its own IP network stack so many of these can be running in parallel at the same time between different runs and they will not interfere with each other as a result.
    # Why "Ref A"? nftables config syntax disallows newlines and comments between the last line of a set and the closing brace.
    auto-merge     # Prevent "Conflicting Intervals" errors
  }

  set telemetry_clients {
    type ipv6_addr
    flags interval
    elements =  {
      2607:f6f0:3004::/48,            # CH1-old
      2602:fb2b:120::/48,             # CH1 InfraDC prefix
      2001:4d78:40d::/48,             # FR1-old
      2602:fb2b:110::/48,             # FR1 InfraDC prefix
      2602:fb2b:100::/48              # SF1 InfraDC prefix
    } # comment "Telemetry infrastructure"
  }

  set node_providers { # comment "Node provider allowlist. Filled out dynamically."
    type ipv6_addr
    flags interval
  } 

  chain metrics_proxy {
    ct state { new } add @rate_limit { ip6 saddr limit rate over 100/minute } drop comment "Maximum 100 connections per minute"
    # 2 for host node exporter polled twice every minute, 2 for guest node exporter polled twice every minute, 2 for grace like cURL for debugging.
    ct state { new } add @connection_limit { ip6 saddr ct count over 6 } drop comment "No more than 6 connections per source at a time"
    accept
  }

  chain INPUT {
    type filter hook input priority filter; policy drop;
    iif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmpv6 type destination-unreachable accept
    icmpv6 type packet-too-big accept
    icmpv6 type time-exceeded accept
    icmpv6 type parameter-problem accept
    icmpv6 type echo-request accept
    icmpv6 type echo-reply accept
    icmpv6 type nd-router-advert accept
    icmpv6 type nd-neighbor-solicit accept
    icmpv6 type nd-neighbor-advert accept
    ip6 saddr @dfinity_dcs ct state { new } tcp dport { 22, 9100, 19531, 19100 } accept
    ip6 saddr @telemetry_clients ct state { new } tcp dport { 9100, 19531, 19100 } accept
    ip6 saddr @node_providers ct state { new } tcp dport { 22, 9100, 19531 } accept
    tcp dport { 42372 } goto metrics_proxy
  }

  chain FORWARD {
    type filter hook forward priority filter; policy drop;
  }

  chain OUTPUT {
    type filter hook output priority filter; policy drop;
    oif "lo" accept
    ct state { invalid } drop
    ct state { established, related } accept
    icmpv6 type destination-unreachable accept
    icmpv6 type packet-too-big accept
    icmpv6 type time-exceeded accept
    icmpv6 type parameter-problem accept
    icmpv6 type echo-request accept
    icmpv6 type echo-reply accept
    icmpv6 type nd-router-solicit accept
    icmpv6 type nd-neighbor-solicit accept
    icmpv6 type nd-neighbor-advert accept
    ip6 daddr { ::/0 } ct state { new } tcp dport { 53 } accept
    ip6 daddr { ::/0 } ct state { new } udp dport { 53 } accept
    ip6 daddr { ::/0 } ct state { new } udp dport { 123 } accept
    ip6 daddr { ::/0 } ct state { new } tcp dport { 80, 8080, 443 } accept
    # We would ordinarily add a host name in the line following this comment,
    # but nftables starts before the network is up, so there is no DNS name
    # resolution available at the time this file is parsed by nftables.service.
    # The counterpart in ic.json5.template (GuestOS) *does* have a host name,
    # because the replica service which applies the firewall rules does start
    # well after the network is up.
    ip6 daddr { ::/0 } ct state { new } tcp dport { 42372 } accept comment "Permit outbound connections to metrics-proxy instances so local metrics-proxy can fetch data from GuestOS metrics-proxy."
  }
}
