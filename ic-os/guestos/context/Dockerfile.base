# GuestOS - Base Image
#
# Build steps:
# - `docker build -t dfinity/guestos-base:<tag> -f Dockerfile.base .`
# - `docker push/pull dfinity/guestos-base:<tag>`
# - `docker build -t dfinity/guestos-base-dev:<tag> --build-arg PACKAGE_FILES="packages.common packages.dev" -f Dockerfile.base .`
# - `docker push/pull dfinity/guestos-base-dev:<tag>`
#
# NOTE! If you edit this file, you will need to perform the following
# operations to get your changes deployed.
#
# 1. Get your MR approved and merged into master
# 2. On the next hourly master pipeline, click the "deploy-guest-os-baseimg" job
# 3. Note the sha256 and update the sha256 reference in the neighboring Dockerfiles.
#

#
# First build stage:
# - Download 3rd party tools
#
FROM ubuntu:24.04 as download

USER root:root

ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \
    ca-certificates \
    curl \
    perl

# Download and verify node_exporter
RUN cd /tmp/ && \
    curl -L -O https://github.com/prometheus/node_exporter/releases/download/v1.8.1/node_exporter-1.8.1.linux-amd64.tar.gz && \
    echo "fbadb376afa7c883f87f70795700a8a200f7fd45412532cc1938a24d41078011  node_exporter-1.8.1.linux-amd64.tar.gz" > node_exporter.sha256 && \
    sha256sum -c node_exporter.sha256

#
# Second build stage:
# - Download and cache minimal Ubuntu Server 24.04 LTS Docker image
# - Install and cache upstream packages from built-in Ubuntu repositories
# - Copy downloaded archives from first build stage into the target image
#
FROM ubuntu:24.04

USER root:root

ENV SOURCE_DATE_EPOCH=0
ENV TZ=UTC

# For the prod image, just use packages.common to define the packages installed
# on target.
# For the dev image, use both "packages.common" and "packages.dev" -- this can
# be set via docker build args (see above).
ARG PACKAGE_FILES=packages.common
# The kernel is installed here to keep the extra modules in sync.
# Unfortunately, there is no metapackage to track the extra modules that does
# not also include firmware.
ARG _KERNEL_PACKAGE=linux-image-virtual-hwe-24.04
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
COPY packages.* /tmp/
RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y --no-install-recommends install $(for P in ${PACKAGE_FILES}; do cat /tmp/$P | sed -e "s/#.*//" ; done) \
        ${_KERNEL_PACKAGE} \
        linux-modules-extra-$(apt-cache depends ${_KERNEL_PACKAGE} | sed -n -e 's/  Depends: linux-image-\(.*\)-generic/\1/p')-generic && \
    rm /tmp/packages.*

# Install node_exporter
COPY --from=download /tmp/node_exporter-1.8.1.linux-amd64.tar.gz /tmp/node_exporter-1.8.1.linux-amd64.tar.gz
RUN cd /tmp/ && \
    mkdir -p /etc/node_exporter && \
    tar --strip-components=1 -C /usr/local/bin/ -zvxf node_exporter-1.8.1.linux-amd64.tar.gz node_exporter-1.8.1.linux-amd64/node_exporter && \
    rm /tmp/node_exporter-1.8.1.linux-amd64.tar.gz
