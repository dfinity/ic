# There are a lot of third-party tools we download from somewhere and use in CI builds. 
# This Dockerfile is the place to collect all of those.

# Anything placed in the /opt directory will be copied to the corresponding location in the /usr directory.
# If you need to build something from source, this is the place to do it (but you probably don't)

# https://hub.docker.com/_/ubuntu
# focal-20230605
FROM ubuntu@sha256:554e40b15453c788ec799badf0f1ad05c3e5c735b53f940feb8f27cf2ec570c5

RUN apt -y update && \
    DEBIAN_FRONTEND=noninteractive apt -y install curl unzip gpg build-essential cmake git libjemalloc-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev

RUN mkdir -p /opt/bin

ARG protoc_version=26.1
RUN cd $(mktemp -d) && curl -fLO https://github.com/protocolbuffers/protobuf/releases/download/v${protoc_version}/protoc-${protoc_version}-linux-x86_64.zip && unzip * -d /opt/protoc && \
    chmod -R 755 /opt/protoc/bin && chmod -R u+rwX,go+rX,go-w /opt/protoc/include

ARG buildevents_version=0.6.0
RUN curl -fsSL https://github.com/honeycombio/buildevents/releases/download/v${buildevents_version}/buildevents-linux-amd64 -o /opt/bin/buildevents && \
    chmod +x /opt/bin/buildevents

ARG motoko_version=0.9.1
RUN curl -fsSL https://github.com/dfinity/motoko/releases/download/${motoko_version}/motoko-linux64-${motoko_version}.tar.gz | tar -xz -C /usr/local/bin && chmod +x /usr/local/bin/moc

ARG sdk_version=0.12.0
ARG sdk_sha=40da56ad27774d5e1b2cbc35f94c17368be8c8da557aca19878940264bd82a0a
RUN mkdir -p /tmp/sdk && curl -fsSL https://github.com/dfinity/sdk/releases/download/${sdk_version}/dfx-${sdk_version}-x86_64-linux.tar.gz -o /tmp/sdk/dfx.tar.gz && \
    echo "$sdk_sha /tmp/sdk/dfx.tar.gz" | sha256sum --check && \
    tar -zxf /tmp/sdk/dfx.tar.gz -C /opt/bin && \
    chmod +x /opt/bin/dfx

RUN curl -fsSL https://github.com/dfinity/idl2json/releases/download/v0.8.6/idl2json-linux-x86_64.tar.gz -O && \
    tar -xzf idl2json-linux-x86_64.tar.gz -C /opt/bin && chmod +x /opt/bin/idl2json

RUN curl -fsSL https://github.com/dfinity/cdk-rs/releases/download/0.3.6/ic-cdk-optimizer-0.3.6-ubuntu-20.04.tar.gz -O && \
    tar -xzf ic-cdk-optimizer-0.3.6-ubuntu-20.04.tar.gz && mv ic-cdk-optimizer-0.3.6-ubuntu-20.04/ic-cdk-optimizer /opt/bin/ && \
    chmod 0755 /opt/bin/ic-cdk-optimizer

ARG rocksdb_sha=0a9a05ae12943b1529ef1eabbca5ce5a71c986bf
RUN mkdir /tmp/rocksdb && curl -fsSL https://github.com/facebook/rocksdb/archive/${rocksdb_sha}.tar.gz | tar -xz -C /tmp/rocksdb --strip-components 1
WORKDIR /tmp/rocksdb

ARG bazelisk_sha=d28b588ac0916abd6bf02defb5433f6eddf7cba35ffa808eabb65a44aab226f7
RUN curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64 -o /opt/bin/bazel && \
    echo "$bazelisk_sha /opt/bin/bazel" | sha256sum --check && \
    chmod 777 /opt/bin/bazel

RUN cmake . -DPORTABLE=1 \
    -DWITH_JEMALLOC=1 \
    -DWITH_JNI=0 \
    -DWITH_BENCHMARK_TOOLS=0 \
    -DWITH_TESTS=1 \
    -DWITH_TOOLS=0 \
    -DWITH_BZ2=1 \
    -DWITH_LZ4=1 \
    -DWITH_SNAPPY=1 \
    -DWITH_ZLIB=1 \
    -DWITH_ZSTD=1 \
    -DWITH_GFLAGS=0 \
    -DUSE_RTTI=1 \
    -DFORCE_SSE42=1 \
    -DFAIL_ON_WARNINGS=YES \
    -DROCKSDB_BUILD_SHARED=0 \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/opt
RUN make install -j$(nproc)

WORKDIR /
