load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_doc_test", "rust_library")
load("//bazel:defs.bzl", "rust_ic_bench", "rust_ic_test", "rust_ic_test_suite")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    # Keep sorted.
    "//rs/canister_sandbox:backend_lib",
    "//rs/config",
    "//rs/constants",
    "//rs/crypto/prng",
    "//rs/crypto/sha2",
    "//rs/crypto/tecdsa",
    "//rs/crypto/tree_hash",
    "//rs/cycles_account_manager",
    "//rs/embedders",
    "//rs/interfaces",
    "//rs/interfaces/state_manager",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/nns/constants",
    "//rs/phantom_newtype",
    "//rs/query_stats",
    "//rs/registry/provisional_whitelist",
    "//rs/registry/routing_table",
    "//rs/registry/subnet_features",
    "//rs/registry/subnet_type",
    "//rs/replicated_state",
    "//rs/state_layout",
    "//rs/sys",
    "//rs/system_api",
    "//rs/types/base_types",
    "//rs/types/error_types",
    "//rs/types/management_canister_types",
    "//rs/types/types",
    "//rs/types/wasm_types",
    "//rs/utils",
    "//rs/utils/lru_cache",
    "@crate_index//:candid",
    "@crate_index//:hex",
    "@crate_index//:ic-btc-interface",
    "@crate_index//:lazy_static",
    "@crate_index//:num-rational",
    "@crate_index//:num-traits",
    "@crate_index//:prometheus",
    "@crate_index//:rand",
    "@crate_index//:scoped_threadpool",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
    "@crate_index//:serde_cbor",
    "@crate_index//:slog",
    "@crate_index//:strum",
    "@crate_index//:threadpool",
    "@crate_index//:tokio",
    "@crate_index//:tower",
]

MACRO_DEPENDENCIES = []

DEV_DEPENDENCIES = [
    # Keep sorted.
    "//rs/interfaces/state_manager/mocks",
    "//rs/state_machine_tests",
    "//rs/test_utilities",
    "//rs/test_utilities/execution_environment",
    "//rs/test_utilities/logger",
    "//rs/test_utilities/metrics",
    "//rs/test_utilities/state",
    "//rs/test_utilities/time",
    "//rs/test_utilities/types",
    "//rs/types/types_test_utils",
    "//rs/universal_canister/lib",
    "@crate_index//:assert_matches",
    "@crate_index//:criterion",
    "@crate_index//:ic-btc-test-utils",
    "@crate_index//:insta",
    "@crate_index//:libflate",
    "@crate_index//:maplit",
    "@crate_index//:more-asserts",
    "@crate_index//:proptest",
    "@crate_index//:tempfile",
    "@crate_index//:wasmparser",
    "@crate_index//:wat",
]

MACRO_DEV_DEPENDENCIES = [
    "@crate_index//:test-strategy",
]

ALIASES = {}

DATA = []

ENV = {}

rust_library(
    name = "execution_environment",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    compile_data = glob(["tests/test-data/**"]),
    crate_name = "ic_execution_environment",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = DEPENDENCIES,
)

rust_ic_test(
    name = "execution_environment_test",
    timeout = "long",
    aliases = ALIASES,
    crate = ":execution_environment",
    data = DATA,
    env = ENV,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    tags = [
        "test_macos",
    ],
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_ic_test_suite(
    name = "execution_environment_misc_integration",
    size = "large",
    srcs = glob(["tests/*.rs"]),
    aliases = ALIASES,
    data = DATA,
    env = ENV,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    tags = [
        "test_macos",
    ],
    deps = [":execution_environment"] + DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_doc_test(
    name = "execution_environment_doc_test",
    crate = ":execution_environment",
    tags = [
        "test_macos",
    ],
)

BENCH_DEPENDENCIES = [
    ":execution_environment",
    "//rs/config",
    "//rs/constants",
    "//rs/cycles_account_manager",
    "//rs/interfaces",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/nns/constants",
    "//rs/registry/subnet_type",
    "//rs/replicated_state",
    "//rs/system_api",
    "//rs/test_utilities",
    "//rs/test_utilities/execution_environment",
    "//rs/test_utilities/state",
    "//rs/test_utilities/time",
    "//rs/test_utilities/types",
    "//rs/types/error_types",
    "//rs/types/types",
    "//rs/types/wasm_types",
    "@crate_index//:criterion",
    "@crate_index//:lazy_static",
    "@crate_index//:tempfile",
    "@crate_index//:wat",
]

rust_library(
    name = "execution_environment_bench",
    testonly = True,
    srcs = glob(["benches/lib/src/*.rs"]),
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = BENCH_DEPENDENCIES,
)

rust_ic_bench(
    name = "execute_inspect_message_bench",
    srcs = ["benches/system_api/execute_inspect_message.rs"],
    data = DATA,
    env = ENV,
    deps = [":execution_environment_bench"] + BENCH_DEPENDENCIES,
)

rust_ic_bench(
    name = "execute_query_bench",
    srcs = ["benches/system_api/execute_query.rs"],
    data = DATA,
    env = ENV,
    deps = [":execution_environment_bench"] + BENCH_DEPENDENCIES,
)

rust_ic_bench(
    name = "execute_update_bench",
    srcs = ["benches/system_api/execute_update.rs"],
    data = DATA,
    env = ENV,
    deps = [":execution_environment_bench"] + BENCH_DEPENDENCIES,
)

rust_ic_bench(
    name = "wasm_instructions_bench",
    srcs = glob(["benches/wasm_instructions/*.rs"]),
    data = DATA,
    env = ENV,
    deps = [":execution_environment_bench"] + BENCH_DEPENDENCIES,
)

rust_ic_bench(
    name = "scheduler_bench",
    srcs = ["benches/scheduler.rs"],
    data = DATA,
    env = ENV,
    deps = [
        ":execution_environment_bench",
        "//rs/state_machine_tests",
        "//rs/types/base_types",
        "//rs/types/types_test_utils",
    ] + BENCH_DEPENDENCIES,
)

rust_ic_bench(
    name = "100k_canisters_bench",
    srcs = ["benches/100k_canisters.rs"],
    data = DATA + ["//rs/rust_canisters/canister_creator:canister_creator_canister"],
    env = dict(ENV.items() + [
        ("CANISTER_CREATOR_CANISTER_WASM_PATH", "$(rootpath //rs/rust_canisters/canister_creator:canister_creator_canister)"),
    ]),
    deps = [
        ":execution_environment_bench",
        "//rs/rust_canisters/canister_test",
        "//rs/state_machine_tests",
        "//rs/types/base_types",
        "//rs/types/types_test_utils",
    ] + BENCH_DEPENDENCIES,
)

rust_library(
    name = "utils",
    testonly = True,
    srcs = ["benches/management_canister/utils.rs"],
    aliases = ALIASES,
    deps = [
        ":execution_environment_bench",
        "//rs/rust_canisters/canister_test",
        "//rs/state_machine_tests",
        "@crate_index//:candid",
        "@crate_index//:serde",
    ] + BENCH_DEPENDENCIES,
)

rust_ic_bench(
    name = "management_canister_bench",
    srcs = glob(["benches/management_canister/*.rs"]),
    data = DATA + ["//rs/execution_environment/benches/management_canister/test_canister"],
    env = dict(ENV.items() + [
        ("TEST_CANISTER_WASM_PATH", "$(rootpath //rs/execution_environment/benches/management_canister/test_canister)"),
    ]),
    deps = [
        ":execution_environment_bench",
        ":utils",
        "//rs/rust_canisters/canister_test",
        "//rs/state_machine_tests",
        "@crate_index//:candid",
        "@crate_index//:serde",
    ] + BENCH_DEPENDENCIES,
)

rust_binary(
    name = "fees_and_limits",
    srcs = ["tools/src/fees_and_limits.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    deps = [
        "//rs/config",
        "//rs/embedders",
        "//rs/replicated_state",
        "//rs/system_api",
        "//rs/types/types",
        "@crate_index//:candid",
        "@crate_index//:clap_3_2_25",
        "@crate_index//:eyre",
        "@crate_index//:ic-agent",
        "@crate_index//:serde_json",
        "@crate_index//:tokio",
    ],
)
