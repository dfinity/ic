load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library")
load(
    "//rs/tests:common.bzl",
    "IC_GATEWAY_RUNTIME_DEPS",
    "IMPERSONATE_UPSTREAMS_ENV",
    "IMPERSONATE_UPSTREAMS_RUNTIME_DEPS",
    "MAINNET_ENV",
    "MESSAGE_CANISTER_ENV",
    "MESSAGE_CANISTER_RUNTIME_DEPS",
)
load("//rs/tests:system_tests.bzl", "system_test_nns")

package(default_visibility = ["//rs:system-tests-pkg"])

DEPENDENCIES = [
    # Keep sorted.
    "//rs/canister_client",
    "//rs/nervous_system/common/test_keys",
    "//rs/nns/common",
    "//rs/nns/test_utils",
    "//rs/protobuf",
    "//rs/recovery",
    "//rs/registry/keys",
    "//rs/registry/nns_data_provider",
    "//rs/registry/subnet_type",
    "//rs/rust_canisters/canister_test",
    "//rs/tests/consensus/utils",
    "//rs/tests/driver:ic-system-test-driver",
    "//rs/types/types",
    "@crate_index//:anyhow",
    "@crate_index//:futures",
    "@crate_index//:prost",
    "@crate_index//:rand",
    "@crate_index//:regex",
    "@crate_index//:reqwest",
    "@crate_index//:sha2",
    "@crate_index//:slog",
    "@crate_index//:url",
]

RUNNER_DEPENDENCIES = [
    # Keep sorted.
    "nested",
    "//rs/tests/driver:ic-system-test-driver",
    "@crate_index//:anyhow",
]

rust_library(
    name = "nested",
    testonly = True,
    srcs = glob(["src/**/*.rs"]),
    crate_name = "nested",
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES,
)

genrule(
    name = "empty-disk-img-tar-zst",
    outs = ["empty-disk-img.tar.zst"],
    cmd = """
        truncate -s 101G disk.img
        tar --zstd -Scf $@ disk.img
    """,
    tags = ["manual"],
    target_compatible_with = ["@platforms//os:linux"],
    visibility = ["//visibility:public"],
)

system_test_nns(
    name = "registration",
    env = MAINNET_ENV,
    flaky = True,  # flakiness rate of over 2% over the month from 2025-02-11 till 2025-03-11.
    tags = ["long_test"],  # since it takes longer than 5 minutes.
    test_timeout = "eternal",
    uses_setupos_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS,
    deps = RUNNER_DEPENDENCIES,
)

rust_binary(
    name = "guestos_upgrade_test_bin",
    testonly = True,
    srcs = ["guestos_upgrade.rs"],
    deps = DEPENDENCIES + [":nested"],
)

# Tests if current commit is "upgradeable" and can be used as an upgrade image
system_test_nns(
    name = "guestos_upgrade_smoke_test",
    env = MAINNET_ENV,
    flaky = True,
    tags = ["long_test"],
    test_driver_target = ":guestos_upgrade_test_bin",
    test_timeout = "eternal",
    uses_guestos_test_update = True,
    uses_setupos_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS,
    deps = RUNNER_DEPENDENCIES,
)

# Tests if "latest_release" in mainnet-icos-revisions.json can successfully guestos upgrade to current commit
system_test_nns(
    name = "guestos_upgrade_from_latest_release_to_current",
    env = MAINNET_ENV | {
        "NODE_OPERATOR_PRIV_KEY_PATH": "$(rootpath //ic-os/setupos:config/node_operator_private_key.pem)",
    },
    flaky = True,
    tags = ["long_test"],
    test_driver_target = ":guestos_upgrade_test_bin",
    test_timeout = "eternal",
    uses_guestos_img = False,
    uses_guestos_latest_release_mainnet_img = True,
    uses_guestos_update = True,
    uses_setupos_latest_release_mainnet_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS + ["//ic-os/setupos:config/node_operator_private_key.pem"],
    deps = RUNNER_DEPENDENCIES,
)

rust_binary(
    name = "hostos_upgrade_test_bin",
    testonly = True,
    srcs = ["hostos_upgrade.rs"],
    deps = DEPENDENCIES + [":nested"],
)

# Tests if current commit is "upgradeable" and can be used as an upgrade image
system_test_nns(
    name = "hostos_upgrade_smoke_test",
    env = MAINNET_ENV,
    flaky = True,
    tags = ["long_test"],
    test_driver_target = ":hostos_upgrade_test_bin",
    test_timeout = "eternal",
    uses_hostos_test_update = True,
    uses_setupos_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS,
    deps = RUNNER_DEPENDENCIES,
)

# Tests if "latest_release" in mainnet-icos-revisions.json can successfully hostos upgrade to current commit
system_test_nns(
    name = "hostos_upgrade_from_latest_release_to_current",
    env = MAINNET_ENV | {
        "NODE_OPERATOR_PRIV_KEY_PATH": "$(rootpath //ic-os/setupos:config/node_operator_private_key.pem)",
    },
    flaky = True,  # flakiness rate of 5% over the month from 2025-02-11 till 2025-03-11.
    tags = ["long_test"],
    test_driver_target = ":hostos_upgrade_test_bin",
    test_timeout = "eternal",
    uses_guestos_img = False,
    uses_guestos_latest_release_mainnet_img = True,
    uses_hostos_update = True,
    uses_setupos_latest_release_mainnet_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS + ["//ic-os/setupos:config/node_operator_private_key.pem"],
    deps = RUNNER_DEPENDENCIES,
)

# Used to manually test if can upgrade
# *from* an arbitrary mainnet version (mainnet_setupos_disk_image target)
# *to* an arbitrary mainnet version ("latest_release" in mainnet-icos-revisions.json)
system_test_nns(
    name = "hostos_upgrade_from_mainnet_to_mainnet",
    env = MAINNET_ENV | {
        "NODE_OPERATOR_PRIV_KEY_PATH": "$(rootpath //ic-os/setupos:config/node_operator_private_key.pem)",
    },
    flaky = True,
    tags = ["manual"],
    test_driver_target = ":hostos_upgrade_test_bin",
    test_timeout = "eternal",
    uses_guestos_img = False,
    uses_guestos_latest_release_mainnet_img = True,
    uses_hostos_latest_release_mainnet_update = True,
    uses_setupos_latest_release_mainnet_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS + ["//ic-os/setupos:config/node_operator_private_key.pem"],
    deps = RUNNER_DEPENDENCIES,
)

# Tests the recovery-upgrader component by upgrading the GuestOS to the mainnet update image
# Uses the mainnet update image, as this image is hosted at https://download.dfinity.systems/
system_test_nns(
    name = "recovery_upgrader_test",
    env = MAINNET_ENV,
    flaky = True,
    tags = ["long_test"],
    test_timeout = "eternal",
    uses_guestos_nns_mainnet_update = True,
    uses_setupos_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS,
    deps = RUNNER_DEPENDENCIES,
)

# WORK IN PROGRESS: End-to-end test of the manual NNS recovery process:
# - NNS subnet is broken
# - guestos-recovery-upgrader is used to upgrade the GuestOS to the recovery image
# - guestos-recovery-engine is used to recover the NNS subnet
system_test_nns(
    name = "nns_recovery_test",
    env = MAINNET_ENV | IMPERSONATE_UPSTREAMS_ENV | MESSAGE_CANISTER_ENV | {
        "RECOVERY_GUESTOS_IMG_PATH": "$(rootpath //ic-os/guestos/envs/recovery-dev:update-img.tar.zst)",
    },
    flaky = True,
    tags = ["long_test"],
    test_timeout = "eternal",
    uses_guestos_test_update = True,
    uses_setupos_img = True,
    runtime_deps = IC_GATEWAY_RUNTIME_DEPS + IMPERSONATE_UPSTREAMS_RUNTIME_DEPS + MESSAGE_CANISTER_RUNTIME_DEPS + [
        "//ic-os/guestos/envs/recovery-dev:update-img.tar.zst",
        "//rs/tests:recovery/binaries",
    ],
    deps = RUNNER_DEPENDENCIES + [
        # Keep sorted.
        "//rs/tests/consensus/utils",
    ],
)
