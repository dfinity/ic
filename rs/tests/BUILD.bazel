load("@aspect_bazel_lib//lib:tar.bzl", "tar")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@bazel_skylib//rules:run_binary.bzl", "run_binary")
load("@rules_distroless//apt:defs.bzl", "dpkg_status")
load("@rules_distroless//distroless:defs.bzl", "passwd")
load("@rules_oci//oci:defs.bzl", "oci_image")
load("@rules_rust//rust:defs.bzl", "rust_library")
load("//bazel:defs.bzl", "symlink_dir", "symlink_dir_test")
load("//rs/tests:common.bzl", "DEPENDENCIES", "MACRO_DEPENDENCIES")
load(":system_tests.bzl", "oci_tar", "uvm_config_image")

package(default_visibility = ["//rs:system-tests-pkg"])

exports_files([
    "counter.wat",
])

bool_flag(
    name = "k8s",
    build_setting_default = False,
)

rust_library(
    name = "tests",
    testonly = True,
    srcs = glob(["src/**/*.rs"]),
    compile_data = [
        "//ic-os/components:ic/generate-ic-config/ic.json5.template",
        "src/ledger_tests/transaction_ledger_correctness.wasm",
    ],
    crate_name = "ic_tests",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES,
)

# Packages we install into the image; see base image definition and its
# 'manifest = ...' field for more information
PACKAGES = [
    "@focal//ca-certificates/amd64",
    "@focal//bash/amd64",
    "@focal//coreutils/amd64",
    "@focal//gawk/amd64",
    "@focal//dosfstools/amd64",
    "@focal//libssl1.1/amd64",
    "@focal//libunwind8/amd64",
    "@focal//mtools/amd64",
    "@focal//openssh-client/amd64",
    "@focal//rsync/amd64",
    "@focal//gzip/amd64",
    "@focal//zstd/amd64",
]

tar(
    name = "sh",
    mtree = [
        # needed as dpkg assumes sh is installed in a typical debian installation.
        "./bin/sh type=link link=/bin/bash",
    ],
)

tar(
    name = "mkfsvfat",
    mtree = [
        # symlink instead of updating the PATH
        "./bin/mkfs.vfat type=link link=/sbin/mkfs.vfat",
    ],
)

tar(
    name = "awk",
    mtree = [
        # we install the GNU variant but call 'awk' so we symlink
        "./bin/awk type=link link=/usr/bin/gawk",
    ],
)

# Creates /var/lib/dpkg/status with installed package information.
dpkg_status(
    name = "dpkg_status",
    controls = [
        "%s:control" % package
        for package in PACKAGES
    ],
)

passwd(
    name = "passwd",
    entries = [
        dict(
            gecos = ["root"],
            gid = 0,
            home = "/root",
            shell = "/usr/bin/bash",
            uid = 0,
            username = "root",
        ),
    ],
)

oci_image(
    name = "ubuntu_test_runtime_image_src",
    architecture = "amd64",
    os = "linux",
    target_compatible_with = [
        "@platforms//os:linux",
    ],
    tars = [
        ":dpkg_status",
        ":passwd",  # needed because we ssh in

        # symlinks
        ":awk",
        ":mkfsvfat",
        ":sh",
    ] + PACKAGES,
)

oci_tar(
    name = "ubuntu_test_runtime.tar",
    image = ":ubuntu_test_runtime_image_src",
    repo_tags = ["ubuntu_test_runtime:image"],
)

uvm_config_image(
    name = "colocate_uvm_config_image",
    srcs = [
        ":ubuntu_test_runtime.tar",
        "//rs/tests:activate-systest-uvm-config",
    ],
    remap_paths = {
        "activate-systest-uvm-config": "activate",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)

# Packages we install into the image; see base image definition and its
# 'manifest = ...' field for more information
PACKAGES_NOBLE = [
    "@noble//bash/amd64",
    "@noble//ca-certificates/amd64",
    "@noble//coreutils/amd64",
    "@noble//dosfstools/amd64",
    "@noble//gawk/amd64",
    "@noble//gzip/amd64",
    "@noble//libssl3t64/amd64",
    "@noble//libunwind8/amd64",
    "@noble//mtools/amd64",
    "@noble//openssh-client/amd64",
    "@noble//rsync/amd64",
    "@noble//tar/amd64",
    "@noble//zstd/amd64",
]

tar(
    name = "sh_noble",
    mtree = [
        # needed as dpkg assumes sh is installed in a typical debian installation.
        "./usr/bin/sh type=link link=/bin/bash",
    ],
)

tar(
    name = "mkfsvfat_noble",
    mtree = [
        # symlink instead of updating the PATH
        "./usr/bin/mkfs.vfat type=link link=/sbin/mkfs.vfat",
    ],
)

tar(
    name = "awk_noble",
    mtree = [
        # we install the GNU variant but call 'awk' so we symlink
        "./usr/bin/awk type=link link=/usr/bin/gawk",
    ],
)

# Creates /var/lib/dpkg/status with installed package information.
dpkg_status(
    name = "dpkg_status_noble",
    controls = [
        "%s:control" % package
        for package in PACKAGES_NOBLE
    ],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

passwd(
    name = "passwd_noble",
    entries = [
        dict(
            gecos = ["root"],
            gid = 0,
            home = "/root",
            shell = "/usr/bin/bash",
            uid = 0,
            username = "root",
        ),
    ],
)

oci_image(
    name = "ubuntu_noble_test_runtime_image_src",
    architecture = "amd64",
    os = "linux",
    target_compatible_with = [
        "@platforms//os:linux",
    ],
    tars = [
        ":dpkg_status_noble",
        ":passwd_noble",  # needed because we ssh in

        # symlinks
        ":awk_noble",
        ":mkfsvfat_noble",
        ":sh_noble",
    ] + PACKAGES_NOBLE,
)

oci_tar(
    name = "ubuntu_noble_test_runtime.tar",
    image = ":ubuntu_noble_test_runtime_image_src",
    repo_tags = ["ubuntu_noble_test_runtime:image"],
)

uvm_config_image(
    name = "colocate_uvm_noble_config_image",
    srcs = [
        ":ubuntu_noble_test_runtime.tar",
        "//rs/tests:activate-systest-uvm-config",
    ],
    remap_paths = {
        "activate-systest-uvm-config": "activate",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)

exports_files([
    "create-universal-vm-config-image.sh",
])

filegroup(
    name = "grafana_dashboards",
    srcs = glob(["dashboards/**/*"]),
)

symlink_dir(
    name = "recovery/binaries",
    testonly = True,
    targets = {
        "//rs/registry/admin:ic-admin": "ic-admin",
        "//rs/state_tool:state-tool": "state-tool",
        "//rs/canister_sandbox:compiler_sandbox": "compiler_sandbox",
        "//rs/canister_sandbox:sandbox_launcher": "sandbox_launcher",
        "//rs/canister_sandbox:canister_sandbox": "canister_sandbox",
        "@crate_index//:ic-wasm__ic-wasm": "ic-wasm",
    },
)

symlink_dir(
    name = "backup/binaries",
    testonly = True,
    targets = {
        "//rs/backup:ic-backup": "ic-backup",
        "//rs/replay:ic-replay": "ic-replay",
        "//rs/canister_sandbox:compiler_sandbox": "compiler_sandbox",
        "//rs/canister_sandbox:sandbox_launcher": "sandbox_launcher",
        "//rs/canister_sandbox:canister_sandbox": "canister_sandbox",
    },
)

symlink_dir_test(
    name = "cup_compatibility/binaries",
    targets = {
        "//rs/types/types:types_test": "types_test",
    },
)

oci_tar(
    name = "static-file-server.tar",
    image = "@static-file-server",
    repo_tags = ["static-file-server:image"],
)

exports_files([
    "jaeger_activate.sh",
])

uvm_config_image(
    name = "jaeger_uvm_config_image",
    srcs = [
        ":jaeger.tar",
        ":jaeger_activate.sh",
    ],
    remap_paths = {
        "jaeger_activate.sh": "activate",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)

filegroup(
    name = "rosetta_workspace",
    srcs = glob(["rosetta_workspace/*"]),
)

exports_files([
    "src/canister_http/universal_vm_activation.sh",
])

run_binary(
    name = "wabt-tests",
    outs = [
        "custom_section_name_with_spaces.wasm",
        "duplicate_custom_section.wasm",
        "empty_custom_section_name.wasm",
        "empty_query_name.wasm",
        "invalid_canister_composite_query_cq_reta.wasm",
        "invalid_canister_composite_query_cq_retb.wasm",
        "invalid_canister_export.wasm",
        "invalid_canister_global_timer_reta.wasm",
        "invalid_canister_global_timer_retb.wasm",
        "invalid_canister_heartbeat_reta.wasm",
        "invalid_canister_heartbeat_retb.wasm",
        "invalid_canister_init_reta.wasm",
        "invalid_canister_init_retb.wasm",
        "invalid_canister_inspect_message_reta.wasm",
        "invalid_canister_inspect_message_retb.wasm",
        "invalid_canister_post_upgrade_reta.wasm",
        "invalid_canister_post_upgrade_retb.wasm",
        "invalid_canister_pre_upgrade_reta.wasm",
        "invalid_canister_pre_upgrade_retb.wasm",
        "invalid_canister_query_que_reta.wasm",
        "invalid_canister_query_que_retb.wasm",
        "invalid_canister_update_upd_reta.wasm",
        "invalid_canister_update_upd_retb.wasm",
        "invalid_custom_section.wasm",
        "invalid_empty_custom_section_name.wasm",
        "invalid_empty_query_name.wasm",
        "invalid_import.wasm",
        "large_custom_sections.wasm",
        "long_exported_function_names.wasm",
        "many_custom_sections.wasm",
        "many_exports.wasm",
        "many_functions.wasm",
        "many_globals.wasm",
        "name_clash_query_composite_query.wasm",
        "name_clash_update_composite_query.wasm",
        "name_clash_update_query.wasm",
        "no_start.wasm",
        "query_name_with_spaces.wasm",
        "start.wasm",
        "too_large_custom_sections.wasm",
        "too_long_exported_function_names.wasm",
        "too_many_custom_sections.wasm",
        "too_many_exports.wasm",
        "too_many_functions.wasm",
        "too_many_globals.wasm",
        "valid_import.wasm",
    ],
    args = ["$(location valid_import.wasm)"],  # passing location of an arbitrary output file is a hack, see https://github.com/bazelbuild/bazel-skylib/blob/288731ef9f7f688932bd50e704a91a45ec185f9b/rules/run_binary.bzl#L29
    target_compatible_with = ["@platforms//os:linux"],
    tool = "//rs/tests/testing_verification/wabt-tests:generator",
)

oci_tar(
    name = "jaeger.tar",
    image = "@jaeger",
    repo_tags = ["jaegertracing/all-in-one:1.58"],
)

oci_tar(
    name = "minica.tar",
    image = "@minica",
    repo_tags = ["minica:image"],
)

oci_tar(
    name = "bitcoind.tar",
    image = "@bitcoind",
    repo_tags = ["bitcoind:image"],
)

oci_tar(
    name = "nginx-proxy.tar",
    image = "@nginx-proxy",
    repo_tags = ["nginx-proxy:image"],
)

uvm_config_image(
    name = "ckbtc_uvm_config_image",
    srcs = [
        ":bitcoind.tar",
        ":minica.tar",
        ":nginx-proxy.tar",
        "//ic-os/components:networking/dev-certs/canister_http_test_ca.cert",
        "//ic-os/components:networking/dev-certs/canister_http_test_ca.key",
        "//rs/tests/httpbin-rs:httpbin.tar",
    ],
    remap_paths = {
        "canister_http_test_ca.cert": "cert.pem",
        "canister_http_test_ca.key": "key.pem",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)
