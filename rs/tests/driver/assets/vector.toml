[transforms.to_json]
type = "remap"
inputs = [ "*-transform" ]
source = """
message_parsed = parse_json!(del(.message))
preserved_fields = {}

for_each(["address", "ic_node", "job", "ic_subnet", "is_api_bn", "is_malicious", "ic"]) -> |_, k| {
  v = get!(., [k])
  if v != null {
    preserved_fields = set!(preserved_fields, [k], v)
  }
}

preserved_fields_message = {}
for_each(["__CURSOR", "_HOSTNAME", "MESSAGE", "__REALTIME_TIMESTAMP", "_EXE"]) -> |_, k| {
  v = get!(message_parsed, [k])
  if v != null {
    preserved_fields_message = set!(preserved_fields_message, [k], v)
  }
}

. = merge(preserved_fields, preserved_fields_message)

if .MESSAGE == null {
  .MESSAGE = "Message was empty in the log-fetcher. Ask DRE-team for closer look."
}

if is_json(string!(.MESSAGE)) {
  parsed_message = parse_json!(string!(.MESSAGE))
  v = get!(parsed_message, ["log_entry"])
  if v != null {
    # These will be related to regular nodes
    .MESSAGE = v.message
    .PRIORITY = v.level
    .utc_time = v.utc_time
    .crate_ = v.crate_
    .module = v.module
  } else {
    # These will be related to api boundary nodes
    . = merge!(., parsed_message)
    v = get!(., ["message"])
    if v != null {
        .MESSAGE = .message
    } else {
        .MESSAGE = "Log contained no message field"
    }
  }
}

.timestamp = from_unix_timestamp!(to_int!(del(.__REALTIME_TIMESTAMP)) * 1000, unit: "nanoseconds")
"""

[transforms.filter_spam]
type = "filter"
inputs = [ "to_json" ]
condition = """
exe = get!(., ["_EXE"])
if exe == null {
    return true
}

allow = true
# Filter noisy logs, still present in `debug.log`
for_each([]) -> |_, k| {
    if exe == k {
        allow = false
    }
}

return allow
"""

# The templated values will be passed in as parameters
[sinks.elastic]
type = "elasticsearch"
inputs = ["filter_spam"]
endpoints = ["${ELASTICSEARCH_URL}"]
mode = "bulk"
compression = "gzip"
id_key = "__CURSOR"

  [sinks.elastic.bulk]
  index = "${ELASTICSEARCH_INDEX}-%Y-%m-%d"

  [sinks.elastic.buffer]
  type = "disk"
  max_size = 268435488 # 256 MB least we can have
  when_full = "block"

# Colleting all the logs for debugging
[sinks.local_file]
type = "file"
inputs = [ "*-transform" ]
path = "/etc/vector/config/debug.log"
     [sinks.local_file.encoding]
     codec = "json"

