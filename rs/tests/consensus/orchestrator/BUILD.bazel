load("//rs/tests:common.bzl", "DEPENDENCIES", "GUESTOS_RUNTIME_DEPS", "MACRO_DEPENDENCIES", "MAINNET_REVISION_RUNTIME_DEPS", "UNIVERSAL_VM_RUNTIME_DEPS")
load("//rs/tests:system_tests.bzl", "system_test", "system_test_nns")

package(default_visibility = ["//rs:system-tests-pkg"])

SUBNET_RECOVERY_RUNTIME_DEPS = [
    # Keep sorted.
    "//rs/tests:recovery/binaries",
]

ORCHESTRATOR_UNIVERSAL_VM_ACTIVATION = ["//rs/tests:src/orchestrator/orchestrator_universal_vm_activation.sh"]

STATIC_FILE_SERVER_IMAGE_RUNTIME_DEPS = [
    # Keep sorted.
    "//rs/tests:static-file-server_image",
]

system_test_nns(
    name = "node_assign_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/nns/constants",
        "//rs/nns/governance/api",
        "//rs/registry/canister",
        "//rs/registry/subnet_type",
        "//rs/rust_canisters/canister_test",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/base_types",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
        "@crate_index//:tokio",
    ],
)

system_test_nns(
    name = "node_reassignment_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/registry/subnet_features",
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
    ],
)

system_test_nns(
    name = "node_registration_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/nns/constants",
        "//rs/nns/governance/api",
        "//rs/registry/canister",
        "//rs/registry/subnet_type",
        "//rs/rust_canisters/canister_test",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/base_types",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
    ],
)

system_test(
    name = "cup_compatibility_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = MAINNET_REVISION_RUNTIME_DEPS + [
        "//rs/tests:cup_compatibility/binaries",
    ],
    deps = [
        # Keep sorted.
        "//rs/recovery",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
        "@crate_index//:tempfile",
    ],
)

system_test_nns(
    name = "sr_app_same_nodes_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_same_nodes_enable_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_same_nodes_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_failover_nodes_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_failover_nodes_enable_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_failover_nodes_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_no_upgrade_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_no_upgrade_enable_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_no_upgrade_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_app_large_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_nns_same_nodes_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "sr_nns_failover_nodes_test",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        SUBNET_RECOVERY_RUNTIME_DEPS + ORCHESTRATOR_UNIVERSAL_VM_ACTIVATION + STATIC_FILE_SERVER_IMAGE_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/recovery",
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/tests/networking/canister_http",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:ic-agent",
        "@crate_index//:slog",
        "@crate_index//:url",
    ],
)

system_test_nns(
    name = "ssh_access_to_nodes_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/nns/common",
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
    ],
)

system_test_nns(
    name = "unstuck_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS,
    deps = [
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
        "@crate_index//:ssh2",
    ],
)

system_test_nns(
    name = "upgrade_downgrade_app_subnet_test",
    colocated_test_driver_vm_resources = {
        "vcpus": 24,
    },
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    uses_guestos_dev_test = True,
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        MAINNET_REVISION_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "upgrade_downgrade_nns_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    uses_guestos_dev_test = True,
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        MAINNET_REVISION_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "upgrade_app_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        MAINNET_REVISION_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "downgrade_app_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        MAINNET_REVISION_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "upgrade_with_alternative_urls",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test_nns(
    name = "unassigned_node_upgrade_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/canister_client",
        "//rs/nervous_system/common/test_keys",
        "//rs/nns/common",
        "//rs/registry/nns_data_provider",
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
    ],
)

system_test_nns(
    name = "rotate_ecdsa_idkg_key_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS,
    deps = [
        "//rs/interfaces/registry",
        "//rs/protobuf",
        "//rs/registry/keys",
        "//rs/registry/nns_data_provider",
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/tecdsa/utils",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/base_types",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
    ],
)
