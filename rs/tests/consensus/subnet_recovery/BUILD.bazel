load("@rules_rust//rust:defs.bzl", "rust_library")
load("//rs/tests:common.bzl", "GUESTOS_RUNTIME_DEPS", "MACRO_DEPENDENCIES", "UNIVERSAL_VM_RUNTIME_DEPS")
load("//rs/tests:system_tests.bzl", "system_test_nns")

package(default_visibility = ["//rs:system-tests-pkg"])

SUBNET_RECOVERY_RUNTIME_DEPS = [
    # Keep sorted.
    "//rs/tests:recovery/binaries",
]

ORCHESTRATOR_UNIVERSAL_VM_ACTIVATION = [":orchestrator_universal_vm_activation.sh"]

STATIC_FILE_SERVER_IMAGE_RUNTIME_DEPS = [
    # Keep sorted.
    "//rs/tests:static-file-server_image",
]

rust_library(
    name = "common",
    testonly = True,
    srcs = ["common.rs"],
    crate_name = "ic_consensus_system_test_subnet_recovery_common",
    deps = [
        # Keep sorted.
        "//rs/nns/constants",
        "//rs/protobuf",
        "//rs/recovery",
        "//rs/registry/subnet_features",
        "//rs/registry/subnet_type",
        "//rs/rust_canisters/canister_test",
        "//rs/tests/consensus/tecdsa/utils",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/base_types",
        "//rs/types/management_canister_types",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:candid",
        "@crate_index//:prost",
        "@crate_index//:serde",
        "@crate_index//:serde_json",
        "@crate_index//:slog",
        "@crate_index//:url",
    ],
)

system_test_nns(
    name = "sr_app_same_nodes_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_same_nodes_enable_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_same_nodes_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_failover_nodes_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_failover_nodes_enable_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_failover_nodes_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_no_upgrade_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_no_upgrade_enable_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_no_upgrade_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_app_large_with_tecdsa_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "subnet_recovery",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    uses_guestos_dev = True,
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        ":common",
        "//rs/tests/driver:ic-system-test-driver",
        "@crate_index//:anyhow",
    ],
)

system_test_nns(
    name = "sr_nns_same_nodes_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    uses_guestos_dev_test = True,
    runtime_deps = GUESTOS_RUNTIME_DEPS + SUBNET_RECOVERY_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/recovery",
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:slog",
    ],
)

system_test_nns(
    name = "sr_nns_failover_nodes_test",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "experimental_system_test_colocation",
        "k8s",
        "subnet_recovery",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        SUBNET_RECOVERY_RUNTIME_DEPS + ORCHESTRATOR_UNIVERSAL_VM_ACTIVATION + STATIC_FILE_SERVER_IMAGE_RUNTIME_DEPS,
    deps = [
        # Keep sorted.
        "//rs/recovery",
        "//rs/registry/subnet_type",
        "//rs/tests/consensus/utils",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/tests/networking/canister_http",
        "//rs/types/types",
        "@crate_index//:anyhow",
        "@crate_index//:ic-agent",
        "@crate_index//:slog",
        "@crate_index//:url",
    ],
)

exports_files([
    "orchestrator_universal_vm_activation.sh",
])
