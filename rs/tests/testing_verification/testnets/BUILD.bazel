load("//rs/tests:common.bzl", "BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS", "DEPENDENCIES", "GRAFANA_RUNTIME_DEPS", "GUESTOS_RUNTIME_DEPS", "IC_MAINNET_NNS_RECOVERY_RUNTIME_DEPS", "MACRO_DEPENDENCIES", "NNS_CANISTER_RUNTIME_DEPS", "SNS_CANISTER_RUNTIME_DEPS")
load("//rs/tests:system_tests.bzl", "system_test")

package(default_visibility = ["//visibility:public"])

# the "_test" postfixes in names are dropped on purpose since this target is meant for interactive use.

system_test(
    name = "single_large_node",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "k8s",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "single_app_large_node",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "k8s",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "single_app_large_node_with_nns",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "k8s",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "small",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "small_nns",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + [
        "//rs/rosetta-api/icrc1/ledger:ledger_canister.wasm.gz",
        "@ii_dev_canister//file",
        "@nns_dapp_canister//file",
        "@subnet_rental_canister//file",
    ],
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "small_with_query_stats",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + [
        "//rs/rosetta-api/icrc1/ledger:ledger_canister.wasm.gz",
        "@ii_dev_canister//file",
        "@nns_dapp_canister//file",
        "@subnet_rental_canister//file",
    ],
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "sns_testing",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SNS_CANISTER_RUNTIME_DEPS + BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + [
        "//rs/rosetta-api/icrc1/ledger:ledger_canister.wasm.gz",
        "@ii_dev_canister//file",
        "@nns_dapp_canister//file",
        "@sns_aggregator//file",
        "@subnet_rental_canister//file",
    ],
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "medium",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "large",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SNS_CANISTER_RUNTIME_DEPS + BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + [
        "//rs/rosetta-api/icrc1/ledger:ledger_canister.wasm.gz",
        "@ii_dev_canister//file",
        "@nns_dapp_canister//file",
        "@sns_aggregator//file",
        "@subnet_rental_canister//file",
    ],
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "src_testing",
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "dynamic_testnet",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + SNS_CANISTER_RUNTIME_DEPS + BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + [
        "//rs/rosetta-api/icrc1/ledger:ledger_canister.wasm.gz",
        "//rs/rosetta-api/tvl/xrc_mock:xrc_mock_canister.wasm.gz",
        "@ii_dev_canister//file",
        "@nns_dapp_canister//file",
        "@sns_aggregator//file",
        "@subnet_rental_canister//file",
    ],
    deps = DEPENDENCIES + [
        "//rs/rosetta-api/tvl/xrc_mock",
        "//rs/tests",
        "@crate_index//:ic-xrc-types",
    ],
)

# recovered_mainnet_nns is a manual system-test that deploys an IC with a NNS that is recovered from the latest mainnet state.
system_test(
    name = "recovered_mainnet_nns",
    colocated_test_driver_vm_forward_ssh_agent = True,
    colocated_test_driver_vm_required_host_features = ["dc=zh1"],
    colocated_test_driver_vm_resources = {
        "vcpus": 16,
        "boot_image_minimal_size_gibibytes": 100,
    },
    env_inherit = ["SSH_AUTH_SOCK"],
    flaky = True,
    tags = [
        "dynamic_testnet",
        "local",
        "manual",
        "no-cache",
        "no-sandbox",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    runtime_deps = IC_MAINNET_NNS_RECOVERY_RUNTIME_DEPS,
    deps = [
        "//rs/tests",
        "//rs/tests/nns/ic_mainnet_nns_recovery",
        "@crate_index//:anyhow",
    ],
)
