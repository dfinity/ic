load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_test")
load("//rs/tests:common.bzl", "BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS", "CANISTER_HTTP_RUNTIME_DEPS", "COUNTER_CANISTER_RUNTIME_DEPS", "DEPENDENCIES", "GRAFANA_RUNTIME_DEPS", "GUESTOS_RUNTIME_DEPS", "MACRO_DEPENDENCIES", "NNS_CANISTER_RUNTIME_DEPS", "UNIVERSAL_VM_RUNTIME_DEPS")
load("//rs/tests:system_tests.bzl", "system_test")

package(default_visibility = ["//visibility:public"])

IC_HS_RUNTIME_DEPS = [
    "//rs/tests:ic-hs",
]

ALIASES = {
    "//rs/utils": "utils",
}

rust_binary(
    name = "colocate_test_bin",
    testonly = True,
    srcs = ["colocate_test.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "spec_compliance_application_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = ["cpu:4"],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + CANISTER_HTTP_RUNTIME_DEPS + IC_HS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + [
        "//ic-os/rootfs/guestos:dev-certs/canister_http_test_ca.cert",
    ],
    deps = DEPENDENCIES + [
        "//rs/tests",
        "//rs/tests/testing_verification/spec_compliance",
    ],
)

system_test(
    name = "spec_compliance_system_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = ["cpu:4"],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + CANISTER_HTTP_RUNTIME_DEPS + IC_HS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + [
        "//ic-os/rootfs/guestos:dev-certs/canister_http_test_ca.cert",
    ],
    deps = DEPENDENCIES + [
        "//rs/tests",
        "//rs/tests/testing_verification/spec_compliance",
    ],
)

system_test(
    name = "spec_compliance_group_01_application_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = ["cpu:4"],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + CANISTER_HTTP_RUNTIME_DEPS + IC_HS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + [
        "//ic-os/rootfs/guestos:dev-certs/canister_http_test_ca.cert",
    ],
    deps = DEPENDENCIES + [
        "//rs/tests",
        "//rs/tests/testing_verification/spec_compliance",
    ],
)

system_test(
    name = "spec_compliance_group_01_system_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = ["cpu:4"],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + CANISTER_HTTP_RUNTIME_DEPS + IC_HS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + [
        "//ic-os/rootfs/guestos:dev-certs/canister_http_test_ca.cert",
    ],
    deps = DEPENDENCIES + [
        "//rs/tests",
        "//rs/tests/testing_verification/spec_compliance",
    ],
)

system_test(
    name = "spec_compliance_group_02_system_subnet_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = ["cpu:4"],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS + GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS + CANISTER_HTTP_RUNTIME_DEPS + IC_HS_RUNTIME_DEPS + NNS_CANISTER_RUNTIME_DEPS + [
        "//ic-os/rootfs/guestos:dev-certs/canister_http_test_ca.cert",
    ],
    deps = DEPENDENCIES + [
        "//rs/tests",
        "//rs/tests/testing_verification/spec_compliance",
    ],
)

system_test(
    name = "basic_health_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "k8s",
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "ii_delegation_test",
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "system_test_hourly",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + COUNTER_CANISTER_RUNTIME_DEPS + [
        "@ii_dev_canister//file",
    ],
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "mainnet_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS,
    deps = DEPENDENCIES + ["//rs/tests"],
)

system_test(
    name = "remote_replicable_mock_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    tags = [
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = UNIVERSAL_VM_RUNTIME_DEPS + [":replicable_mock_test_uvm_config_image"],
    deps = DEPENDENCIES + ["//rs/tests"],
)

# The target is used for testing the following scenarios:
# Scenario A: running the test directly
#    bazel test //rs/tests:replicable_mock_test --test_tag_filters="system_test"
# Scanario B: Runs the test via Docker
# 1. bazel build //rs/tests:replicable_mock_test_image.tar # Dockerizes the test
# 2. docker load -i bazel-out/.../bin/rs/tests/replicable_mock_test_image.tar # Loads the Docker image
# 3. docker run -it bazel/rs/tests:replicable_mock_test_image
system_test(
    name = "replicable_mock_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES + ["//rs/tests"],
)

rust_binary(
    name = "test-driver-e2e-scenarios",
    testonly = True,
    srcs = ["test_driver_e2e_scenarios.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES + ["//rs/tests"],
)

rust_test(
    name = "test_e2e_scenarios",
    srcs = ["test_driver_tests.rs"],
    crate_root = "test_driver_tests.rs",
    deps = DEPENDENCIES + [":test-driver-e2e-scenarios"] + ["//rs/tests"],
)

rust_test(
    name = "generic_workload_engine",
    aliases = ALIASES,
    crate = "//rs/tests",
)
