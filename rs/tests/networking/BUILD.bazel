load("//rs/tests:common.bzl", "BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS", "CANISTER_HTTP_RUNTIME_DEPS", "COUNTER_CANISTER_RUNTIME_DEPS", "GRAFANA_RUNTIME_DEPS", "GUESTOS_RUNTIME_DEPS", "UNIVERSAL_VM_RUNTIME_DEPS")
load("//rs/tests:system_tests.bzl", "system_test", "system_test_nns")

package(default_visibility = ["//rs:system-tests-pkg"])

PROXY_CANISTER_RUNTIME_DEPS = [
    # Keep sorted.
    "//rs/rust_canisters/proxy_canister:proxy_canister",
]

CANISTER_HTTP_BASE_DEPS = [
    # Keep sorted.
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/proxy_canister:lib",
    "//rs/tests/driver:ic-system-test-driver",
    "//rs/tests/networking/canister_http:canister_http",
    "//rs/types/management_canister_types",
    "@crate_index//:anyhow",
    "@crate_index//:candid",
    "@crate_index//:ic-cdk",
    "@crate_index//:slog",
]

COMMON_DEPS = [
    # Keep sorted.
    "//rs/limits",
    "//rs/registry/subnet_type",
    "//rs/tests/driver:ic-system-test-driver",
    "@crate_index//:anyhow",
    "@crate_index//:slog",
    "@crate_index//:slog-async",
    "@crate_index//:slog-term",
]

system_test_nns(
    name = "canister_http_test",
    env = {
        "PROXY_WASM_PATH": "$(rootpath //rs/rust_canisters/proxy_canister:proxy_canister)",
    },
    extra_head_nns_tags = [],  # don't run the head_nns variant on nightly since it aleady runs on long_test.
    flaky = True,
    tags = [
        "k8s",
        "long_test",  # since it takes longer than 5 minutes.
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        CANISTER_HTTP_RUNTIME_DEPS + PROXY_CANISTER_RUNTIME_DEPS,
    deps = CANISTER_HTTP_BASE_DEPS + ["//rs/rust_canisters/canister_test"],
)

system_test_nns(
    name = "canister_http_socks_test",
    env = {
        "PROXY_WASM_PATH": "$(rootpath //rs/rust_canisters/proxy_canister:proxy_canister)",
    },
    flaky = True,
    tags = [
        # TODO(NET-1710): enable on CI again when the problematic firewall rule in the IC node has been removed.
        #"long_test",
        #"system_test_nightly",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        BOUNDARY_NODE_GUESTOS_RUNTIME_DEPS +
        CANISTER_HTTP_RUNTIME_DEPS + PROXY_CANISTER_RUNTIME_DEPS,
    deps = CANISTER_HTTP_BASE_DEPS + [
        "//rs/registry/subnet_features",
        "//rs/registry/subnet_type",
    ],
)

system_test_nns(
    name = "canister_http_correctness_test",
    env = {
        "PROXY_WASM_PATH": "$(rootpath //rs/rust_canisters/proxy_canister:proxy_canister)",
    },
    flaky = True,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        CANISTER_HTTP_RUNTIME_DEPS + PROXY_CANISTER_RUNTIME_DEPS,
    deps = CANISTER_HTTP_BASE_DEPS + [
        "//rs/rust_canisters/canister_test",
        "//rs/test_utilities",
        "//rs/test_utilities/types",
        "//rs/types/base_types",
        "//rs/types/types",
        "@crate_index//:assert_matches",
        "@crate_index//:tokio",
    ],
)

system_test_nns(
    name = "canister_http_fault_tolerance_test",
    env = {
        "PROXY_WASM_PATH": "$(rootpath //rs/rust_canisters/proxy_canister:proxy_canister)",
    },
    flaky = True,
    tags = [
        "k8s",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        CANISTER_HTTP_RUNTIME_DEPS + PROXY_CANISTER_RUNTIME_DEPS,
    deps = CANISTER_HTTP_BASE_DEPS + [
        "//rs/registry/subnet_type",
        "//rs/rust_canisters/canister_test",
        "//rs/types/types",
        "@crate_index//:ic-utils",
        "@crate_index//:reqwest",
        "@crate_index//:tokio",
    ],
)

system_test_nns(
    name = "canister_http_time_out_test",
    env = {
        "PROXY_WASM_PATH": "$(rootpath //rs/rust_canisters/proxy_canister:proxy_canister)",
    },
    flaky = True,
    tags = [
        "k8s",
        "long_test",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps =
        GUESTOS_RUNTIME_DEPS +
        UNIVERSAL_VM_RUNTIME_DEPS +
        CANISTER_HTTP_RUNTIME_DEPS + PROXY_CANISTER_RUNTIME_DEPS,
    deps = CANISTER_HTTP_BASE_DEPS,
)

system_test_nns(
    name = "firewall_max_connections_test",
    flaky = True,
    tags = [
        "long_test",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS,
    deps = COMMON_DEPS + [
        "@crate_index//:tokio",
        "@crate_index//:tokio-util",
    ],
)

system_test_nns(
    name = "firewall_priority_test",
    flaky = True,
    tags = [
        "long_test",
    ],
    target_compatible_with = ["@platforms//os:linux"],
    runtime_deps = GUESTOS_RUNTIME_DEPS + UNIVERSAL_VM_RUNTIME_DEPS,
    deps = COMMON_DEPS + [
        "//rs/nns/governance/api",
        "//rs/protobuf",
        "//rs/registry/canister",
        "//rs/registry/keys",
        "//rs/types/types",
        "@crate_index//:candid",
        "@crate_index//:reqwest",
        "@crate_index//:url",
    ],
)

system_test_nns(
    name = "network_large_test",
    extra_head_nns_tags = ["manual"],  # only run this test with the mainnet NNS canisters.
    flaky = True,
    tags = [
        "k8s",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS,
    deps = COMMON_DEPS + [
        "//rs/types/types",
        "@crate_index//:tokio",
        "@crate_index//:tokio-util",
    ],
)

system_test_nns(
    name = "network_reliability_test",
    extra_head_nns_tags = ["manual"],  # only run this test with the mainnet NNS canisters.
    flaky = True,
    tags = [
        "k8s",
        "system_test_nightly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    runtime_deps = GUESTOS_RUNTIME_DEPS + COUNTER_CANISTER_RUNTIME_DEPS,
    deps = COMMON_DEPS + [
        "//rs/types/base_types",
        "@crate_index//:rand",
        "@crate_index//:rand_chacha",
    ],
)

system_test_nns(
    name = "p2p_performance_test",
    flaky = True,
    tags = [
        "k8s",
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + COUNTER_CANISTER_RUNTIME_DEPS + [
        "//rs/tests:jaeger_uvm_config_image",
    ],
    deps = COMMON_DEPS + [
        "@crate_index//:ic-agent",
    ],
)

system_test_nns(
    name = "query_workload_long_test",
    flaky = True,
    tags = [
        "k8s",
        "system_test_hourly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "long",
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + COUNTER_CANISTER_RUNTIME_DEPS,
    deps = COMMON_DEPS + [
        "//rs/tests/networking/subnet_update_workload",
    ],
)

system_test_nns(
    name = "update_workload_large_payload",
    flaky = True,
    tags = [
        "system_test_hourly",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "long",
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + COUNTER_CANISTER_RUNTIME_DEPS,
    deps = COMMON_DEPS + [
        "//rs/tests/networking/subnet_update_workload",
    ],
)

system_test(
    name = "cloner_canister_workload",
    env = {
        "CLONER_CANISTER_WASM_PATH": "$(rootpath //rs/tests/networking/canisters:cloner_canister)",
    },
    tags = [
        "manual",
    ],
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "eternal",
    runtime_deps = GUESTOS_RUNTIME_DEPS + GRAFANA_RUNTIME_DEPS + COUNTER_CANISTER_RUNTIME_DEPS + [
        "//rs/tests/networking/canisters:cloner_canister",
    ],
    deps = [
        "//rs/registry/subnet_features",
        "//rs/registry/subnet_type",
        "//rs/tests/driver:ic-system-test-driver",
        "//rs/tests/networking/canisters:cloner_canister_types",
        "@crate_index//:anyhow",
        "@crate_index//:candid",
        "@crate_index//:slog",
        "@crate_index//:tokio",
    ],
)
