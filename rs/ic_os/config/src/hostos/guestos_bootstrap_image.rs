use crate::serialize_and_write_config;
use anyhow::{Context, Result, bail};
use config_types::GuestOSConfig;
use std::env;
use std::fs::{self, File};
use std::path::{Path, PathBuf};
use std::process::Command;

/// Configuration options for GuestOS bootstrap image/tar creation.
#[derive(Default, Debug, Clone, Eq, PartialEq)]
pub struct BootstrapOptions {
    pub guestos_config: Option<GuestOSConfig>,

    /// Injected crypto state. Should point to a directory containing material
    /// generated by ic-prep. Typically, this is IC_PREP_OUT_PATH/node-X/crypto.
    pub ic_crypto: Option<PathBuf>,

    /// Injected state. Should point to a directory containing a state (with checkpoint)
    /// to start from. Typically, this is IC_PREP_OUT_PATH/node-X/data/ic_state
    pub ic_state: Option<PathBuf>,

    /// Injected initial registry state. Should point to a directory containing
    /// material generated by ic-prep. Typically, this is
    /// IC_PREP_OUT_PATH/ic_registry_local_store
    pub ic_registry_local_store: Option<PathBuf>,

    /// NNS public key file.
    pub nns_public_key: Option<PathBuf>,

    /// Should point to a directory with files containing the authorized ssh
    /// keys for specific user accounts on the machine. The name of the
    /// key designates the name of the account (so, if there is a file
    /// "PATH/admin" then it is transferred to "~admin/.ssh/authorized_keys" on
    /// the target). The presently recognized accounts are: backup, readonly and
    /// admin
    #[cfg(feature = "dev")]
    pub accounts_ssh_authorized_keys: Option<PathBuf>,

    /// Should point to a file containing a Node Provider private key PEM.
    pub node_operator_private_key: Option<PathBuf>,
}

impl BootstrapOptions {
    /// Create a FAT-formatted disk image containing bootstrap configuration.
    ///
    /// Takes all the configuration options specified in BootstrapOptions and packages them into
    /// a disk image that can be mounted by the GuestOS. The image contains a FAT filesystem with
    /// a single file named 'ic-bootstrap.tar' that includes all configuration files.
    pub fn build_bootstrap_config_image(&self, out_file: &Path) -> Result<()> {
        let tmp_dir = tempfile::tempdir().context("Failed to create temporary directory")?;

        // Create bootstrap tar
        let tar_path = tmp_dir.path().join("ic-bootstrap.tar");
        self.build_bootstrap_tar(&tar_path)?;

        let tar_size = fs::metadata(&tar_path)
            .context("Failed to get tar file metadata")?
            .len();

        // Calculate the disk image size (2 * tar_size + 1MB)
        let image_size = 2 * tar_size + 1_048_576;

        // Create an empty file of the calculated size
        let file = File::create(out_file).context("Failed to create output file")?;
        file.set_len(image_size)
            .context("Failed to set output file size")?;

        // Format the disk image as FAT
        // mkfs.vfat is usually in /usr/sbin which is not always in the PATH
        let path_with_usr_sbin = format!("/usr/sbin:{}", env::var("PATH").unwrap_or_default());
        if !Command::new("mkfs.vfat")
            .arg("-n")
            .arg("CONFIG")
            .env("PATH", path_with_usr_sbin)
            .arg(out_file)
            .status()
            .context("Failed to execute mkfs.vfat command")?
            .success()
        {
            bail!("Failed to format disk image");
        }

        // Copy the tar file to the disk image
        if !Command::new("mcopy")
            .arg("-i")
            .arg(out_file)
            .arg("-o")
            .arg(&tar_path)
            .arg("::")
            .status()
            .context("Failed to execute mcopy command")?
            .success()
        {
            bail!("Failed to copy tar to disk image");
        }

        Ok(())
    }

    /// Build a bootstrap tar file with this configuration.
    fn build_bootstrap_tar(&self, out_file: &Path) -> Result<()> {
        // Create temporary directory for bootstrap files
        let bootstrap_dir = tempfile::tempdir().context("Failed to create temporary directory")?;

        if let Some(guestos_config) = &self.guestos_config {
            serialize_and_write_config(&bootstrap_dir.path().join("config.json"), guestos_config)
                .context("Failed to write guestos config to config.json")?;
        }

        if let Some(nns_public_key) = &self.nns_public_key {
            fs::copy(
                nns_public_key,
                bootstrap_dir.path().join("nns_public_key.pem"),
            )
            .context("Failed to copy NNS public key")?;
        }

        if let Some(node_operator_private_key) = &self.node_operator_private_key {
            fs::copy(
                node_operator_private_key,
                bootstrap_dir.path().join("node_operator_private_key.pem"),
            )
            .context("Failed to copy node operator private key")?;
        }

        #[cfg(feature = "dev")]
        if let Some(accounts_ssh_authorized_keys) = &self.accounts_ssh_authorized_keys {
            let target_dir = bootstrap_dir.path().join("accounts_ssh_authorized_keys");
            Self::copy_dir_recursively(accounts_ssh_authorized_keys, &target_dir)
                .context("Failed to copy SSH authorized keys")?;
        }

        if let Some(ic_crypto) = &self.ic_crypto {
            Self::copy_dir_recursively(ic_crypto, &bootstrap_dir.path().join("ic_crypto"))
                .context("Failed to copy IC crypto directory")?;
        }

        if let Some(ic_state) = &self.ic_state
            && ic_state.exists()
        {
            Self::copy_dir_recursively(ic_state, &bootstrap_dir.path().join("ic_state"))
                .context("Failed to copy IC state directory")?;
        }

        if let Some(ic_registry_local_store) = &self.ic_registry_local_store {
            Self::copy_dir_recursively(
                ic_registry_local_store,
                &bootstrap_dir.path().join("ic_registry_local_store"),
            )
            .context("Failed to copy registry local store")?;
        }

        if !Command::new("tar")
            .arg("cf")
            .arg(out_file)
            .arg("--sort=name")
            .arg("--owner=root:0")
            .arg("--group=root:0")
            .arg("--mtime=UTC 1970-01-01 00:00:00")
            .arg("-C")
            .arg(bootstrap_dir.path())
            .arg(".")
            .status()
            .context("Failed to execute tar command")?
            .success()
        {
            bail!("Failed to create tar file");
        }

        Ok(())
    }

    fn copy_dir_recursively(src: &Path, dst: &Path) -> Result<()> {
        if !Command::new("cp")
            .arg("-r")
            .arg(src)
            .arg(dst)
            .status()
            .context(format!(
                "Failed to copy {} to {}",
                src.display(),
                dst.display()
            ))?
            .success()
        {
            bail!("Failed to copy {} to {}", src.display(), dst.display());
        }
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use config_types::{
        DeploymentEnvironment, GuestOSUpgradeConfig, GuestVMType, ICOSSettings, Ipv6Config,
        NetworkSettings,
    };
    use std::net::Ipv6Addr;
    use std::str::FromStr;

    #[test]
    fn test_build_bootstrap_config_image_succeeds_with_default_options() {
        let tmp_dir = tempfile::tempdir().unwrap();
        let out_file = tmp_dir.path().join("bootstrap.tar");

        assert!(
            BootstrapOptions::default()
                .build_bootstrap_config_image(&out_file)
                .is_ok()
        );
    }

    #[test]
    fn test_build_bootstrap_image() -> Result<()> {
        let tmp_dir = tempfile::tempdir()?;
        let out_file = tmp_dir.path().join("bootstrap.img");

        BootstrapOptions {
            ..Default::default()
        }
        .build_bootstrap_config_image(&out_file)?;

        assert!(out_file.exists());
        assert!(fs::metadata(&out_file)?.len() > 0);

        Ok(())
    }

    #[test]
    fn test_build_bootstrap_tar_with_all_options() -> Result<()> {
        let tmp_dir = tempfile::tempdir()?;
        let out_file = tmp_dir.path().join("bootstrap.tar");

        // Create test files and directories
        let test_files_dir = tmp_dir.path().join("test_files");
        fs::create_dir(&test_files_dir)?;

        let guestos_config = GuestOSConfig {
            config_version: "".to_string(),
            network_settings: NetworkSettings {
                ipv6_config: Ipv6Config::RouterAdvertisement,
                ipv4_config: None,
                domain_name: None,
            },
            icos_settings: ICOSSettings {
                node_reward_type: None,
                mgmt_mac: Default::default(),
                deployment_environment: DeploymentEnvironment::Mainnet,
                logging: Default::default(),
                use_nns_public_key: false,
                nns_urls: vec![],
                use_node_operator_private_key: false,
                enable_trusted_execution_environment: false,
                use_ssh_authorized_keys: false,
                icos_dev_settings: Default::default(),
            },
            guestos_settings: Default::default(),
            guest_vm_type: GuestVMType::Default,
            upgrade_config: GuestOSUpgradeConfig {
                peer_guest_vm_address: Some(Ipv6Addr::from_str("2001:db8::1")?),
            },
            trusted_execution_environment_config: None,
            recovery_config: Default::default(),
        };

        let nns_key_path = test_files_dir.join("nns.pem");
        fs::write(&nns_key_path, "test_nns_key")?;

        let node_key_path = test_files_dir.join("node.pem");
        fs::write(&node_key_path, "test_node_key")?;

        let ssh_keys_dir = test_files_dir.join("ssh_keys");
        fs::create_dir(&ssh_keys_dir)?;
        fs::write(ssh_keys_dir.join("key1"), "ssh_key1")?;

        let crypto_dir = test_files_dir.join("crypto");
        fs::create_dir(&crypto_dir)?;
        fs::write(crypto_dir.join("test"), "crypto_data")?;

        let state_dir = test_files_dir.join("state");
        fs::create_dir(&state_dir)?;
        fs::write(state_dir.join("test"), "state_data")?;

        let registry_dir = test_files_dir.join("registry");
        fs::create_dir(&registry_dir)?;
        fs::write(registry_dir.join("test"), "registry_data")?;

        // Create full configuration
        let bootstrap_options = BootstrapOptions {
            guestos_config: Some(guestos_config.clone()),
            nns_public_key: Some(nns_key_path),
            node_operator_private_key: Some(node_key_path),
            #[cfg(feature = "dev")]
            accounts_ssh_authorized_keys: Some(ssh_keys_dir),
            ic_crypto: Some(crypto_dir),
            ic_state: Some(state_dir),
            ic_registry_local_store: Some(registry_dir),
        };

        // Build and extract tar
        bootstrap_options.build_bootstrap_tar(&out_file)?;
        let extract_dir = tmp_dir.path().join("extract");
        fs::create_dir(&extract_dir)?;
        Command::new("tar")
            .arg("xf")
            .arg(&out_file)
            .arg("-C")
            .arg(&extract_dir)
            .status()?;

        // Verify all copied files and directories
        assert_eq!(
            fs::read_to_string(extract_dir.join("config.json"))?,
            serde_json::to_string_pretty(&guestos_config)?
        );
        assert_eq!(
            fs::read_to_string(extract_dir.join("nns_public_key.pem"))?,
            "test_nns_key"
        );
        assert_eq!(
            fs::read_to_string(extract_dir.join("node_operator_private_key.pem"))?,
            "test_node_key"
        );
        assert_eq!(
            fs::read_to_string(extract_dir.join("accounts_ssh_authorized_keys/key1"))?,
            "ssh_key1"
        );
        assert_eq!(
            fs::read_to_string(extract_dir.join("ic_crypto/test"))?,
            "crypto_data"
        );
        assert_eq!(
            fs::read_to_string(extract_dir.join("ic_state/test"))?,
            "state_data"
        );
        assert_eq!(
            fs::read_to_string(extract_dir.join("ic_registry_local_store/test"))?,
            "registry_data"
        );

        Ok(())
    }

    #[test]
    fn ensure_tested_with_dev() {
        // Ensure that the test is run with the dev feature enabled.
        assert!(cfg!(feature = "dev"));
    }
}
