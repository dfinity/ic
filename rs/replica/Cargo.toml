[package]
name = "ic-replica"
version.workspace = true
authors.workspace = true
edition.workspace = true
description.workspace = true
documentation.workspace = true

[dependencies]
clap = { version = "3.2.25", features = ["derive"] }
hex = { workspace = true }
ic-artifact-pool = { path = "../artifact_pool" }
ic-async-utils = { path = "../async_utils" }
ic-btc-adapter-client = { path = "../bitcoin/client" }
ic-btc-consensus = { path = "../bitcoin/consensus" }
ic-config = { path = "../config" }
ic-consensus = { path = "../consensus" }
ic-crypto = { path = "../crypto" }
ic-crypto-sha2 = { path = "../crypto/sha2" }
ic-cycles-account-manager = { path = "../cycles_account_manager" }
ic-execution-environment = { path = "../execution_environment" }
ic-http-endpoints-public = { path = "../http_endpoints/public" }
ic-https-outcalls-adapter-client = { path = "../https_outcalls/client" }
ic-interfaces = { path = "../interfaces" }
ic-interfaces-certified-stream-store = { path = "../interfaces/certified_stream_store" }
ic-interfaces-registry = { path = "../interfaces/registry" }
ic-interfaces-state-manager = { path = "../interfaces/state_manager" }
ic-logger = { path = "../monitoring/logger" }
ic-messaging = { path = "../messaging" }
ic-metrics = { path = "../monitoring/metrics" }
ic-http-endpoints-metrics = { path = "../http_endpoints/metrics" }
ic-pprof = { path = "../monitoring/pprof" }
ic-protobuf = { path = "../protobuf" }
ic-registry-client = { path = "../registry/client" }
ic-registry-client-helpers = { path = "../registry/helpers" }
ic-registry-local-store = { path = "../registry/local_store" }
ic-registry-subnet-type = { path = "../registry/subnet_type" }
ic-replica-setup-ic-network = { path = "./setup_ic_network" }
ic-replicated-state = { path = "../replicated_state" }
ic-state-manager = { path = "../state_manager" }
ic-sys = { path = "../sys" }
ic-tracing = { path = "../monitoring/tracing" }
ic-types = { path = "../types/types" }
ic-xnet-endpoint = { path = "../xnet/endpoint" }
ic-xnet-payload-builder = { path = "../xnet/payload_builder" }
jemalloc-ctl = "0.3.3"
jemallocator = "0.3.2"
libc = "0.2.91"
nix = { workspace = true }
num_cpus = "1.13.1"
pprof = { version = "0.13", default-features = false, features = [
    "flamegraph",
    "prost-codec",
], optional = true }
prometheus = { workspace = true }
rand = "0.8"
regex = "1.3.9"
slog = { workspace = true }
tempfile = "3.1.0"
tokio = { workspace = true }
tracing = { workspace = true }
tracing-flame = "0.2.0"
tracing-subscriber = { workspace = true }
opentelemetry = { version = "^0.21.0", features = ["trace"] }
opentelemetry-otlp = { version = "^0.14.0", features = ["grpc-tonic"] }
opentelemetry_sdk = { version = "^0.21.2", features = ["trace"] }
tracing-opentelemetry = "^0.22.0"

[target.'cfg(target_os = "linux")'.dependencies]
# this library uses libunwind, which is only applicable to Linux
ic-backtrace = { path = "../monitoring/backtrace" }

[dev-dependencies]
assert_cmd = "2.0.12"
canister-test = { path = "../rust_canisters/canister_test" }
criterion = "0.5"
ic-management-canister-types = { path = "../types/management_canister_types" }
ic-interfaces-registry-mocks = { path = "../interfaces/registry/mocks" }
ic-test-utilities = { path = "../test_utilities" }
predicates = "3.0.4"
wat = "1.0.52"

[[bench]]
name = "calls"
harness = false

[[bin]]
name = "replica"
path = "src/main.rs"

[features]
profiler = ["pprof"]
malicious_code = [
    "ic-consensus/malicious_code",
    "ic-state-manager/malicious_code",
]
