[package]
name = "ic-sns-governance"
version.workspace = true
authors.workspace = true
edition.workspace = true
description.workspace = true
documentation.workspace = true

[[bin]]
name = "sns-governance-canister"
path = "canister/canister.rs"

[lib]
path = "src/lib.rs"

[[test]]
name = "governance-test"
path = "tests/governance.rs"

[[test]]
name = "governance-interleaving-test"
path = "tests/interleaving_tests.rs"

[[test]]
name = "proposal-test"
path = "tests/proposal.rs"

[dependencies]
build-info = { workspace = true }

async-trait = { workspace = true }
base64 = { workspace = true }
candid = { workspace = true }
clap = { version = "3.2.25", features = ["derive"] }
comparable = { version = "0.5", features = ["derive"] }
dfn_candid = { path = "../../rust_canisters/dfn_candid" }
dfn_core = { path = "../../rust_canisters/dfn_core" }
hex = { workspace = true }
ic-base-types = { path = "../../types/base_types" }
ic-canisters-http-types = { path = "../../rust_canisters/http_types" }
ic-canister-log = { path = "../../rust_canisters/canister_log" }
ic-canister-profiler = { path = "../../rust_canisters/canister_profiler" }
ic-crypto-sha2 = { path = "../../crypto/sha2/" }
ic-management-canister-types = { path = "../../types/management_canister_types" }
icrc-ledger-client = { path = "../../../packages/icrc-ledger-client" }
ic-ledger-core = { path = "../../rosetta-api/ledger_core" }
ic-icrc1-ledger = { path = "../../rosetta-api/icrc1/ledger" }
ic-metrics-encoder = "1"
ic-nervous-system-clients = { path = "../../nervous_system/clients" }
ic-nervous-system-collections-union-multi-map = { path = "../../nervous_system/collections/union_multi_map" }
ic-nervous-system-common = { path = "../../nervous_system/common" }
ic-nervous-system-common-build-metadata = { path = "../../nervous_system/common/build_metadata" }
ic-nervous-system-governance = { path = "../../nervous_system/governance" }
ic-nervous-system-lock = { path = "../../nervous_system/lock" }
ic-nervous-system-proto = { path = "../../nervous_system/proto" }
ic-nervous-system-root = { path = "../../nervous_system/root" }
ic-nervous-system-runtime = { path = "../../nervous_system/runtime" }
ic-nns-constants = { path = "../../nns/constants" }
ic-sns-governance-proposal-criticality = { path = "./proposal_criticality" }
ic-sns-governance-proposals-amount-total-limit = { path = "./proposals_amount_total_limit" }
ic-sns-governance-token-valuation = { path = "./token_valuation" }
ic-protobuf = { path = "../../protobuf" }
ic-utils = { path = "../../utils" }
lazy_static = "1.4.0"
icp-ledger = { path = "../../rosetta-api/icp_ledger" }
icrc-ledger-types = { path = "../../../packages/icrc-ledger-types" }
maplit = "1.0.2"
num-traits = { workspace = true }
prost = { workspace = true }
rand = "0.8"
rand_chacha = "0.3"
rust_decimal = "1.25"
rust_decimal_macros = "1.25"
serde = { workspace = true }
serde_bytes = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
ic-types = { path = "../../types/types" }

[build-dependencies]
build-info-build = { workspace = true }

ic-base-types = { path = "../../types/base_types" }
prost-build = { workspace = true }

[dev-dependencies]
assert_matches = { workspace = true }
futures = { workspace = true }
ic-canister-client-sender = { path = "../../canister_client/sender" }
ic-crypto-sha2 = { path = "../../crypto/sha2/" }
ic-nervous-system-common-test-keys = { path = "../../nervous_system/common/test_keys" }
ic-nervous-system-common-test-utils = { path = "../../nervous_system/common/test_utils" }
ic-sns-governance = { path = ".", features = ["test"] }
ic-sns-governance-protobuf-generator = { path = "./protobuf_generator" }
ic-sns-test-utils = { path = "../test_utils" }
ic-test-utilities-compare-dirs = { path = "../../test_utilities/compare_dirs" }
ic-test-utilities-types = { path = "../../test_utilities/types" }
lazy_static = "1.4.0"
pretty_assertions = { workspace = true }
proptest = "1.0"
tempfile = "3.1.0"
tokio = { workspace = true }
tokio-test = "0.4.2"

[features]
test = []
