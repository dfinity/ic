type CanisterCallError = record { code : opt int32; description : text };
type CanisterIdRecord = record { canister_id : principal };
type CanisterInstallMode = variant { reinstall; upgrade; install };
type CanisterStatusResult = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  module_hash : opt blob;
};
type CanisterStatusResultV2 = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettingsArgs;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
};
type CanisterStatusType = variant { stopped; stopping; running };
type CanisterSummary = record {
  status : opt CanisterStatusResultV2;
  canister_id : opt principal;
};
type ChangeCanisterRequest = record {
  arg : blob;
  wasm_module : blob;
  stop_before_installing : bool;
  mode : CanisterInstallMode;
  canister_id : principal;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type DefiniteCanisterSettings = record { controllers : vec principal };
type DefiniteCanisterSettingsArgs = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type FailedUpdate = record {
  err : opt CanisterCallError;
  dapp_canister_id : opt principal;
};
type GetSnsCanistersSummaryRequest = record { update_canister_list : opt bool };
type GetSnsCanistersSummaryResponse = record {
  root : opt CanisterSummary;
  swap : opt CanisterSummary;
  ledger : opt CanisterSummary;
  index : opt CanisterSummary;
  governance : opt CanisterSummary;
  dapps : vec CanisterSummary;
  archives : vec CanisterSummary;
};
type ListSnsCanistersResponse = record {
  root : opt principal;
  swap : opt principal;
  ledger : opt principal;
  index : opt principal;
  governance : opt principal;
  dapps : vec principal;
  archives : vec principal;
};
type ManageDappCanisterSettingsRequest = record {
  freezing_threshold : opt nat64;
  canister_ids : vec principal;
  reserved_cycles_limit : opt nat64;
  log_visibility : opt int32;
  memory_allocation : opt nat64;
  compute_allocation : opt nat64;
};
type ManageDappCanisterSettingsResponse = record { failure_reason : opt text };
type RegisterDappCanisterRequest = record { canister_id : opt principal };
type RegisterDappCanistersRequest = record { canister_ids : vec principal };
type SetDappControllersRequest = record {
  canister_ids : opt RegisterDappCanistersRequest;
  controller_principal_ids : vec principal;
};
type SetDappControllersResponse = record { failed_updates : vec FailedUpdate };
type SnsRootCanister = record {
  dapp_canister_ids : vec principal;
  testflight : bool;
  latest_ledger_archive_poll_timestamp_seconds : opt nat64;
  archive_canister_ids : vec principal;
  governance_canister_id : opt principal;
  index_canister_id : opt principal;
  swap_canister_id : opt principal;
  ledger_canister_id : opt principal;
};
service : (SnsRootCanister) -> {
  canister_status : (CanisterIdRecord) -> (CanisterStatusResult);
  change_canister : (ChangeCanisterRequest) -> ();
  get_build_metadata : () -> (text) query;
  get_sns_canisters_summary : (GetSnsCanistersSummaryRequest) -> (
      GetSnsCanistersSummaryResponse,
    );
  list_sns_canisters : (record {}) -> (ListSnsCanistersResponse) query;
  manage_dapp_canister_settings : (ManageDappCanisterSettingsRequest) -> (
      ManageDappCanisterSettingsResponse,
    );
  register_dapp_canister : (RegisterDappCanisterRequest) -> (record {});
  register_dapp_canisters : (RegisterDappCanistersRequest) -> (record {});
  set_dapp_controllers : (SetDappControllersRequest) -> (
      SetDappControllersResponse,
    );
}