load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test")

DEPENDENCIES = [
    "//rs/crypto/utils/threshold_sig",
    "//rs/crypto/utils/threshold_sig_der",
    "//rs/monitoring/metrics",
    "//rs/protobuf",
    "//rs/recovery",
    "//rs/registry/routing_table",
    "//rs/registry/subnet_type",
    "//rs/replay",
    "//rs/state_manager",
    "//rs/state_tool:state_tool_lib",
    "//rs/types/base_types",
    "//rs/types/types",
    "@crate_index//:ic-agent",
    "@crate_index//:clap_3_2_25",
    "@crate_index//:hex",
    "@crate_index//:serde",
    "@crate_index//:serde_cbor",
    "@crate_index//:slog",
    "@crate_index//:strum",
    "@crate_index//:url",
]

DEV_DEPENDENCIES = [
    "//rs/test_utilities/tmpdir",
]

MACRO_DEPENDENCIES = [
    "@crate_index//:strum_macros",
]

ALIASES = {}

rust_library(
    name = "subnet_splitting",
    testonly = True,
    srcs = glob(
        ["src/**/*.rs"],
        exclude = ["src/main.rs"],
    ),
    aliases = ALIASES,
    crate_name = "ic_subnet_splitting",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.1.0",
    visibility = ["//rs/tests:__subpackages__"],
    deps = DEPENDENCIES,
)

rust_binary(
    name = "subnet-splitting-tool",
    testonly = True,
    srcs = ["src/main.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    visibility = ["//visibility:public"],
    deps = DEPENDENCIES + [
        ":subnet_splitting",
        "//rs/canister_sandbox:backend_lib",
    ],
)

rust_test(
    name = "subnet_splitting_tool_test",
    crate = "subnet_splitting",
    data = ["test_data/fake_expected_manifests.data"],
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)
