load("@rules_rust//cargo:defs.bzl", "cargo_build_script")
load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("//bazel:canisters.bzl", "rust_canister")
load("//bazel:defs.bzl", "rust_ic_test", "rust_ic_test_suite_with_extra_srcs")
load("//bazel:prost.bzl", "generated_files_check")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "protos",
    srcs = glob(["proto/**"]),
)

DEPENDENCIES = [
    "//rs/crypto/node_key_validation",
    "//rs/crypto/sha2",
    "//rs/crypto/utils/basic_sig",
    "//rs/crypto/utils/ni_dkg",
    "//rs/nervous_system/common",
    "//rs/nns/cmc",
    "//rs/nns/common",
    "//rs/nns/constants",
    "//rs/protobuf",
    "//rs/registry/keys",
    "//rs/registry/routing_table",
    "//rs/registry/subnet_features",
    "//rs/registry/subnet_type",
    "//rs/registry/transport",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/dfn_core",
    "//rs/rust_canisters/dfn_http_metrics",
    "//rs/rust_canisters/on_wire",
    "//rs/types/base_types",
    "//rs/types/management_canister_types",
    "//rs/types/types",
    "@crate_index//:build-info",
    "@crate_index//:candid",
    "@crate_index//:futures",
    "@crate_index//:ic-cdk",
    "@crate_index//:ic-certified-map",
    "@crate_index//:ic-metrics-encoder",
    "@crate_index//:lazy_static",
    "@crate_index//:ipnet",
    "@crate_index//:leb128",
    "@crate_index//:prost",
    "@crate_index//:serde",
    "@crate_index//:url",
]

DEV_DEPENDENCIES = [
    "@crate_index//:assert_matches",
    "@crate_index//:candid_parser",
    "@crate_index//:itertools",
    "@crate_index//:maplit",
    "@crate_index//:rand",
    "@crate_index//:rand_distr",
    "@crate_index//:serde_json",
    "@crate_index//:tempfile",
    "@crate_index//:tokio",
    "//rs/rust_canisters/canister_test",
    "//rs/canister_client/sender",
    "//rs/config",
    "//rs/crypto/node_key_generation",
    "//rs/crypto/test_utils/ni-dkg",
    "//rs/crypto/test_utils/reproducible_rng",
    "//rs/crypto/tree_hash",
    "//rs/interfaces/registry",
    "//rs/nervous_system/common/test_keys",
    "//rs/nns/test_utils",
    "//rs/replica_tests",
    "//rs/registry/fake",
    "//rs/registry/nns_data_provider",
    "//rs/registry/proto_data_provider",
    "//rs/test_utilities",
    "//rs/test_utilities/compare_dirs",
    "//rs/test_utilities/types",
    "//rs/types/types_test_utils",
]

MACRO_DEPENDENCIES = [
    "//rs/nervous_system/common/build_metadata",
]

DEV_MACRO_DEPENDENCIES = [
    "//rs/nns/test_utils_macros",
]

BUILD_DEPENDENCIES = [
    "@crate_index//:build-info-build",
]

ALIASES = {}

cargo_build_script(
    name = "build_script",
    srcs = ["build.rs"],
    aliases = ALIASES,
    data = [],  # build script data (e.g. template files) goes here
    version = "0.9.0",
    deps = BUILD_DEPENDENCIES,
)

rust_library(
    name = "canister",
    srcs = glob([
        "src/**",
        "gen/**",
    ]),
    aliases = ALIASES,
    crate_name = "registry_canister",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = DEPENDENCIES + [":build_script"],
)

rust_canister(
    name = "registry-canister",
    srcs = ["canister/canister.rs"],
    aliases = ALIASES,
    compile_data = ["canister/registry.did"],
    opt = "z",  # TODO: undo once dfx-extensions do not ungzip canister modules
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":canister/registry.did",
    deps = DEPENDENCIES + [":canister"] + [":build_script"],
)

rust_ic_test(
    name = "registry_canister_canister_test",
    srcs = glob(["canister/*.rs"]),
    crate_root = "canister/canister.rs",
    data = [
        "canister/registry.did",
        ":registry-canister",
        "//rs/nns/cmc:cycles-minting-canister",
    ],
    env = {
        "CARGO_MANIFEST_DIR": "rs/registry/canister",
    },
    proc_macro_deps = MACRO_DEPENDENCIES + DEV_MACRO_DEPENDENCIES,
    deps = DEV_DEPENDENCIES + DEPENDENCIES + [":canister"] + [":build_script"],
)

rust_test(
    name = "registry_canister_test",
    crate = ":canister",
    proc_macro_deps = DEV_MACRO_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_ic_test_suite_with_extra_srcs(
    name = "registry_canister_integration_test",
    srcs = glob(
        ["tests/*.rs"],
        exclude = [
            "tests/mod.rs",
            "tests/check_generated_files.rs",
        ],
    ),
    data = [
        ":registry-canister",
        "//rs/nns/cmc:cycles-minting-canister",
    ],
    env = {
        "CARGO_MANIFEST_DIR": "rs/registry/canister",
        "CYCLES_MINTING_CANISTER_WASM_PATH": "$(rootpath //rs/nns/cmc:cycles-minting-canister)",
        "REGISTRY_CANISTER_WASM_PATH": "$(rootpath :registry-canister)",
    },
    extra_srcs = glob(["tests/common/*.rs"]),
    proc_macro_deps = DEV_MACRO_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [":canister"],
)

generated_files_check(
    name = "check_generated_files",
    srcs = ["tests/check_generated_files.rs"],
    data = [
        ":protos",
        "//rs/nns/common:protos",
        "//rs/protobuf:protos",
        "//rs/registry/transport:protos",
        "//rs/types/base_types:protos",
    ] + glob(["src/gen/**"]),
    manifest_dir = "rs/registry/canister",
    deps = [
        "//rs/registry/canister/protobuf_generator:lib",
        "//rs/test_utilities/compare_dirs",
        "@crate_index//:tempfile",
    ],
)
