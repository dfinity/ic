load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_test")

package(default_visibility = ["//visibility:public"])

# See rs/nervous_system/feature_test.md
BASE_DEPENDENCIES = [
    "//rs/canister_client",
    "//rs/canister_client/sender",
    "//rs/config",
    "//rs/crypto/internal/crypto_lib/types",
    "//rs/crypto/utils/threshold_sig_der",
    "//rs/http_utils",
    "//rs/interfaces/registry",
    "//rs/nervous_system/clients",
    "//rs/nervous_system/common",
    "//rs/nervous_system/common/test_keys",
    "//rs/nervous_system/humanize",
    "//rs/nervous_system/root",
    "//rs/nervous_system/proto",
    "//rs/nns/cmc",
    "//rs/nns/common",
    "//rs/nns/constants",
    "//rs/nns/init",
    "//rs/prep",
    "//rs/protobuf",
    "//rs/registry/canister",
    "//rs/registry/client",
    "//rs/registry/helpers",
    "//rs/registry/keys",
    "//rs/registry/local_store",
    "//rs/registry/nns_data_provider",
    "//rs/registry/nns_data_provider_wrappers",
    "//rs/registry/provisional_whitelist",
    "//rs/registry/routing_table",
    "//rs/registry/subnet_features",
    "//rs/registry/subnet_type",
    "//rs/registry/transport",
    "//rs/types/management_canister_types",
    "//rs/types/types",
    "@crate_index//:anyhow",
    "@crate_index//:base64",
    "@crate_index//:candid",
    "@crate_index//:chrono",
    "@crate_index//:clap_3_2_25",
    "@crate_index//:futures",
    "@crate_index//:hex",
    "@crate_index//:ic-btc-interface",
    "@crate_index//:indexmap",
    "@crate_index//:itertools",
    "@crate_index//:maplit",
    "@crate_index//:pretty_assertions",
    "@crate_index//:prost",
    "@crate_index//:serde",
    "@crate_index//:serde_json",
    "@crate_index//:tempfile",
    "@crate_index//:tokio",
    "@crate_index//:url",
]

# Each target declared in this file may choose either these (release-ready)
# dependencies (`DEPENDENCIES`), or `DEPENDENCIES_WITH_TEST_FEATURES` feature previews.
DEPENDENCIES = BASE_DEPENDENCIES + [
    "//rs/sns/init",
    "//rs/nns/governance",
    "//rs/nns/sns-wasm",
    "//rs/nns/handlers/root/impl:root",
    "//rs/sns/swap",
    "//rs/nns/test_utils",
]

# (Currently not used)
# DEPENDENCIES_WITH_TEST_FEATURES = BASE_DEPENDENCIES + [
#     "//rs/sns/init:init--test_feature",
#     "//rs/nns/governance:governance--test_feature",
#     "//rs/nns/sns-wasm:sns-wasm--test_feature",
#     "//rs/nns/handlers/root/impl:root--test_feature",
#     "//rs/sns/swap:swap--test_feature",
#     "//rs/nns/test_utils:test_utils--test_feature",
# ]

MACRO_DEPENDENCIES = [
    "@crate_index//:async-trait",
    "//rs/registry/admin-derive",
]

DEV_DEPENDENCIES = [
    "//packages/pocket-ic",
    "//rs/pocket_ic_server:pocket-ic-server",
    "//rs/nervous_system/integration_tests:nervous_system_integration_tests",
    "//rs/registry/admin:ic-admin",
]

DEV_DATA = [
    "//rs/nns/governance:governance-canister",
    "//rs/nns/handlers/root/impl:root-canister",
    "//rs/nns/sns-wasm:sns-wasm-canister",
    "//rs/nns/handlers/lifeline/impl:lifeline_canister",
    "//rs/registry/canister:registry-canister",
    "//rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method",
]

DEV_ENV = {
    "GOVERNANCE_CANISTER_WASM_PATH": "$(rootpath //rs/nns/governance:governance-canister)",
    "REGISTRY_CANISTER_WASM_PATH": "$(rootpath //rs/registry/canister:registry-canister)",
    "LEDGER_CANISTER_NOTIFY_METHOD_WASM_PATH": "$(rootpath //rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method)",
    "LIFELINE_CANISTER_WASM_PATH": "$(rootpath //rs/nns/handlers/lifeline/impl:lifeline_canister)",
    "SNS_WASM_CANISTER_WASM_PATH": "$(rootpath //rs/nns/sns-wasm:sns-wasm-canister)",
    "ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/nns/handlers/root/impl:root-canister)",
    "POCKET_IC_BIN": "$(rootpath //rs/pocket_ic_server:pocket-ic-server)",
    "IC_ADMIN_BIN": "$(rootpath //rs/registry/admin:ic-admin)",
}

ALIASES = {}

rust_binary(
    name = "ic-admin",
    testonly = True,
    srcs = glob(["src/**/*.rs"]),
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    deps = DEPENDENCIES,
)

rust_test(
    name = "ic-admin_unit_test",
    crate = ":ic-admin",
    proc_macro_deps = MACRO_DEPENDENCIES,
    deps = DEPENDENCIES,
)

rust_test(
    name = "integration_tests",
    srcs = glob(["tests/**/*.rs"]),
    aliases = ALIASES,
    data = DEV_DATA,
    env = DEV_ENV,
    flaky = False,
    proc_macro_deps = MACRO_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)
