load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("@io_bazel_rules_docker//contrib:passwd.bzl", "passwd_entry", "passwd_file")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_mkdirs")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test")
load("//bazel:defs.bzl", "rust_test_suite_with_extra_srcs")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//packages/ic-ledger-hash-of:ic_ledger_hash_of",
    "//rs/canister_client",
    "//rs/constants",
    "//rs/crypto/ecdsa_secp256k1",
    "//rs/crypto/sha2",
    "//rs/crypto/tree_hash",
    "//rs/crypto/utils/threshold_sig_der",
    "//rs/nns/common",
    "//rs/nns/constants",
    "//rs/nns/governance",
    "//rs/rosetta-api/icp_ledger",
    "//rs/rosetta-api/ledger_canister_blocks_synchronizer:ledger_canister_blocks_synchronizer_lib",
    "//rs/rosetta-api/ledger_canister_core",
    "//rs/rosetta-api/ledger_core",
    "//rs/rosetta-api/rosetta_core:rosetta-core",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/dfn_protobuf",
    "//rs/rust_canisters/on_wire",
    "//rs/types/types",
    "@crate_index//:actix-rt",
    "@crate_index//:actix-web",
    "@crate_index//:anyhow",
    "@crate_index//:base64",
    "@crate_index//:candid",
    "@crate_index//:clap_3_2_25",
    "@crate_index//:hex",
    "@crate_index//:ic-agent",
    "@crate_index//:lazy_static",
    "@crate_index//:num-bigint",
    "@crate_index//:prometheus",
    "@crate_index//:rand",
    "@crate_index//:reqwest",
    "@crate_index//:rolling-file",
    "@crate_index//:serde",
    "@crate_index//:serde_cbor",
    "@crate_index//:serde_json",
    "@crate_index//:strum",
    "@crate_index//:tokio",
    "@crate_index//:tracing",
    "@crate_index//:tracing-appender",
    "@crate_index//:tracing-subscriber",
    "@crate_index//:url",
]

MACRO_DEPENDENCIES = [
    "//rs/rust_canisters/dfn_macro",
    "@crate_index//:async-trait",
    "@crate_index//:serde_derive",
    "@crate_index//:strum_macros",
]

DEV_DEPENDENCIES = [
    "//rs/rosetta-api/ledger_canister_blocks_synchronizer/test_utils",
    "//rs/rosetta-api/test_utils",
    "//rs/types/base_types",
    "@crate_index//:ed25519-consensus",
    "@crate_index//:futures",
    "@crate_index//:ic-cdk",
    "@crate_index//:proptest",
    "@crate_index//:rand_chacha",
]

MACRO_DEV_DEPENDENCIES = []

ALIASES = {
}

ROSETTA_VERSION = "2.0.0"

rust_library(
    name = "rosetta-api",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    crate_name = "ic_rosetta_api",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = ROSETTA_VERSION,
    deps = DEPENDENCIES,
)

rust_binary(
    name = "ic-rosetta-api",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = ROSETTA_VERSION,
    deps = DEPENDENCIES + [":rosetta-api"],
)

rust_test(
    name = "rosetta-api_test",
    aliases = ALIASES,
    crate = ":rosetta-api",
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_test_suite_with_extra_srcs(
    name = "rosetta-api-tests",
    srcs = glob(["tests/*.rs"]),
    aliases = ALIASES,
    data = glob([
        "tests/*.json",
        "tests/*.ros",
    ]) + [
        "@rosetta-cli//:rosetta-cli",
    ],
    env = {
        "CARGO_MANIFEST_DIR": "rs/rosetta-api/",
        "ROSETTA_CLI": "$(rootpath @rosetta-cli//:rosetta-cli)",
    },
    extra_srcs = ["tests/test_utils/mod.rs"],
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    version = ROSETTA_VERSION,
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [":rosetta-api"],
)

# Rosetta docker image

## The text file with the release version

write_file(
    name = "version",
    out = "version.txt",
    content = [ROSETTA_VERSION],
)

## Create a layer with a rosetta user
passwd_entry(
    name = "root_user",
    uid = 0,
    username = "root",
)

passwd_entry(
    name = "rosetta_user",
    home = "/home/rosetta",
    info = "rosetta node user",
    uid = 1002,
    username = "rosetta",
)

passwd_file(
    name = "passwd",
    entries = [
        ":rosetta_user",
        ":root_user",
    ],
)

pkg_tar(
    name = "passwd_tar",
    srcs = [":passwd"],
    mode = "0644",
    package_dir = "etc",
)

pkg_mkdirs(
    name = "data_dir",
    # Unfortunately, rules_docker does not preserve the file ownership:
    # https://github.com/bazelbuild/rules_docker/issues/1928
    #
    # We make the /data directory rwx for everyone so that "rosetta"
    # user could write to that directory.
    attributes = pkg_attributes(
        mode = "0777",
        user = "rosetta",
    ),
    dirs = [
        "/data",
        "/home/rosetta/log",
    ],
)

pkg_tar(
    name = "data_tar",
    srcs = [":data_dir"],
)

## An intermediate image with the passwd file and empty directories.

container_image(
    name = "rosetta_image_base",
    base = "@rust_base//image",
    tags = ["manual"],
    tars = [
        ":passwd_tar",
        ":data_tar",
    ],
)

## The final image we can publish.

container_image(
    name = "rosetta_image",
    base = ":rosetta_image_base",
    directory = "/home/rosetta",
    entrypoint = [
        "/home/rosetta/ic-rosetta-api",
        "--store-location",
        "/data",
    ],
    files = [
        ":ic-rosetta-api",
    ],
    ports = ["8080"],
    tags = ["manual"],
    user = "rosetta",
    workdir = "/home/rosetta",
)

## Run this target with --embed_label flag[1] to specify the image tag.
## [1]: https://bazel.build/reference/command-line-reference#flag--embed_label

container_push(
    name = "push_rosetta_image",
    format = "Docker",
    image = ":rosetta_image",
    registry = "index.docker.io",
    repository = "dfinity/rosetta-api",
    tag = "{BUILD_EMBED_LABEL}",
    tags = ["manual"],
)
