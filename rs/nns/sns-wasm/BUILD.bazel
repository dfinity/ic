load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test")
load("//bazel:canisters.bzl", "rust_canister")
load("//bazel:defs.bzl", "rust_ic_test_suite_with_extra_srcs")
load("//bazel:prost.bzl", "generated_files_check")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "protos",
    srcs = glob(["proto/**"]),
)

# See rs/nervous_system/feature_test.md
BASE_DEPENDENCIES = [
    "//packages/icrc-ledger-types:icrc_ledger_types",
    "//rs/crypto/sha2",
    "//rs/nervous_system/clients",
    "//rs/nervous_system/common",
    "//rs/nervous_system/proto",
    "//rs/nervous_system/runtime",
    "//rs/nns/handlers/root/interface",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/dfn_core",
    "//rs/rust_canisters/dfn_http_metrics",
    "//rs/sns/root",
    "//rs/types/base_types",
    "//rs/types/management_canister_types",
    "//rs/types/types",
    "//rs/utils",
    "@crate_index//:candid",
    "@crate_index//:futures",
    "@crate_index//:ic-cdk",
    "@crate_index//:ic-metrics-encoder",
    "@crate_index//:ic-wasm",
    "@crate_index//:maplit",
    "@crate_index//:prost",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
    "@crate_index//:hex",
    "@crate_index//:serde_json",
]

# Each target declared in this file may choose either these (release-ready)
# dependencies (`DEPENDENCIES`), or `DEPENDENCIES_WITH_TEST_FEATURES` feature previews.
DEPENDENCIES = BASE_DEPENDENCIES + [
    "//rs/sns/governance",
    "//rs/sns/init",
    "//rs/nns/constants",
]

DEPENDENCIES_WITH_TEST_FEATURES = BASE_DEPENDENCIES + [
    "//rs/sns/governance:governance--test_feature",
    "//rs/sns/init:init--test_feature",
    "//rs/nns/constants:constants--test_feature",
]

MACRO_DEPENDENCIES = [
    "@crate_index//:async-trait",
]

DEV_DEPENDENCIES = [
    "//rs/nns/sns-wasm/protobuf_generator:lib",
    "//rs/nns/test_utils",
    "//rs/registry/helpers",
    "//rs/rosetta-api/icrc1",
    "//rs/rosetta-api/icrc1/ledger",
    "//rs/rosetta-api/icp_ledger",
    "//rs/rust_canisters/canister_test",
    "//rs/sns/swap",  # FIXME
    "//rs/state_machine_tests",
    "//rs/test_utilities",
    "//rs/test_utilities/compare_dirs",
    "//rs/test_utilities/types",
    "@crate_index//:candid_parser",
    "@crate_index//:libflate",
    "@crate_index//:pretty_assertions",
    "@crate_index//:tempfile",
    "@crate_index//:tokio",
] + select({
    "@rules_rust//rust/platform:wasm32-unknown-unknown": [],
    "//conditions:default": [
        "//rs/registry/canister",
        "//rs/registry/keys",
        "//rs/interfaces/registry",
    ],
})

MACRO_DEV_DEPENDENCIES = []

ALIASES = {}

rust_library(
    name = "sns-wasm",
    srcs = glob([
        "src/**",
        "gen/**",
    ]),
    aliases = ALIASES,
    crate_name = "ic_sns_wasm",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "1.0.0",
    deps = DEPENDENCIES,
)

rust_library(
    name = "sns-wasm--test_feature",
    srcs = glob([
        "src/**",
        "gen/**",
    ]),
    aliases = ALIASES,
    crate_features = ["test"],
    crate_name = "ic_sns_wasm",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "1.0.0",
    deps = DEPENDENCIES_WITH_TEST_FEATURES,
)

rust_binary(
    name = "generate_did",
    srcs = ["canister/canister.rs"],
    compile_data = ["canister/sns-wasm.did"],
    proc_macro_deps = MACRO_DEPENDENCIES,
    deps = DEPENDENCIES + [":sns-wasm"],
)

rust_canister(
    name = "sns-wasm-canister",
    srcs = ["canister/canister.rs"],
    aliases = ALIASES,
    compile_data = ["canister/sns-wasm.did"],
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":canister/sns-wasm.did",
    deps = DEPENDENCIES + [":sns-wasm"],
)

rust_test(
    name = "canister_unit_test",
    crate = ":_wasm_sns-wasm-canister",
    data = ["canister/sns-wasm.did"],
    env = {"CARGO_MANIFEST_DIR": "rs/nns/sns-wasm"},
)

rust_test(
    name = "sns-wasm_test",
    aliases = ALIASES,
    crate = ":sns-wasm",
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_test(
    name = "sns-wasm_test--test_feature",
    aliases = ALIASES,
    crate = ":sns-wasm--test_feature",
    crate_features = ["test"],
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES_WITH_TEST_FEATURES + DEV_DEPENDENCIES,
)

rust_ic_test_suite_with_extra_srcs(
    name = "sns-wasm_integration_test",
    srcs = glob(
        ["tests/**/*.rs"],
        exclude = [
            "tests/common/mod.rs",
            "tests/check_generated_files.rs",
        ],
    ),
    aliases = ALIASES,
    data = [
        ":sns-wasm-canister",
        "//rs/nns/cmc:cycles-minting-canister",
        "//rs/nns/governance:governance-canister-test",
        "//rs/nns/gtc:genesis-token-canister",
        "//rs/nns/handlers/lifeline/impl:lifeline_canister",
        "//rs/nns/handlers/root/impl:root-canister",
        "//rs/nns/integration_tests:unstoppable-sns-root-canister",
        "//rs/registry/canister:registry-canister",
        "//rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method",
        "//rs/rosetta-api/icrc1/archive:archive_canister",
        "//rs/rosetta-api/icrc1/index:index_canister",
        "//rs/rosetta-api/icrc1/index-ng:index_ng_canister",
        "//rs/rosetta-api/icrc1/ledger:ledger_canister",
        "//rs/sns/governance:sns-governance-canister",
        "//rs/sns/root:sns-root-canister",
        "//rs/sns/swap:sns-swap-canister",
    ],
    env = {
        "CARGO_MANIFEST_DIR": "rs/nns/sns-wasm",
        "GOVERNANCE_CANISTER_TEST_WASM_PATH": "$(rootpath //rs/nns/governance:governance-canister-test)",
        "LEDGER_CANISTER_NOTIFY_METHOD_WASM_PATH": "$(rootpath //rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method)",
        "REGISTRY_CANISTER_WASM_PATH": "$(rootpath //rs/registry/canister:registry-canister)",
        "ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/nns/handlers/root/impl:root-canister)",
        "SNS_WASM_CANISTER_WASM_PATH": "$(rootpath :sns-wasm-canister)",
        "CYCLES_MINTING_CANISTER_WASM_PATH": "$(rootpath //rs/nns/cmc:cycles-minting-canister)",
        "GENESIS_TOKEN_CANISTER_WASM_PATH": "$(rootpath //rs/nns/gtc:genesis-token-canister)",
        "SNS_ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/sns/root:sns-root-canister)",
        "SNS_GOVERNANCE_CANISTER_WASM_PATH": "$(rootpath //rs/sns/governance:sns-governance-canister)",
        "IC_ICRC1_INDEX_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/index:index_canister)",
        "IC_ICRC1_INDEX_NG_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/index-ng:index_ng_canister)",
        "IC_ICRC1_LEDGER_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/ledger:ledger_canister)",
        "SNS_SWAP_CANISTER_WASM_PATH": "$(rootpath //rs/sns/swap:sns-swap-canister)",
        "IC_ICRC1_ARCHIVE_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/archive:archive_canister)",
        "LIFELINE_CANISTER_WASM_PATH": "$(rootpath //rs/nns/handlers/lifeline/impl:lifeline_canister)",
        "UNSTOPPABLE_SNS_ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/nns/integration_tests:unstoppable-sns-root-canister)",
    },
    extra_srcs = ["tests/common/mod.rs"],
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = [":sns-wasm"] + DEPENDENCIES + DEV_DEPENDENCIES,
)

generated_files_check(
    name = "check_generated_files",
    srcs = ["tests/check_generated_files.rs"],
    data = glob(["src/gen/**"]) + [
        ":protos",
        "//rs/nervous_system/proto:protos",
        "//rs/sns/init:protos",
        "//rs/sns/swap:protos",
        "//rs/types/base_types:protos",
    ],
    manifest_dir = "rs/nns/sns-wasm",
    deps = [
        "//rs/nns/sns-wasm/protobuf_generator:lib",
        "//rs/test_utilities/compare_dirs",
        "@crate_index//:tempfile",
    ],
)
