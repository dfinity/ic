INIT Init
NEXT Next
\* Add statements after this line.

\* The following constants determine how many invocations of claim_neuron
\* we allow in total
CONSTANTS
    Claim_Neuron_Process_Id_1 = Claim_Neuron_Process_Id_1 
    Claim_Neuron_Process_Id_2 = Claim_Neuron_Process_Id_2 
    Claim_Neuron_Process_Id_3 = Claim_Neuron_Process_Id_3 
    Claim_Neuron_Process_Ids = {
        Claim_Neuron_Process_Id_1, 
        Claim_Neuron_Process_Id_2
    }

CONSTANTS
    Refresh_Neuron_Process_Id_1 = Refresh_Neuron_Process_Id_1 
    Refresh_Neuron_Process_Id_2 = Refresh_Neuron_Process_Id_2 
    Refresh_Neuron_Process_Id_3 = Refresh_Neuron_Process_Id_3 
    Refresh_Neuron_Process_Ids = {
        \* Refresh_Neuron_Process_Id_1, 
        Refresh_Neuron_Process_Id_2
    }

CONSTANTS
    Disburse_Neuron_Process_Id_1 = Disburse_Neuron_Process_Id_1 
    Disburse_Neuron_Process_Id_2 = Disburse_Neuron_Process_Id_2 
    Disburse_Neuron_Process_Id_3 = Disburse_Neuron_Process_Id_3 
    Disburse_Neuron_Process_Ids = {
        \* Disburse_Neuron_Process_Id_1, 
        Disburse_Neuron_Process_Id_2
    }

CONSTANTS
    Spawn_Neuron_Process_Id_1 = Spawn_Neuron_Process_Id_1
    Spawn_Neuron_Process_Id_2 = Spawn_Neuron_Process_Id_2
    Spawn_Neuron_Process_Ids = {
        Spawn_Neuron_Process_Id_1
        \* , Spawn_Neuron_Process_Id_2
    }

CONSTANTS
    Spawn_Neurons_Process_Id_1 = Spawn_Neuron_Process_Id_1
    Spawn_Neurons_Process_Id_2 = Spawn_Neuron_Process_Id_2
    Spawn_Neurons_Process_Ids = {
        Spawn_Neurons_Process_Id_1
        \* , Spawn_Neuron_Process_Id_2
    }


CONSTANTS
    Disburse_To_Neuron_Process_Id_1 = Disburse_To_Neuron_Process_Id_1
    Disburse_To_Neuron_Process_Id_2 = Disburse_To_Neuron_Process_Id_2
    Disburse_To_Neuron_Process_Ids = {
        Disburse_To_Neuron_Process_Id_1
        \* , Disburse_To_Neuron_Process_Id_2
    }


CONSTANTS
    Split_Neuron_Process_Id_1 = Split_Neuron_Process_Id_1
    Split_Neuron_Process_Id_2 = Split_Neuron_Process_Id_2
    Split_Neuron_Process_Id_3 = Split_Neuron_Process_Id_3
    Split_Neuron_Process_Ids  = {
        Split_Neuron_Process_Id_1
    }


CONSTANTS
    Merge_Neurons_Process_Id_1 = Merge_Neurons_Process_Id_1
    Merge_Neurons_Process_Id_2 = Merge_Neurons_Process_Id_2
    Merge_Neurons_Process_Id_3 = Merge_Neurons_Process_Id_3
    Merge_Neurons_Process_Ids  = {
        Merge_Neurons_Process_Id_1
    }

CONSTANTS
    Spawn_Neurons_Process_Id_1 = Spawn_Neurons_Process_Id_1
    Spawn_Neurons_Process_Ids = {
        Spawn_Neurons_Process_Id_1
    }

CONSTANTS
    Change_Neuron_Fee_Process_Id_1 = Change_Neuron_Fee_Process_Id_1
    Change_Neuron_Fee_Process_Id_2 = Change_Neuron_Fee_Process_Id_2
    Change_Neuron_Fee_Process_Ids = {
        Change_Neuron_Fee_Process_Id_1,
        Change_Neuron_Fee_Process_Id_2
    }

CONSTANTS
    Increase_Neuron_Maturity_Process_Id_1 = Increase_Neuron_Maturity_Process_Id_1
    Increase_Neuron_Maturity_Process_Id_2 = Increase_Neuron_Maturity_Process_Id_2
    Increase_Neuron_Maturity_Process_Ids = {
     Increase_Neuron_Maturity_Process_Id_1,
     Increase_Neuron_Maturity_Process_Id_2
    }

CONSTANT 
    Ledger_Process_Id = Ledger_Process_Id

CONSTANTS 
    Minting_Account_Id = Minting_Account_Id
    Governance_Account_Id_1 = Governance_Account_Id_1
    Governance_Account_Id_2 = Governance_Account_Id_2
    Governance_Account_Id_3 = Governance_Account_Id_3
    User_Account_Id_1 = User_Account_Id_1
    User_Account_Id_2 = User_Account_Id_2
    User_Account_Id_3 = User_Account_Id_3
    Governance_Account_Ids = { 
        Governance_Account_Id_1
        , Governance_Account_Id_2
        , Governance_Account_Id_3
        \* , Governance_Account_Id_4
        \* , Governance_Account_Id_5
    }
    User_Account_Ids = {
        User_Account_Id_1
        \* , User_Account_Id_2
        \* , User_Account_Id_3,
    }
    Account_Ids = { 
        Minting_Account_Id,
        Governance_Account_Id_1, 
        Governance_Account_Id_2,
        Governance_Account_Id_3,
        \* Governance_Account_Id_4,
        \* Governance_Account_Id_5,
        User_Account_Id_1 
        \* , User_Account_Id_2
    }

CONSTANTS
    \* Candidate for optimization: decrease to 0 (probably together with INITIAL_MAX_BALANCE)
    MIN_STAKE = 1
    \* Candidate for optimization: lower the transaction fee (probably together with INITIAL_MAX_BALANCE)
    TRANSACTION_FEE = 0
    MATURITY_BASIS_POINTS = 1


CONSTANTS
    \* Candidate for optimization: lower the initial balance (if we have lower tx fees)
    INITIAL_MAX_BALANCE = 2
    \* Candidate: lower the number of transfers to Cardinality(Claim_Neuron_Ids, Refresh_Neuron_Ids)
    NUMBER_OF_TRANSFERS_CAP = 3
    \* Candidate for optimization: lower the max fee?
    MAX_NEURON_FEE = 1
    MAX_MATURITY = 2

CONSTANTS 
    cached_stake_f = cached_stake_f
    account_f = account_f
    fees_f = fees_f
    maturity_f = maturity_f

CONSTANTS
    OP_QUERY_BALANCE = OP_QUERY_BALANCE 
    OP_TRANSFER = OP_TRANSFER
    TRANSFER_OK = TRANSFER_OK
    TRANSFER_FAIL = TRANSFER_FAIL

SYMMETRY symmetry_permutations

INVARIANT
    \* Can_Stake_Sanity
    \* CachedStakeCappedByBalance
    \* CachedStakeCappedByBalanceWhenNotLocked
    \* NeuronsHaveAtLeastMinStake
    \* Spell out the Full_Invariant to more easily figure out what was violated
    Cached_Stake_Capped_By_Balance_When_Not_Locked
    Neuron_And_Account_Id_By_Neuron_Coherent
    Total_Minting_Does_Not_Exceed_Rewards
    Neurons_Have_Unique_Accounts
    \* Cached_Stake_Not_Underflowing
    Ready_To_Spawn_Ids_Exist
    \* Fees_Smaller_Than_Cached_Stake

\* PROPERTY
\*     Can_Decrease_Stake_Sanity


    
