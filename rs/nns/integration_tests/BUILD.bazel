load("@rules_rust//rust:defs.bzl", "rust_library")
load("//bazel:canisters.bzl", "rust_canister")
load("//bazel:defs.bzl", "rust_ic_test", "rust_ic_test_suite_with_extra_srcs")

package(default_visibility = ["//visibility:public"])

# See rs/nervous_system/feature_test.md
BASE_DEPENDENCIES = [
    "//rs/nervous_system/clients",
    "//rs/nervous_system/common",
    "//rs/nns/cmc",
    "//rs/nns/common",
    "//rs/nns/handlers/lifeline/impl:lifeline",
    "//rs/rosetta-api/icp_ledger",
    "//rs/rosetta-api/ledger_core",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/dfn_core",
    "//rs/rust_canisters/dfn_json",
    "//rs/rust_canisters/dfn_protobuf",
    "//rs/types/base_types",
    "@crate_index//:assert_matches",
    "@crate_index//:bytes",
    "@crate_index//:candid",
    "@crate_index//:futures",
    "@crate_index//:fs_extra",
    "@crate_index//:ic-cdk",
    "@crate_index//:ic-cdk-timers",
    "@crate_index//:ic-stable-structures",
    "@crate_index//:lazy_static",
    "@crate_index//:prometheus-parse",
    "@crate_index//:prost",
    "@crate_index//:strum",
    "@crate_index//:tempfile",
] + select({
    "@rules_rust//rust/platform:wasm32-unknown-unknown": [],
    "//conditions:default": [
        "//packages/icrc-ledger-types:icrc_ledger_types",
        "//rs/canister_client/sender",
        "//rs/config",
        "//rs/crypto",
        "//rs/crypto/sha2",
        "//rs/nervous_system/common/test_keys",
        "//rs/nervous_system/root",
        "//rs/phantom_newtype",
        "//rs/protobuf",
        "//rs/registry/canister",
        "//rs/registry/keys",
        "//rs/registry/routing_table",
        "//rs/registry/subnet_type",
        "//rs/registry/transport",
        "//rs/rosetta-api/tvl/xrc_mock",
        "//rs/rust_canisters/canister_test",
        "//rs/rust_canisters/http_types",
        "//rs/rust_canisters/on_wire",
        "//rs/state_machine_tests",
        "//rs/test_utilities",
        "//rs/types/error_types",
        "//rs/types/management_canister_types",
        "//rs/types/types",
        "@crate_index//:crossbeam-channel",
        "@crate_index//:hex",
        "@crate_index//:ic-xrc-types",
        "@crate_index//:maplit",
        "@crate_index//:rand",
        # "@crate_index//:randomkit",
        "@crate_index//:rustc-hash",
        "@crate_index//:serde",
        "@crate_index//:serde_bytes",
        "@crate_index//:tokio",
        "@crate_index//:wat",
    ],
})

# Each target declared in this file may choose either these (release-ready)
# dependencies (`DEPENDENCIES`), or `DEPENDENCIES_WITH_TEST_FEATURES` feature previews.
DEPENDENCIES = BASE_DEPENDENCIES + [
    "//rs/sns/init",
    "//rs/nns/governance",
    "//rs/nns/sns-wasm",
    "//rs/nns/handlers/root/impl:root",
    "//rs/sns/swap",
] + select({
    "@rules_rust//rust/platform:wasm32-unknown-unknown": [],
    "//conditions:default": [
        "//rs/nns/constants",
        "//rs/nns/test_utils",
        "//rs/nns/gtc",
    ],
})

DEPENDENCIES_WITH_TEST_FEATURES = BASE_DEPENDENCIES + [
    "//rs/sns/init:init--test_feature",
    "//rs/nns/governance:governance--test_feature",
    "//rs/nns/sns-wasm:sns-wasm--test_feature",
    "//rs/nns/handlers/root/impl:root--test_feature",
    "//rs/sns/swap:swap--test_feature",
] + select({
    "@rules_rust//rust/platform:wasm32-unknown-unknown": [],
    "//conditions:default": [
        "//rs/nns/constants:constants--test_feature",
        "//rs/nns/test_utils:test_utils--test_feature",
        "//rs/nns/gtc:gtc--test_feature",
    ],
})

MACRO_DEPENDENCIES = [
    "@crate_index//:async-trait",
    "@crate_index//:ic-cdk-macros",
] + select({
    "@rules_rust//rust/platform:wasm32-unknown-unknown": [
    ],
    "//conditions:default": [
        "//rs/nns/test_utils_macros",
    ],
})

DEV_DEPENDENCIES = [
    "//rs/types/types_test_utils",
]

MACRO_DEV_DEPENDENCIES = []

ALIASES = {}

DEV_DATA = [
    ":canister-playground-canister",
    ":governance-mem-test-canister",
    ":unstoppable-canister",
    ":mem-utils-test-canister",
    "//rs/nns/cmc:cycles-minting-canister",
    "//rs/nns/governance:governance-canister",
    "//rs/nns/governance:governance-canister-test",
    "//rs/nns/gtc:genesis-token-canister",
    "//rs/nns/handlers/root/impl:root-canister",
    "//rs/nns/sns-wasm:sns-wasm-canister",
    "//rs/registry/canister:registry-canister",
    "//rs/rosetta-api/icp_ledger/archive:ledger-archive-node-canister-wasm",
    "//rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm",
    "//rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method",
    "//rs/rosetta-api/icrc1/archive:archive_canister",
    "//rs/rosetta-api/icrc1/index:index_canister",
    "//rs/rosetta-api/icrc1/index-ng:index_ng_canister",
    "//rs/rosetta-api/icrc1/ledger:ledger_canister",
    "//rs/rosetta-api/tvl/xrc_mock:xrc_mock_canister",
    "//rs/sns/governance:sns-governance-canister",
    "//rs/sns/root:sns-root-canister",
    "//rs/sns/swap:sns-swap-canister",
    "src/neurons.csv",
    "@cycles-ledger.wasm.gz//file",
    "@subnet_rental_canister//file",
]

DEV_ENV = {
    "CARGO_MANIFEST_DIR": "rs/nns/integration_tests",
    "CYCLES_LEDGER_WASM_PATH": "$(rootpath @cycles-ledger.wasm.gz//file)",
    "GOVERNANCE_CANISTER_WASM_PATH": "$(rootpath //rs/nns/governance:governance-canister)",
    "GOVERNANCE_CANISTER_TEST_WASM_PATH": "$(rootpath //rs/nns/governance:governance-canister-test)",
    "REGISTRY_CANISTER_WASM_PATH": "$(rootpath //rs/registry/canister:registry-canister)",
    "LEDGER_CANISTER_WASM_PATH": "$(rootpath //rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm)",
    "LEDGER_CANISTER_NOTIFY_METHOD_WASM_PATH": "$(rootpath //rs/rosetta-api/icp_ledger/ledger:ledger-canister-wasm-notify-method)",
    "LEDGER_ARCHIVE_NODE_CANISTER_WASM_PATH": "$(rootpath //rs/rosetta-api/icp_ledger/archive:ledger-archive-node-canister-wasm)",
    "IC_ICRC1_ARCHIVE_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/archive:archive_canister)",
    "IC_ICRC1_INDEX_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/index:index_canister)",
    "IC_ICRC1_INDEX_NG_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/index-ng:index_ng_canister)",
    "IC_ICRC1_LEDGER_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/ledger:ledger_canister)",
    "GENESIS_TOKEN_CANISTER_WASM_PATH": "$(rootpath //rs/nns/gtc:genesis-token-canister)",
    "CYCLES_MINTING_CANISTER_WASM_PATH": "$(rootpath //rs/nns/cmc:cycles-minting-canister)",
    "MEM_UTILS_TEST_CANISTER_WASM_PATH": "$(rootpath :mem-utils-test-canister)",
    "GOVERNANCE_MEM_TEST_CANISTER_WASM_PATH": "$(rootpath :governance-mem-test-canister)",
    "CANISTER_PLAYGROUND_CANISTER_WASM_PATH": "$(rootpath :canister-playground-canister)",
    "SNS_WASM_CANISTER_WASM_PATH": "$(rootpath //rs/nns/sns-wasm:sns-wasm-canister)",
    "UNSTOPPABLE_CANISTER_WASM_PATH": "$(rootpath :unstoppable-canister)",
    "SNS_GOVERNANCE_CANISTER_WASM_PATH": "$(rootpath //rs/sns/governance:sns-governance-canister)",
    "SNS_ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/sns/root:sns-root-canister)",
    "SNS_SWAP_CANISTER_WASM_PATH": "$(rootpath //rs/sns/swap:sns-swap-canister)",
    "ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/nns/handlers/root/impl:root-canister)",
    "NEURON_CSV_PATH": "rs/nns/integration_tests/src/neurons.csv",
    "XRC_MOCK_WASM_PATH": "$(rootpath //rs/rosetta-api/tvl/xrc_mock:xrc_mock_canister)",
    "SUBNET_RENTAL_CANISTER_WASM_PATH": "$(rootpath @subnet_rental_canister//file)",
}

rust_library(
    name = "integration_tests",
    testonly = True,
    srcs = glob(["src/**/*.rs"]),
    aliases = ALIASES,
    crate_features = ["test"],
    crate_name = "ic_nns_integration_tests",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = DEPENDENCIES_WITH_TEST_FEATURES,
)

rust_canister(
    name = "mem-utils-test-canister",
    testonly = True,
    srcs = ["test_canisters/mem_utils_test.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":test_canisters/empty.did",
    deps = DEPENDENCIES + [":integration_tests"],
)

rust_canister(
    name = "canister-playground-canister",
    testonly = True,
    srcs = ["test_canisters/canister_playground_canister.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":test_canisters/empty.did",
    deps = DEPENDENCIES + [":integration_tests"],
)

rust_canister(
    name = "governance-mem-test-canister",
    testonly = True,
    srcs = ["test_canisters/governance_mem_test_canister.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":test_canisters/empty.did",
    deps = DEPENDENCIES + [":integration_tests"],
)

rust_canister(
    name = "unstoppable-canister",
    testonly = True,
    srcs = ["test_canisters/unstoppable_canister.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":test_canisters/empty.did",
    deps = DEPENDENCIES + [
        ":integration_tests",
    ],
)

rust_canister(
    name = "unstoppable-sns-root-canister",
    testonly = True,
    srcs = ["test_canisters/unstoppable_sns_root_canister.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":test_canisters/empty.did",
    deps = DEPENDENCIES + [
        ":integration_tests",
        "//rs/nervous_system/runtime",
        "//rs/sns/root",
    ],
)

rust_ic_test_suite_with_extra_srcs(
    name = "integration_tests_test",
    srcs = glob(
        ["src/**/*.rs"],
        exclude = [
            "src/lib.rs",
            # Tests that are broken out into their own rules below,
            # mostly due to long running times.
            "src/copy_inactive_neurons_to_stable_memory.rs",
            "src/governance_mem_test.rs",
            "src/canister_playground.rs",
        ],
    ),
    aliases = ALIASES,
    data = DEV_DATA,
    env = DEV_ENV,
    extra_srcs = ["src/lib.rs"],
    flaky = True,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES_WITH_TEST_FEATURES + DEV_DEPENDENCIES,
)

# To run this test use `bazel test --config=alltests //rs/nns/integration_tests:governance_mem_test`
# See the .bazelrc for more configuration information.
rust_ic_test(
    name = "governance_mem_test",
    size = "large",
    srcs = [
        "src/governance_mem_test.rs",
        "src/lib.rs",
    ],
    aliases = ALIASES,
    crate_root = "src/governance_mem_test.rs",
    data = DEV_DATA,
    env = DEV_ENV,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    tags = ["manual"],
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

# To run this test use `bazel test --config=alltests //rs/nns/integration_tests:canister_playground` --test_output=all
# See the .bazelrc for more configuration information.
rust_ic_test(
    name = "canister_playground",
    srcs = [
        "src/canister_playground.rs",
        "src/lib.rs",
    ],
    aliases = ALIASES,
    crate_root = "src/canister_playground.rs",
    data = DEV_DATA,
    env = DEV_ENV,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    tags = ["manual"],
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

# To run this test,
#
#     bazel \
#         test \
#         --test_env=SSH_AUTH_SOCK \
#         //rs/nns/integration_tests:copy_inactive_neurons_to_stable_memory_test
#
# The only unusual thing in this command is `--test_env=SSH_AUTH_SOCK`. That causes the
# SSH_AUTH_SOCK environment variable to be "forwarded" from your shell to the sandbox where the test
# is run. This authorizes the test to download the test data.
#
# Additionally, the following flags are recommended (but not required):
#
# --test_output=streamed
# --test_arg=--nocapture
#
# These let you watch the progress of the test, rather than only being able to see the output only
# at the end.
#
# See the .bazelrc for more configuration information.
rust_ic_test(
    name = "copy_inactive_neurons_to_stable_memory_test",
    size = "large",
    srcs = [
        "src/copy_inactive_neurons_to_stable_memory.rs",
        "src/lib.rs",
    ],
    aliases = ALIASES,
    crate_root = "src/copy_inactive_neurons_to_stable_memory.rs",
    data = DEV_DATA,
    env = DEV_ENV,
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    tags = [
        "manual",  # CI should not be downloading nns_state.tar.zst.
        "requires-network",  # Because mainnet state is downloaded (and used).
    ],
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)
