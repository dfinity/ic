load("@rules_rust//cargo:defs.bzl", "cargo_build_script")
load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("//bazel:canisters.bzl", "rust_canister")

package(default_visibility = ["//visibility:public"])

exports_files(["canister/recovery.did"])

# See rs/nervous_system/feature_test.md
BASE_DEPENDENCIES = [
    # Keep sorted.
    "//rs/crypto/sha2",
    "//rs/nervous_system/clients",
    "//rs/nervous_system/common",
    "//rs/nervous_system/proxied_canister_calls_tracker",
    "//rs/nervous_system/root",
    "//rs/nervous_system/runtime",
    "//rs/nns/common",
    "//rs/nns/constants",
    "//rs/nns/handlers/recovery/interface",
    "//rs/nns/handlers/root/impl:root",
    "//rs/nns/handlers/root/interface",
    "//rs/protobuf",
    "//rs/registry/keys",
    "//rs/registry/routing_table",
    "//rs/registry/transport",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/http_types",
    "//rs/rust_canisters/on_wire",
    "//rs/types/base_types",
    "//rs/types/management_canister_types",
    "@crate_index//:build-info",
    "@crate_index//:candid",
    "@crate_index//:ed25519-dalek",
    "@crate_index//:ic-cdk",
    "@crate_index//:ic-cdk-timers",
    "@crate_index//:ic-metrics-encoder",
    "@crate_index//:itertools",
    "@crate_index//:lazy_static",
    "@crate_index//:maplit",
    "@crate_index//:prost",
    "@crate_index//:rand",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
]

# Each target declared in this file may choose either these (release-ready)
# dependencies (`DEPENDENCIES`), or `DEPENDENCIES_WITH_TEST_FEATURES` feature previews.
DEPENDENCIES = BASE_DEPENDENCIES

DEPENDENCIES_WITH_TEST_FEATURES = BASE_DEPENDENCIES

MACRO_DEPENDENCIES = [
    # Keep sorted.
    "//rs/nervous_system/common/build_metadata",
    "@crate_index//:ic-cdk-macros",
]

BUILD_DEPENDENCIES = [
    # Keep sorted.
    "@crate_index//:build-info-build",
]

ALIASES = {}

DEV_DEPENDENCIES = [
    # Keep sorted.
    "//rs/state_machine_tests",
    "@crate_index//:candid_parser",
    "@crate_index//:pretty_assertions",
    "@crate_index//:tokio",
] + select({
    "@rules_rust//rust/platform:wasm32-unknown-unknown": [],
    "//conditions:default": [
        "//rs/rust_canisters/canister_test",
        "//rs/nns/handlers/root/impl/protobuf_generator:lib",
        "//rs/nns/test_utils",
        "//rs/types/types",
        "//rs/test_utilities",
        "//rs/test_utilities/compare_dirs",
        "//rs/registry/canister:canister--test_feature",
        "@crate_index//:tempfile",
        "@crate_index//:assert_matches",
        "@crate_index//:hex",
    ],
})

LIB_SRCS = glob(
    ["src/**"],
    exclude = [
        "**/*tests.rs",
        "**/tests/**",
    ],
)

cargo_build_script(
    name = "build_script",
    srcs = ["build.rs"],
    aliases = ALIASES,
    data = [],  # build script data (e.g. template files) goes here
    version = "0.9.0",
    deps = BUILD_DEPENDENCIES,
)

rust_library(
    name = "recovery",
    srcs = LIB_SRCS,
    aliases = ALIASES,
    crate_name = "ic_nns_handler_recovery",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = DEPENDENCIES + [":build_script"],
)

rust_library(
    name = "recovery--test_feature",
    srcs = LIB_SRCS,
    aliases = ALIASES,
    crate_features = ["test"],
    crate_name = "ic_nns_handler_recovery",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = DEPENDENCIES_WITH_TEST_FEATURES + [":build_script"],
)

rust_test(
    name = "recovery_test",
    srcs = glob(["src/**/*.rs"]),
    deps = [":recovery--test_feature"] + DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_canister(
    name = "recovery-canister",
    srcs = ["canister/canister.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    service_file = ":canister/recovery.did",
    deps = DEPENDENCIES + [
        ":build_script",
        ":recovery",
    ],
)

rust_test(
    name = "recovery-canister-tests",
    srcs = glob(["canister/**/*.rs"]),
    crate_root = "canister/canister.rs",
    data = [
        ":recovery-canister",
        "//rs/pocket_ic_server:pocket-ic-server",
        "//rs/registry/canister:registry-canister",
    ],
    env = {
        "RECOVERY_WASM_PATH": "$(rootpath :recovery-canister)",
        "REGISTRY_WASM_PATH": "$(rootpath //rs/registry/canister:registry-canister)",
        "POCKET_IC_BIN": "$(rootpath //rs/pocket_ic_server:pocket-ic-server)",
    },
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.9.0",
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [
        ":build_script",
        ":recovery",
        "//packages/pocket-ic",
        "//rs/registry/subnet_type",
    ],
)
