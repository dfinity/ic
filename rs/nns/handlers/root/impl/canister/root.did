type AddCanisterRequest = record {
  arg : blob;
  initial_cycles : nat64;
  wasm_module : blob;
  name : text;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type CanisterAction = variant { Start; Stop };
type CanisterIdRecord = record { canister_id : principal };
type CanisterInstallMode = variant { reinstall; upgrade; install };
type CanisterStatusResult = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  idle_cycles_burned_per_day : opt nat;
  module_hash : opt blob;
  reserved_cycles : opt nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type ChangeCanisterControllersError = record {
  code : opt int32;
  description : text;
};
type ChangeCanisterControllersRequest = record {
  target_canister_id : principal;
  new_controllers : vec principal;
};
type ChangeCanisterControllersResponse = record {
  change_canister_controllers_result : ChangeCanisterControllersResult;
};
type ChangeCanisterControllersResult = variant {
  Ok;
  Err : ChangeCanisterControllersError;
};
type ChangeCanisterRequest = record {
  arg : blob;
  wasm_module : blob;
  stop_before_installing : bool;
  mode : CanisterInstallMode;
  canister_id : principal;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : opt nat;
  controllers : vec principal;
  reserved_cycles_limit : opt nat;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type StopOrStartCanisterRequest = record {
  action : CanisterAction;
  canister_id : principal;
};
service : {
  add_nns_canister : (AddCanisterRequest) -> ();
  canister_status : (CanisterIdRecord) -> (CanisterStatusResult);
  change_canister_controllers : (ChangeCanisterControllersRequest) -> (
      ChangeCanisterControllersResponse,
    );
  change_nns_canister : (ChangeCanisterRequest) -> ();
  get_build_metadata : () -> (text) query;
  stop_or_start_nns_canister : (StopOrStartCanisterRequest) -> ();
}