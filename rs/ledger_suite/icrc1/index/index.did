type TxId = nat;

type Account = record { owner : principal; subaccount : opt blob };

type SubAccount = blob;

type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : nat64;
  transfer : opt Transfer;
};

type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  spender : Account;
};

type Burn = record {
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};

type Mint = record {
  to : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};

type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};

type GetAccountTransactionsArgs = record {
    account : Account;
    // The txid of the last transaction seen by the client.
    // If None then the results will start from the most recent
    // txid.
    start : opt TxId;
    // Maximum number of transactions to fetch.
    max_results : nat;
};

type TransactionWithId = record {
  id : TxId;
  transaction : Transaction;
};

type GetTransactions = record {
  transactions : vec TransactionWithId;
  // The txid of the oldest transaction the account has
  oldest_tx_id : opt TxId;
};

type GetTransactionsErr = record {
  message : text;
};

type GetTransactionsResult = variant {
  Ok : GetTransactions;
  Err : GetTransactionsErr;
};

type ListSubaccountsArgs = record {
    owner: principal;
    start: opt SubAccount;
};

// The initialization parameters of the Index canister.
type InitArgs = record {
    ledger_id : principal;
};

service : (InitArgs) -> {
  get_account_transactions : (GetAccountTransactionsArgs) -> (GetTransactionsResult);
  ledger_id : () -> (principal) query;
  list_subaccounts : (ListSubaccountsArgs) -> (vec SubAccount) query;
}
