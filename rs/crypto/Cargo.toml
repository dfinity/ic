[package]
name = "ic-crypto"
version.workspace = true
authors.workspace = true
edition.workspace = true
description.workspace = true
documentation.workspace = true

[dependencies]
async-trait = { workspace = true }
bincode = "1.2.1"
clap = { version = "3.2.25", features = ["derive"] }
ed25519-consensus = "2.0.1"
hex = { workspace = true }
ic-adapter-metrics-server = { path = "../monitoring/adapter_metrics_server" }
ic-async-utils = { path = "../async_utils" }
ic-base-types = { path = "../types/base_types" }
ic-config = { path = "../config" }
ic-crypto-ecdsa-secp256r1 = { path = "ecdsa_secp256r1" }
ic-crypto-ecdsa-secp256k1 = { path = "ecdsa_secp256k1" }
ic-crypto-interfaces-sig-verification = { path = "interfaces/sig_verification" }
ic-crypto-internal-basic-sig-ed25519 = { path = "internal/crypto_lib/basic_sig/ed25519" }
ic-crypto-internal-csp = { path = "internal/crypto_service_provider" }
ic-crypto-internal-logmon = { path = "internal/logmon" }
ic-crypto-internal-seed = { path = "internal/crypto_lib/seed" }
ic-crypto-internal-threshold-sig-bls12381 = { path = "internal/crypto_lib/threshold_sig/bls12_381" }
ic-crypto-internal-threshold-sig-ecdsa = { path = "internal/crypto_lib/threshold_sig/tecdsa" }
ic-crypto-internal-types = { path = "internal/crypto_lib/types" }
ic-crypto-standalone-sig-verifier = { path = "standalone-sig-verifier" }
ic-crypto-tls-cert-validation = { path = "node_key_validation/tls_cert_validation" }
ic-crypto-tls-interfaces = { path = "tls_interfaces" }
ic-crypto-utils-basic-sig = { path = "utils/basic_sig" }
ic-crypto-utils-tls = { path = "utils/tls" }
ic-interfaces = { path = "../interfaces" }
ic-interfaces-registry = { path = "../interfaces/registry" }
ic-logger = { path = "../monitoring/logger" }
ic-metrics = { path = "../monitoring/metrics" }
ic-protobuf = { path = "../protobuf" }
ic-registry-client-fake = { path = "../registry/fake" }
ic-registry-client-helpers = { path = "../registry/helpers" }
ic-registry-keys = { path = "../registry/keys" }
ic-registry-proto-data-provider = { path = "../registry/proto_data_provider" }
ic-types = { path = "../types/types" }
parking_lot = "0.12.1"
# We use the `dangerous_configuration` flag for rustls to be able to set custom `ClientCertVerifier` and
# `ServerCertVerifier` in order to verify node certificates.
rustls = { version = "0.21.12", features = ["dangerous_configuration"] }
serde = { workspace = true }
slog = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
tempfile = "3.1.0"
tokio = { workspace = true }

[dev-dependencies]
assert_matches = { workspace = true }
criterion = "0.5"
ic-certification-test-utils = { path = "../certification/test-utils" }
ic-crypto-for-verification-only = { path = "for_verification_only" }
ic-crypto-internal-basic-sig-der-utils = { path = "internal/crypto_lib/basic_sig/der_utils" }
ic-crypto-internal-basic-sig-ecdsa-secp256r1 = { path = "internal/crypto_lib/basic_sig/ecdsa_secp256r1" }
ic-crypto-internal-basic-sig-ecdsa-secp256k1 = { path = "internal/crypto_lib/basic_sig/ecdsa_secp256k1" }
ic-crypto-internal-basic-sig-rsa-pkcs1 = { path = "internal/crypto_lib/basic_sig/rsa_pkcs1" }
ic-crypto-internal-csp-proptest-utils = { path = "internal/crypto_service_provider/csp_proptest_utils" }
ic-crypto-internal-csp-test-utils = { path = "internal/csp_test_utils" }
ic-crypto-internal-test-vectors = { path = "internal/test_vectors" }
ic-crypto-internal-threshold-sig-ecdsa-test-utils = { path = "internal/crypto_lib/threshold_sig/tecdsa/test_utils" }
ic-crypto-internal-tls = { path = "internal/crypto_lib/tls" }
ic-crypto-node-key-generation = { path = "node_key_generation" }
ic-crypto-node-key-validation = { path = "node_key_validation" }
ic-crypto-sha2 = { path = "sha2" }
ic-crypto-tecdsa = { path = "tecdsa" }
ic-crypto-temp-crypto = { path = "temp_crypto" }
ic-crypto-test-utils = { path = "test_utils" }
ic-crypto-test-utils-tls = { path = "test_utils/tls" }
ic-crypto-test-utils-canister-sigs = { path = "test_utils/canister_sigs" }
ic-crypto-test-utils-canister-threshold-sigs = { path = "test_utils/canister_threshold_sigs" }
ic-crypto-test-utils-csp = { path = "test_utils/csp" }
ic-crypto-test-utils-keygen = { path = "test_utils/keygen" }
ic-crypto-test-utils-keys = { path = "test_utils/keys" }
ic-crypto-test-utils-local-csp-vault = { path = "test_utils/local_csp_vault" }
ic-crypto-test-utils-metrics = { path = "test_utils/metrics" }
ic-crypto-test-utils-multi-sigs = { path = "test_utils/multi_sigs" }
ic-crypto-test-utils-ni-dkg = { path = "test_utils/ni-dkg" }
ic-crypto-test-utils-reproducible-rng = { path = "test_utils/reproducible_rng" }
ic-crypto-tree-hash = { path = "tree_hash" }
ic-interfaces-registry-mocks = { path = "../interfaces/registry/mocks" }
ic-registry-client = { path = "../registry/client" }
ic-test-utilities-in-memory-logger = { path = "../test_utilities/in_memory_logger" }
ic-test-utilities-registry = { path = "../test_utilities/registry" }
ic-test-utilities-time = { path = "../test_utilities/time" }
ic-types-test-utils = { path = "../types/types_test_utils" }
k256 = { workspace = true }
maplit = "1.0.2"
mockall = { workspace = true }
proptest = "1.0"
proptest-derive = "0.3.0"
prost = { workspace = true }
rand = "0.8"
rand_chacha = "0.3"
rsa = "0.9.2"
sha2 = "0.10.2"
simple_asn1 = { workspace = true }

[[bench]]
name = "basic_sig"
harness = false

[[bench]]
name = "hash"
harness = false

[[bench]]
name = "threshold_sig"
harness = false

[[bench]]
name = "idkg"
harness = false

[[bench]]
name = "tecdsa"
harness = false

[[bench]]
name = "ni_dkg"
harness = false

[[bench]]
name = "multi_sig"
harness = false

[[bench]]
name = "canister_sig"
harness = false

[[bench]]
name = "tschnorr"
harness = false
