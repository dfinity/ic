syntax = "proto3";
package registry.node.v1;

// A connection endpoint.
message ConnectionEndpoint {
  // The IP address. Senders SHOULD use dotted-quad notation for IPv4 addresses
  // and RFC5952 representation for IPv6 addresses (which means that IPv6
  // addresses are *not* enclosed in `[` and `]`, as they are not written
  // with the port in the same field).
  //
  // Clients MUST be prepared to accept IPv6 addresses in the forms shown in
  // RFC4291.
  string ip_addr = 1;
  uint32 port = 2;

  reserved 4;
}

message IPv4InterfaceConfig {
  string ip_addr = 1;
  repeated string gateway_ip_addr = 2;
  uint32 prefix_length = 3;
}

// A node: one machine running a replica instance.
message NodeRecord {
  // The endpoint where this node receives xnet messages.
  ConnectionEndpoint xnet = 5;

  // The endpoint where this node receives https requests.
  ConnectionEndpoint http = 6;

  // The id of the node operator that added this node.
  bytes node_operator_id = 15;

  // The SEV-SNP chip_identifier for this node.
  optional bytes chip_id = 16;

  // ID of the HostOS version to run.
  optional string hostos_version_id = 17;

  // IPv4 interface configuration
  IPv4InterfaceConfig public_ipv4_config = 18;

  // Domain name, which resolves into Node's IPv4 and IPv6.
  // If a Node is to be converted into the ApiBoundaryNode, the domain field should be set.
  optional string domain = 19;

  reserved 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14;
  reserved "node_id";
  reserved "gossip_advert";
  reserved "gossip_request";
  reserved "gossip_artifact";
  reserved "dcop_principal_id";
  reserved "p2p_flow_endpoints";
  reserved "prometheus_metrics_http";
  reserved "public_api";
  reserved "private_api";
  reserved "prometheus_metrics";
  reserved "transport_tls_certificate";
  reserved "xnet_api";
}
