syntax = "proto3";

package types.v1;

import "types/v1/types.proto";

message DkgMessage {
  NodeId signer = 5;
  bytes signature = 1;
  string replica_version = 2;
  NiDkgId dkg_id = 3;
  bytes dealing = 4;
}

message DkgPayload {
  oneof val {
    Summary summary = 1;
    DkgDataPayload data_payload = 3;
  }

  reserved 2;
  reserved "dealings";
}

message DkgDataPayload {
  repeated DkgMessage dealings = 1;
  uint64 summary_height = 2;
}

message Summary {
  reserved 8;
  reserved "transcripts_for_new_subnets";
  uint64 registry_version = 1;
  uint64 interval_length = 2;
  uint64 next_interval_length = 3;
  uint64 height = 4;
  repeated TaggedNiDkgTranscript current_transcripts_deprecated = 5;
  repeated TaggedNiDkgTranscript next_transcripts_deprecated = 6;
  repeated NiDkgConfig configs = 7;
  repeated InitialDkgAttemptCount initial_dkg_attempts = 9;
  repeated CallbackIdedNiDkgTranscript transcripts_for_remote_subnets = 10;
  repeated NiDkgTranscript current_transcripts_new = 11;
  repeated NiDkgTranscript next_transcripts_new = 12;
}

message TaggedNiDkgTranscript {
  NiDkgTranscript transcript = 1;
  NiDkgTag tag = 2;
  optional MasterPublicKeyId key_id = 3;
}

message CallbackIdedNiDkgTranscript {
  NiDkgId dkg_id = 1;
  NiDkgTranscriptResult transcript_result = 2;
  uint64 callback_id = 3;
}

message NiDkgTranscriptResult {
  oneof val {
    NiDkgTranscript transcript = 1;
    bytes error_string = 2;
  }
}

// A transcript for non-interactive Distributed Key Generation (NI-DKG).
message NiDkgTranscript {
  NiDkgId dkg_id = 1;
  uint32 threshold = 2;
  repeated NodeId committee = 3;
  uint64 registry_version = 4;
  bytes internal_csp_transcript = 5;
}

// A configuration for non-interactive Distributed Key Generation (NI-DKG).
message NiDkgConfig {
  NiDkgId dkg_id = 1;
  uint32 max_corrupt_dealers = 2;
  repeated NodeId dealers = 3;
  uint32 max_corrupt_receivers = 4;
  repeated NodeId receivers = 5;
  uint32 threshold = 6;
  uint64 registry_version = 7;
  NiDkgTranscript resharing_transcript = 8;
}

message InitialDkgAttemptCount {
  bytes target_id = 1;
  uint32 attempt_no = 2;
}
