syntax = "proto3";
package state.ingress.v1;

import "types/v1/types.proto";

message IngressStatusUnknown {}

message IngressStatusProcessing {
  types.v1.UserId user_id = 1;
  uint64 time_nanos = 2;
  types.v1.PrincipalId receiver = 3;
}

message IngressStatusReceived {
  types.v1.UserId user_id = 1;
  uint64 time_nanos = 2;
  types.v1.PrincipalId receiver = 3;
}

message IngressStatusCompleted {
  types.v1.UserId user_id = 1;
  oneof wasm_result {
    bytes reply = 2;
    string reject = 3;
  }
  uint64 time_nanos = 4;
  types.v1.PrincipalId receiver = 5;
}

enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  // 1xx -- `RejectCode::SysFatal`
  ERROR_CODE_SUBNET_OVERSUBSCRIBED = 101;
  ERROR_CODE_MAX_NUMBER_OF_CANISTERS_REACHED = 102;
  // 2xx -- `RejectCode::SysTransient`
  ERROR_CODE_CANISTER_QUEUE_FULL = 201;
  ERROR_CODE_INGRESS_MESSAGE_TIMEOUT = 202;
  ERROR_CODE_CANISTER_QUEUE_NOT_EMPTY = 203;
  ERROR_CODE_INGRESS_HISTORY_FULL = 204;
  ERROR_CODE_CANISTER_ID_ALREADY_EXISTS = 205;
  ERROR_CODE_STOP_CANISTER_REQUEST_TIMEOUT = 206;
  ERROR_CODE_CANISTER_OUT_OF_CYCLES = 207;
  ERROR_CODE_CERTIFIED_STATE_UNAVAILABLE = 208;
  ERROR_CODE_CANISTER_INSTALL_CODE_RATE_LIMITED = 209;
  ERROR_CODE_CANISTER_HEAP_DELTA_RATE_LIMITED = 210;
  // 3xx -- `RejectCode::DestinationInvalid`
  ERROR_CODE_CANISTER_NOT_FOUND = 301;
  reserved 302, 303, 304;
  ERROR_CODE_CANISTER_SNAPSHOT_NOT_FOUND = 305;
  // 4xx -- `RejectCode::CanisterReject`
  ERROR_CODE_INSUFFICIENT_MEMORY_ALLOCATION = 402;
  ERROR_CODE_INSUFFICIENT_CYCLES_FOR_CREATE_CANISTER = 403;
  ERROR_CODE_SUBNET_NOT_FOUND = 404;
  ERROR_CODE_CANISTER_NOT_HOSTED_BY_SUBNET = 405;
  ERROR_CODE_CANISTER_REJECTED_MESSAGE = 406;
  ERROR_CODE_UNKNOWN_MANAGEMENT_MESSAGE = 407;
  ERROR_CODE_INVALID_MANAGEMENT_PAYLOAD = 408;
  // 5xx -- `RejectCode::CanisterError`
  reserved 501;
  ERROR_CODE_CANISTER_TRAPPED = 502;
  ERROR_CODE_CANISTER_CALLED_TRAP = 503;
  ERROR_CODE_CANISTER_CONTRACT_VIOLATION = 504;
  ERROR_CODE_CANISTER_INVALID_WASM = 505;
  ERROR_CODE_CANISTER_DID_NOT_REPLY = 506;
  ERROR_CODE_CANISTER_OUT_OF_MEMORY = 507;
  ERROR_CODE_CANISTER_STOPPED = 508;
  ERROR_CODE_CANISTER_STOPPING = 509;
  ERROR_CODE_CANISTER_NOT_STOPPED = 510;
  ERROR_CODE_CANISTER_STOPPING_CANCELLED = 511;
  ERROR_CODE_CANISTER_INVALID_CONTROLLER = 512;
  ERROR_CODE_CANISTER_FUNCTION_NOT_FOUND = 513;
  ERROR_CODE_CANISTER_NON_EMPTY = 514;
  reserved 515, 516;
  ERROR_CODE_QUERY_CALL_GRAPH_LOOP_DETECTED = 517;
  reserved 518, 519;
  ERROR_CODE_INSUFFICIENT_CYCLES_IN_CALL = 520;
  ERROR_CODE_CANISTER_WASM_ENGINE_ERROR = 521;
  ERROR_CODE_CANISTER_INSTRUCTION_LIMIT_EXCEEDED = 522;
  reserved 523;
  ERROR_CODE_CANISTER_MEMORY_ACCESS_LIMIT_EXCEEDED = 524;
  ERROR_CODE_QUERY_CALL_GRAPH_TOO_DEEP = 525;
  ERROR_CODE_QUERY_CALL_GRAPH_TOTAL_INSTRUCTION_LIMIT_EXCEEDED = 526;
  ERROR_CODE_COMPOSITE_QUERY_CALLED_IN_REPLICATED_MODE = 527;
  ERROR_CODE_QUERY_TIME_LIMIT_EXCEEDED = 528;
  ERROR_CODE_QUERY_CALL_GRAPH_INTERNAL = 529;
  ERROR_CODE_INSUFFICIENT_CYCLES_IN_COMPUTE_ALLOCATION = 530;
  ERROR_CODE_INSUFFICIENT_CYCLES_IN_MEMORY_ALLOCATION = 531;
  ERROR_CODE_INSUFFICIENT_CYCLES_IN_MEMORY_GROW = 532;
  ERROR_CODE_RESERVED_CYCLES_LIMIT_EXCEEDED_IN_MEMORY_ALLOCATION = 533;
  ERROR_CODE_RESERVED_CYCLES_LIMIT_EXCEEDED_IN_MEMORY_GROW = 534;
  ERROR_CODE_INSUFFICIENT_CYCLES_IN_MESSAGE_MEMORY_GROW = 535;
  ERROR_CODE_CANISTER_METHOD_NOT_FOUND = 536;
  ERROR_CODE_CANISTER_WASM_MODULE_NOT_FOUND = 537;
  ERROR_CODE_CANISTER_ALREADY_INSTALLED = 538;
  ERROR_CODE_CANISTER_WASM_MEMORY_LIMIT_EXCEEDED = 539;
}

message IngressStatusFailed {
  types.v1.UserId user_id = 1;
  reserved 2;
  reserved "error_code_old";
  string err_description = 3;
  uint64 time_nanos = 4;
  types.v1.PrincipalId receiver = 5;
  ErrorCode err_code = 6;
}

message IngressStatusDone {
  types.v1.UserId user_id = 1;
  uint64 time_nanos = 2;
  types.v1.PrincipalId receiver = 3;
}

message PruningEntry {
  uint64 time_nanos = 1;
  repeated bytes messages = 2;
}

message IngressStatus {
  oneof status {
    IngressStatusUnknown unknown = 1;
    IngressStatusProcessing processing = 2;
    IngressStatusReceived received = 3;
    IngressStatusCompleted completed = 4;
    IngressStatusFailed failed = 5;
    IngressStatusDone done = 6;
  }
}

message IngressStatusEntry {
  bytes message_id = 1;
  IngressStatus status = 2;
}

message IngressHistoryState {
  repeated IngressStatusEntry statuses = 1;
  repeated PruningEntry pruning_times = 2;
  // The earliest time in `pruning_times` with associated message IDs that
  // may still be of type completed or failed.
  uint64 next_terminal_time = 3;
}

message Ingress {
  types.v1.UserId source = 1;
  types.v1.CanisterId receiver = 2;
  string method_name = 3;
  bytes method_payload = 4;
  bytes message_id = 5;
  uint64 expiry_time_nanos = 6;
  // It may be present for a subnet message.
  // Represents the id of the canister that the message is targeting.
  types.v1.CanisterId effective_canister_id = 7;
}
