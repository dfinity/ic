syntax = "proto3";
package state.canister_state_bits.v1;

import "google/protobuf/wrappers.proto";
import "state/ingress/v1/ingress.proto";
import "state/queues/v1/queues.proto";
import "state/v1/metadata.proto";
import "types/v1/management_canister_types.proto";
import "types/v1/types.proto";

message CallContext {
  message Ingress {
    types.v1.UserId user_id = 1;
    bytes message_id = 2;
  }
  message CanisterUpdateOrQuery {
    types.v1.CanisterId canister_id = 1;
    uint64 callback_id = 2;
    // If non-zero, this originates from a best-effort canister update call.
    uint32 deadline_seconds = 3;
  }
  // System task is either a Heartbeat or a GlobalTimer.
  message SystemTask {}

  oneof call_origin {
    Ingress ingress = 1;
    CanisterUpdateOrQuery canister_update = 2;
    types.v1.UserId query = 3;
    CanisterUpdateOrQuery canister_query = 4;
    SystemTask system_task = 7;
  }
  bool responded = 5;
  state.queues.v1.Funds available_funds = 6;
  bool deleted = 8;
  uint64 time_nanos = 9;
  uint64 instructions_executed = 10;
  state.queues.v1.RequestMetadata metadata = 11;
}

message CallContextEntry {
  uint64 call_context_id = 1;
  CallContext call_context = 2;
}

message WasmClosure {
  uint32 func_idx = 1;
  uint32 env = 2;
}

message Callback {
  uint64 call_context_id = 1;
  WasmClosure on_reply = 2;
  WasmClosure on_reject = 3;
  WasmClosure on_cleanup = 4;
  state.queues.v1.Cycles cycles_sent = 5;
  types.v1.CanisterId originator = 6;
  types.v1.CanisterId respondent = 7;
  state.queues.v1.Cycles prepayment_for_response_execution = 8;
  state.queues.v1.Cycles prepayment_for_response_transmission = 9;
  // If non-zero, this is a best-effort call.
  uint32 deadline_seconds = 10;
}

message CallbackEntry {
  uint64 callback_id = 1;
  Callback callback = 2;
}

message CallContextManager {
  uint64 next_call_context_id = 1;
  uint64 next_callback_id = 2;
  repeated CallContextEntry call_contexts = 3;
  repeated CallbackEntry callbacks = 4;
}

message CyclesAccount {
  // Cycle balance is stored as u128::to_bytes_le()
  bytes cycles_balance = 1;
  reserved 2;
  reserved "max_exec_cycles";
}

message Global {
  oneof global {
    int32 i32 = 1;
    int64 i64 = 2;
    float f32 = 3;
    double f64 = 4;
    bytes v128 = 5;
  }
}

message WasmMethod {
  enum SystemMethod {
    SYSTEM_METHOD_UNSPECIFIED = 0;
    SYSTEM_METHOD_CANISTER_START = 1;
    SYSTEM_METHOD_CANISTER_INIT = 2;
    SYSTEM_METHOD_CANISTER_PRE_UPGRADE = 3;
    SYSTEM_METHOD_CANISTER_POST_UPGRADE = 4;
    SYSTEM_METHOD_CANISTER_INSPECT_MESSAGE = 5;
    SYSTEM_METHOD_CANISTER_HEARTBEAT = 6;
    reserved 7; // deprecated SYSTEM_METHOD_EMPTY
    SYSTEM_METHOD_CANISTER_GLOBAL_TIMER = 8;
  }
  oneof wasm_method {
    string update = 1;
    string query = 2;
    SystemMethod system = 3;
    string composite_query = 4;
  }
}

enum CustomSectionType {
  CUSTOM_SECTION_TYPE_UNSPECIFIED = 0;
  CUSTOM_SECTION_TYPE_PUBLIC = 1;
  CUSTOM_SECTION_TYPE_PRIVATE = 2;
}

message WasmCustomSection {
  CustomSectionType visibility = 1;
  bytes content = 2;
  optional bytes hash = 3;
}

message WasmMetadata {
  map<string, WasmCustomSection> custom_sections = 1;
}

enum NextScheduledMethod {
  NEXT_SCHEDULED_METHOD_UNSPECIFIED = 0;
  NEXT_SCHEDULED_METHOD_GLOBAL_TIMER = 1;
  NEXT_SCHEDULED_METHOD_HEARTBEAT = 2;
  NEXT_SCHEDULED_METHOD_MESSAGE = 3;
}

message ExecutionStateBits {
  repeated Global exported_globals = 1;
  uint32 heap_size = 2;
  repeated WasmMethod exports = 3;
  uint64 last_executed_round = 4;
  WasmMetadata metadata = 5;
  optional bytes binary_hash = 6;
  optional NextScheduledMethod next_scheduled_method = 7;
}

message StopCanisterContext {
  message Ingress {
    types.v1.UserId sender = 1;
    bytes message_id = 2;
    optional uint64 call_id = 5;
  }

  message Canister {
    types.v1.CanisterId sender = 1;
    uint64 reply_callback = 2;
    state.queues.v1.Funds funds = 3;
    state.queues.v1.Cycles cycles = 4;
    optional uint64 call_id = 5;
    // If non-zero, this is a best-effort canister update call.
    uint32 deadline_seconds = 6;
  }

  oneof context {
    Ingress ingress = 1;
    Canister canister = 2;
  }
}

message CanisterStatusRunning {
  CallContextManager call_context_manager = 1;
}

message CanisterStatusStopping {
  CallContextManager call_context_manager = 1;
  repeated StopCanisterContext stop_contexts = 2;
}

message CanisterStatusStopped {}

message ExecutionTask {
  enum CanisterTask {
    CANISTER_TASK_UNSPECIFIED = 0;
    CANISTER_TASK_HEARTBEAT = 1;
    CANISTER_TASK_TIMER = 2;
  }

  message AbortedExecution {
    oneof input {
      state.queues.v1.Request request = 1;
      state.queues.v1.Response response = 2;
      ingress.v1.Ingress ingress = 3;
      CanisterTask task = 5;
    }
    // The execution cost that has already been charged from the canister.
    // Retried execution does not have to pay for it again.
    state.queues.v1.Cycles prepaid_execution_cycles = 4;
  }

  message AbortedInstallCode {
    oneof message {
      state.queues.v1.Request request = 1;
      ingress.v1.Ingress ingress = 2;
    }
    // The execution cost that has already been charged from the canister.
    // Retried execution does not have to pay for it again.
    state.queues.v1.Cycles prepaid_execution_cycles = 3;
    reserved "request_id";
    optional uint64 call_id = 4;
  }

  oneof task {
    AbortedExecution aborted_execution = 1;
    AbortedInstallCode aborted_install_code = 2;
  }
}

enum CyclesUseCase {
  CYCLES_USE_CASE_UNSPECIFIED = 0;
  CYCLES_USE_CASE_MEMORY = 1;
  CYCLES_USE_CASE_COMPUTE_ALLOCATION = 2;
  CYCLES_USE_CASE_INGRESS_INDUCTION = 3;
  CYCLES_USE_CASE_INSTRUCTIONS = 4;
  CYCLES_USE_CASE_REQUEST_AND_RESPONSE_TRANSMISSION = 5;
  CYCLES_USE_CASE_UNINSTALL = 6;
  CYCLES_USE_CASE_CANISTER_CREATION = 7;
  CYCLES_USE_CASE_ECDSA_OUTCALLS = 8;
  CYCLES_USE_CASE_HTTP_OUTCALLS = 9;
  CYCLES_USE_CASE_DELETED_CANISTERS = 10;
  CYCLES_USE_CASE_NON_CONSUMED = 11;
  CYCLES_USE_CASE_BURNED_CYCLES = 12;
}

message ConsumedCyclesByUseCase {
  CyclesUseCase use_case = 1;
  types.v1.NominalCycles cycles = 2;
}

message CanisterChangeFromUser {
  types.v1.PrincipalId user_id = 1;
}

message CanisterChangeFromCanister {
  types.v1.PrincipalId canister_id = 1;
  optional uint64 canister_version = 2;
}

message CanisterCreation {
  repeated types.v1.PrincipalId controllers = 1;
}

message CanisterCodeUninstall {}

message CanisterCodeDeployment {
  types.v1.CanisterInstallMode mode = 1;
  bytes module_hash = 2;
}

message CanisterControllersChange {
  repeated types.v1.PrincipalId controllers = 1;
}

message CanisterChange {
  uint64 timestamp_nanos = 1;
  uint64 canister_version = 2;
  oneof change_origin {
    CanisterChangeFromUser canister_change_from_user = 3;
    CanisterChangeFromCanister canister_change_from_canister = 4;
  }
  oneof change_details {
    CanisterCreation canister_creation = 5;
    CanisterCodeUninstall canister_code_uninstall = 6;
    CanisterCodeDeployment canister_code_deployment = 7;
    CanisterControllersChange canister_controllers_change = 8;
  }
}

message CanisterHistory {
  repeated CanisterChange changes = 1;
  uint64 total_num_changes = 2;
}

message Unsigned128 {
  bytes raw = 1;
}

message TotalQueryStats {
  Unsigned128 num_calls = 1;
  Unsigned128 num_instructions = 2;
  Unsigned128 ingress_payload_size = 3;
  Unsigned128 egress_payload_size = 4;
}

message WasmChunkData {
  bytes hash = 1;
  uint64 index = 2;
  uint64 length = 3;
}

message WasmChunkStoreMetadata {
  repeated WasmChunkData chunks = 1;
  uint64 size = 2;
}

enum LogVisibility {
  LOG_VISIBILITY_UNSPECIFIED = 0;
  LOG_VISIBILITY_CONTROLLERS = 1;
  LOG_VISIBILITY_PUBLIC = 2;
}

message CanisterLogRecord {
  uint64 idx = 1;
  uint64 timestamp_nanos = 2;
  bytes content = 3;
}

message SnapshotId {
  bytes content = 1;
}

message CanisterStateBits {
  reserved 1;
  reserved "controller";
  uint64 last_full_execution_round = 2;
  CallContextManager call_context_manager = 3;
  uint64 compute_allocation = 4;
  int64 accumulated_priority = 5;
  reserved 6;
  reserved "query_allocation";
  ExecutionStateBits execution_state_bits = 7;
  uint64 memory_allocation = 8;
  reserved 9;
  reserved "cycles_account";
  reserved 10;
  reserved "icp_balance";
  oneof canister_status {
    CanisterStatusRunning running = 11;
    CanisterStatusStopping stopping = 12;
    CanisterStatusStopped stopped = 13;
  }
  reserved 14;
  reserved "scheduled_to_run";
  uint64 scheduled_as_first = 15;
  reserved 16;
  reserved "skipped_round_due_to_low_cycles";
  uint64 skipped_round_due_to_no_messages = 17;
  // In how many rounds a canister is executed.
  uint64 executed = 18;
  reserved 19;
  reserved "executed_and_exhausted_its_messages";
  bytes certified_data = 20;
  uint64 interrupted_during_execution = 21;
  types.v1.NominalCycles consumed_cycles_since_replica_started = 22;
  uint64 freeze_threshold = 23;
  reserved 24;
  reserved "stable_memory_size";
  repeated types.v1.PrincipalId controllers = 25;
  state.queues.v1.Cycles cycles_balance = 26;
  // The size of the canister's stable memory in bytes.
  uint64 stable_memory_size64 = 27;
  // The memory delta debit of this canister. This is tracked for the purposes
  // of rate limiting the amount of memory delta generated per round.
  uint64 heap_delta_debit = 28;
  // The instruction debit for install_code messages of this canister. This is
  // tracked for the purposes of rate limiting the install_code messages.
  uint64 install_code_debit = 29;
  // Contains tasks that need to be executed before processing any input of the
  // canister.
  repeated ExecutionTask task_queue = 30;
  // Time of last charge for resource allocations.
  google.protobuf.UInt64Value time_of_last_allocation_charge_nanos = 31;
  // Postponed charges that are not applied to `cycles_balance` yet.
  state.queues.v1.Cycles cycles_debit = 32;
  // Canister global timer, in nanoseconds since Unix epoch.
  optional uint64 global_timer_nanos = 33;
  // Canister version.
  uint64 canister_version = 34;
  reserved 35;
  repeated ConsumedCyclesByUseCase consumed_cycles_since_replica_started_by_use_cases = 36;
  CanisterHistory canister_history = 37;
  // Resource reservation cycles.
  state.queues.v1.Cycles reserved_balance = 38;
  // The user-specified upper limit on `reserved_balance`.
  state.queues.v1.Cycles reserved_balance_limit = 39;
  // Maps tracking chunks in the Wasm chunk store.
  WasmChunkStoreMetadata wasm_chunk_store_metadata = 40;
  // Statistics on query execution for entire lifetime of canister.
  TotalQueryStats total_query_stats = 41;
  // Log visibility for the canister.
  LogVisibility log_visibility = 42;
  // Log records of the canister.
  repeated CanisterLogRecord canister_log_records = 43;
  // The index of the next log record to be created.
  uint64 next_canister_log_record_idx = 44;
  // The Wasm memory limit. This is a field in developer-visible canister
  // settings that allows the developer to limit the usage of the Wasm memory
  // by the canister to leave some room in 4GiB for upgrade calls.
  // See the interface specification for more information.
  optional uint64 wasm_memory_limit = 45;
  // The next local snapshot ID.
  uint64 next_snapshot_id = 46;
  reserved 47;
}
