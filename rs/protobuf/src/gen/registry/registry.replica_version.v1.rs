// This file is @generated by prost-build.
/// Information about a Replica version
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct ReplicaVersionRecord {
    /// The hex-formatted SHA-256 hash of the archive file served by 'release_package_urls'
    #[prost(string, tag = "6")]
    pub release_package_sha256_hex: ::prost::alloc::string::String,
    /// The URLs against which a HTTP GET request will return a release package
    /// that corresponds to this version
    #[prost(string, repeated, tag = "7")]
    pub release_package_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The SEV-SNP measurements that belong to this release
    #[prost(message, optional, tag = "9")]
    pub guest_launch_measurements: ::core::option::Option<GuestLaunchMeasurements>,
}
#[derive(
    serde::Serialize, serde::Deserialize, candid::CandidType, Eq, Clone, PartialEq, ::prost::Message,
)]
pub struct GuestLaunchMeasurements {
    /// A list of valid SEV-SNP measurements. One release can have multiple valid
    /// measurements, e.g. depending on the kernel command line used to launch the
    /// guest. Must be non-empty.
    #[prost(message, repeated, tag = "1")]
    pub guest_launch_measurements: ::prost::alloc::vec::Vec<GuestLaunchMeasurement>,
}
#[derive(
    serde::Serialize, serde::Deserialize, candid::CandidType, Eq, Clone, PartialEq, ::prost::Message,
)]
pub struct GuestLaunchMeasurement {
    /// SEV-SNP measurement (48 bytes)
    #[prost(bytes = "vec", tag = "1")]
    pub measurement: ::prost::alloc::vec::Vec<u8>,
    /// Metadata about how the measurement was obtained
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<GuestLaunchMeasurementMetadata>,
}
#[derive(
    serde::Serialize, serde::Deserialize, candid::CandidType, Eq, Clone, PartialEq, ::prost::Message,
)]
pub struct GuestLaunchMeasurementMetadata {
    /// Kernel command line string used to launch the guest
    #[prost(string, tag = "1")]
    pub kernel_cmdline: ::prost::alloc::string::String,
}
/// A list of blessed versions of the IC Replica
///
/// New versions are added here after a vote has been accepted by token
/// holders. Subnetworks can then be upgraded to any of those version.
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct BlessedReplicaVersions {
    /// A list of version information ids.
    #[prost(string, repeated, tag = "1")]
    pub blessed_version_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
