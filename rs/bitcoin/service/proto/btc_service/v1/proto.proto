syntax = "proto3";

package btc_service.v1;

message BtcServiceGetSuccessorsRequest {
  // Used by the adapter to filter out previously sent blocks from its
  // `GetSuccessorsResponse`.
  repeated bytes processed_block_hashes = 1;
  // This field is used by the adapter to start a breadth-first search its
  // known headers to determine which blocks to respond with in
  // `GetSuccessorsResponse::blocks` field.
  bytes anchor = 2;
}

message BtcServiceGetSuccessorsResponse {
  // The blocks that the adapter has knowledge of based on the anchor and
  // processed block hashes provided in the `GetSuccessorsRequest`.
  repeated bytes blocks = 1;
  // The next block headers that used to notify the Bitcoin virtual canister
  // that more blocks are available.
  repeated bytes next = 2;
}

message BtcServiceSendTransactionRequest {
  bytes transaction = 1;
}

message BtcServiceSendTransactionResponse {}

service BtcService {
  rpc GetSuccessors(BtcServiceGetSuccessorsRequest) returns (BtcServiceGetSuccessorsResponse);
  rpc SendTransaction(BtcServiceSendTransactionRequest) returns (BtcServiceSendTransactionResponse);
}
