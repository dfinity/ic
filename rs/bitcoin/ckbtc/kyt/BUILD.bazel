load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("//bazel:canisters.bzl", "rust_canister")
load("//bazel:defs.bzl", "rust_ic_test")

package(default_visibility = ["//visibility:public"])

rust_library(
    name = "kyt",
    srcs = ["src/lib.rs"],
    crate_name = "ic_ckbtc_kyt",
    deps = [
        "@crate_index//:candid",
        "@crate_index//:serde",
    ],
)

rust_canister(
    name = "kyt_canister",
    srcs = [
        "src/dashboard.rs",
        "src/json_rpc.rs",
        "src/main.rs",
    ],
    compile_data = [
        "templates/dashboard.html",
    ],
    proc_macro_deps = ["@crate_index//:ic-cdk-macros"],
    service_file = "kyt.did",
    deps = [
        ":kyt",
        "//rs/rust_canisters/http_types",
        "@crate_index//:askama",
        "@crate_index//:candid",
        "@crate_index//:ciborium",
        "@crate_index//:hex",
        "@crate_index//:ic-cdk",
        "@crate_index//:ic-metrics-encoder",
        "@crate_index//:ic-stable-structures",
        "@crate_index//:num-traits",
        "@crate_index//:serde",
        "@crate_index//:serde_json",
        "@crate_index//:time",
    ],
)

rust_test(
    name = "kyt_tests",
    crate = "_wasm_kyt_canister",
    data = ["kyt.did"],
    env = {
        "CARGO_MANIFEST_DIR": "rs/bitcoin/ckbtc/kyt",
    },
    deps = ["@crate_index//:candid_parser"],
)

rust_ic_test(
    name = "kyt_integration_test",
    srcs = ["tests/tests.rs"],
    data = [":kyt_canister"],
    env = {
        "CARGO_MANIFEST_DIR": "rs/bitcoin/ckbtc/kyt",
        "IC_CKBTC_KYT_WASM_PATH": "$(rootpath :kyt_canister)",
    },
    deps = [
        ":kyt",
        "//rs/state_machine_tests",
        "//rs/test_utilities/load_wasm",
        "@crate_index//:assert_matches",
        "@crate_index//:candid",
    ],
)
