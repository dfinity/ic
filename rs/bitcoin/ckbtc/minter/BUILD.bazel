load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("//bazel:canisters.bzl", "rust_canister")
load("//bazel:defs.bzl", "rust_ic_test")

package(default_visibility = ["//visibility:public"])

LIB_DEPS = [
    # Keep sorted.
    "//packages/icrc-ledger-client-cdk:icrc_ledger_client_cdk",
    "//packages/icrc-ledger-types:icrc_ledger_types",
    "//rs/bitcoin/kyt:btc_kyt_lib",
    "//rs/crypto/getrandom_for_wasm",
    "//rs/crypto/secp256k1",
    "//rs/crypto/sha2",
    "//rs/ledger_suite/common/ledger_core",
    "//rs/ledger_suite/icrc1/ledger",
    "//rs/rust_canisters/canister_log",
    "//rs/types/base_types",
    "//rs/types/management_canister_types",
    "//rs/utils/ensure",
    "@crate_index//:bech32",
    "@crate_index//:bs58",
    "@crate_index//:candid",
    "@crate_index//:ciborium",
    "@crate_index//:hex",
    "@crate_index//:ic-btc-interface",
    "@crate_index//:ic-cdk",
    "@crate_index//:ic-metrics-encoder",
    "@crate_index//:ic-stable-structures",
    "@crate_index//:ic0",
    "@crate_index//:lazy_static",
    "@crate_index//:minicbor",
    "@crate_index//:num-traits",
    "@crate_index//:ripemd",
    "@crate_index//:scopeguard",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
]

LIB_PROC_MACRO_DEPS = [
    # Keep sorted.
    "@crate_index//:async-trait",
    "@crate_index//:ic-cdk-macros",
    "@crate_index//:minicbor-derive",
]

rust_library(
    name = "ckbtc_minter_lib",
    srcs = glob(
        ["src/**"],
        exclude = ["src/main.rs"],
    ),
    crate_name = "ic_ckbtc_minter",
    proc_macro_deps = LIB_PROC_MACRO_DEPS,
    version = "0.1.0",
    deps = LIB_DEPS,
)

alias(
    name = "minter",
    actual = ":ckbtc_minter_lib",
)

[
    rust_canister(
        name = name,
        srcs = ["src/main.rs"],
        compile_data = [":ckbtc_minter.did"],
        crate_features = features,
        crate_name = "ic_ckbtc_minter_canister",
        proc_macro_deps = [
            # Keep sorted.
            "@crate_index//:ic-cdk-macros",
        ],
        rustc_env = {
            "CKBTC_MINTER_DID_PATH": "$(execpath :ckbtc_minter.did)",
        },
        service_file = ":ckbtc_minter.did",
        deps = [
            # Keep sorted.
            ":ckbtc_minter_lib",
            "//packages/icrc-ledger-types:icrc_ledger_types",
            "//rs/crypto/getrandom_for_wasm",
            "//rs/rust_canisters/canister_log",
            "//rs/rust_canisters/http_types",
            "@crate_index//:candid",
            "@crate_index//:ic-btc-interface",
            "@crate_index//:ic-cdk",
            "@crate_index//:ic-metrics-encoder",
            "@crate_index//:serde_json",
        ],
    )
    for (name, features) in [
        # Production version without debug assertions.
        (
            "ckbtc_minter",
            [],
        ),
        # Test version with internal consistency checks.
        (
            "ckbtc_minter_debug",
            ["self_check"],
        ),
    ]
]

rust_test(
    name = "ckbtc_minter_lib_unit_tests",
    crate = ":ckbtc_minter_lib",
    deps = [
        # Keep sorted.
        "@crate_index//:bitcoin",
        "@crate_index//:mockall",
        "@crate_index//:proptest",
        "@crate_index//:simple_asn1",
        "@crate_index//:tokio",
    ],
)

rust_test(
    name = "ckbtc_unit_tests",
    crate = ":_wasm_ckbtc_minter",
    data = [":ckbtc_minter.did"],
    env = {
        "CARGO_MANIFEST_DIR": "rs/bitcoin/ckbtc/minter",
    },
    deps = [
        # Keep sorted.
        "@crate_index//:candid_parser",
    ],
)

rust_test(
    name = "ckbtc_minter_replay_events_tests",
    srcs = ["tests/replay_events.rs"],
    data = [
        "test_resources/mainnet_events.gz",
        "test_resources/testnet_events.gz",
    ],
    deps = [
        # Keep sorted.
        ":ckbtc_minter_lib",
        "@crate_index//:bitcoin",
        "@crate_index//:candid",
        "@crate_index//:flate2",
        "@crate_index//:ic-agent",
        "@crate_index//:serde",
        "@crate_index//:tokio",
    ],
)

# integration tests defined in ckbtc minter tests/
rust_ic_test(
    name = "ckbtc_minter_tests",
    srcs = ["tests/tests.rs"],
    data = [
        ":ckbtc_minter_debug.wasm",
        "//rs/bitcoin/kyt:btc_kyt_canister",
        "//rs/bitcoin/mock:bitcoin_canister_mock",
        "//rs/ledger_suite/icrc1/ledger:ledger_canister",
    ],
    env = {
        "CARGO_MANIFEST_DIR": "rs/bitcoin/ckbtc/minter",
        "IC_CKBTC_MINTER_WASM_PATH": "$(rootpath :ckbtc_minter_debug.wasm)",
        "IC_ICRC1_LEDGER_WASM_PATH": "$(rootpath //rs/ledger_suite/icrc1/ledger:ledger_canister)",
        "IC_BTC_KYT_WASM_PATH": "$(rootpath //rs/bitcoin/kyt:btc_kyt_canister)",
        "IC_BITCOIN_CANISTER_MOCK_WASM_PATH": "$(rootpath //rs/bitcoin/mock:bitcoin_canister_mock)",
    },
    deps = [
        # Keep sorted.
        ":ckbtc_minter_lib",
        "//packages/icrc-ledger-types:icrc_ledger_types",
        "//rs/bitcoin/kyt:btc_kyt_lib",
        "//rs/bitcoin/mock",
        "//rs/config",
        "//rs/ledger_suite/icrc1",
        "//rs/ledger_suite/icrc1/ledger",
        "//rs/rust_canisters/canister_test",
        "//rs/rust_canisters/http_types",
        "//rs/state_machine_tests",
        "//rs/test_utilities/load_wasm",
        "//rs/types/base_types",
        "//rs/types/types",
        "@crate_index//:assert_matches",
        "@crate_index//:bitcoin",
        "@crate_index//:candid",
        "@crate_index//:ic-btc-interface",
        "@crate_index//:minicbor",
        "@crate_index//:serde_bytes",
        "@crate_index//:serde_json",
    ],
)
