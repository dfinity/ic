/// This const represents the default version that the adapter will support.
/// This value will be used to filter out Bitcoin nodes that the adapter deems
/// to far behind to interact with.
///
/// 70001 was related back in Feb 2013. It made the last significant change to
/// the version message by adding the `relay` field.
///
/// [Version Handshake](https://en.bitcoin.it/wiki/Version_Handshake)
/// [Protocol Versions](https://developer.bitcoin.org/reference/p2p_networking.html#protocol-versions)
pub const MINIMUM_VERSION_NUMBER: u32 = 70001;

/// This const is used to provide a based buffer size for how many messages can be stashed into the
/// channel. If there are more messages, the sender will end up waiting.
pub const DEFAULT_CHANNEL_BUFFER_SIZE: usize = 64;

/// This field contains the datatype used to store height of a Bitcoin block
pub type BlockHeight = u32;

#[cfg(test)]
pub mod test_common {

    use std::{
        collections::{HashSet, VecDeque},
        net::SocketAddr,
    };

    use bitcoin::{consensus::deserialize, Block};
    use hex::FromHex;

    use crate::{Channel, ChannelError, Command};

    /// This is a hex dump of the first block on the BTC network: 00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048
    pub const BLOCK_1_ENCODED: &str = "010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e362990101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000";

    /// This is a hex dump of the first block on the BTC network: 000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd
    pub const BLOCK_2_ENCODED: &str = "010000004860eb18bf1b1620e37e9490fc8a427514416fd75159ab86688e9a8300000000d5fdcc541e25de1c7a5addedf24858b8bb665c9f36ef744ee42c316022c90f9bb0bc6649ffff001d08d2bd610101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d010bffffffff0100f2052a010000004341047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77ac00000000";

    /// This struct is used to capture Commands generated by managers.
    pub struct TestChannel {
        /// This field holds Commands that are generated by managers.
        received_commands: VecDeque<Command>,
        /// The connections available for the test to interact with.
        available_connections: Vec<SocketAddr>,
        /// The addresses that disconnect was called on.
        disconnected_addresses: HashSet<SocketAddr>,
    }

    impl TestChannel {
        pub fn new(available_connections: Vec<SocketAddr>) -> Self {
            Self {
                received_commands: VecDeque::new(),
                available_connections,
                disconnected_addresses: HashSet::new(),
            }
        }
    }

    impl TestChannel {
        pub fn command_count(&self) -> usize {
            self.received_commands.len()
        }

        pub fn pop_front(&mut self) -> Option<Command> {
            self.received_commands.pop_front()
        }

        pub fn pop_back(&mut self) -> Option<Command> {
            self.received_commands.pop_back()
        }

        pub fn has_discarded_address(&self, addr: &SocketAddr) -> bool {
            self.disconnected_addresses.contains(addr)
        }
        pub fn add_address(&mut self, addr: SocketAddr) {
            self.available_connections.push(addr);
        }
    }

    impl Channel for TestChannel {
        fn send(&mut self, command: Command) -> Result<(), ChannelError> {
            self.received_commands.push_back(command);
            Ok(())
        }

        fn available_connections(&self) -> Vec<SocketAddr> {
            self.available_connections
                .iter()
                .filter(|addr| !self.disconnected_addresses.contains(addr))
                .cloned()
                .collect()
        }

        fn discard(&mut self, addr: &SocketAddr) {
            self.disconnected_addresses.insert(*addr);
        }
    }

    pub struct TestState {
        pub block_1: Block,
        pub block_2: Block,
    }

    impl TestState {
        pub fn setup() -> Self {
            let encoded_block_1 =
                Vec::from_hex(BLOCK_1_ENCODED).expect("failed to covert hex to vec");
            let block_1: Block = deserialize(&encoded_block_1).expect("failed to decoded block 1");
            let encoded_block_2 =
                Vec::from_hex(BLOCK_2_ENCODED).expect("failed to covert hex to vec");
            let block_2: Block = deserialize(&encoded_block_2).expect("failed to decoded block 2");

            TestState { block_1, block_2 }
        }
    }
}
