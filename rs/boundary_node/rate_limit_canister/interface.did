type Version = nat64;   // Represents the config version number
type Timestamp = nat64; // Represents timestamp in nanoseconds since the epoch (1970-01-01)
type RuleId = text;     // Unique identifier for each rule


// Input structure for defining a rule with mandatory fields within a config
type InputRule = record {
  id: RuleId;        // Unique identifier for the rule
  rule_raw: blob;    // Raw rule data (in binary format), expected to be a valid json object
  description: text; // Textual description of the rule
};

// Output structure for rules
// Optional fields rule_raw and description may remain hidden while the rule is under confidentiality restrictions
type OutputRule = record {
  id: RuleId;                        // Unique identifier for the rule
  rule_raw: opt blob;                // Raw rule data (in binary format), expected to be a valid json object, none if the rule is currently confidential
  description: opt text;             // Textual description of the rule, none if the rule is currently confidential
  disclosed_at: opt Timestamp;       // Timestamp when the rule was disclosed, none if the rule is still confidential
  disclosed_in_version: opt Version; // Version in which the rule was disclosed, none if the rule is still confidential
};

type OutputConfig = record {
  rules: vec OutputRule;
};

// Response structure for returning the requested configuration and associated metadata
type OutputConfigResponse = record {
    version: Version;         // Version of the configuration
    active_since: Timestamp;  // Time when this configuration became added (became active)
    config: OutputConfig;     // Contains the list of rules
};

// Verbose details of an individual rule
// Optional rule_raw and description fields are for restricted publicly viewing access
type OutputRuleMetadata = record {
  id: RuleId;                      // Unique identifier for the rule
  rule_raw: opt blob;              // Raw rule data (binary format), expected to be a valid json object, none if the rule is currently confidential
  description: opt text;           // Textual description of the rule, none if the rule is currently confidential
  disclosed_at: opt Timestamp;     // Timestamp when the rule was disclosed, none if the rule is still confidential
  disclosed_in_version: Version;   // Version when the rule was disclosed, none if the rule is still confidential
  added_in_version: Version;       // Version when the rule was added (became active)
  removed_in_version: opt Version; // Version when the rule was deactivated (removed), none if the rule is still active
};

type GetRuleByIdResponse = variant {
  Ok: OutputRuleMetadata;
  Err: text;
}

type GetConfigResponse = variant {
  Ok: OutputConfigResponse;
  Err: text;
};

type DiscloseRulesResponse = variant {
  Ok;
  Err: text;
};

type OverwriteConfigResponse = variant {
  Ok;
  Err: text;
};

// Configuration containing a list of rules that replaces the current configuration
type InputConfig = record {
  rules: vec InputRule; 
};

// Initialization arguments for the service
type InitArg = record {
  registry_polling_period_secs: nat64; // IDs of existing API boundary nodes are polled from the registry with this periodicity
};

service : (InitArg) -> {
  // Replaces the current rate-limit configuration with a new set of rules
  overwrite_config: (InputConfig) -> (OverwriteConfigResponse);

  // Make the viewing of the specified rules publicly accessible
  disclose_rules: (vec RuleId) -> (DiscloseRulesResponse);

  // Fetches the rate-limit rule configuration for a specified version
  // If no version is provided, the latest configuration is returned
  get_config: (opt Version) -> (GetConfigResponse);

  // Fetch the rule with metadata by its ID
  get_rule_by_id: (RuleId) -> (GetRuleByIdResponse);
}