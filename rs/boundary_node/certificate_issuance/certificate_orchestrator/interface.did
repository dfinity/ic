type Id = text;
type Name = text;
type Canister = principal;
type Timestamp = nat64;

type State = variant {
    failed: text;
    pendingOrder;
    pendingChallengeResponse;
    pendingAcmeApproval;
    available;
};

type Registration = record {
    name: Name;
    canister: principal;
    state: State;
};

type EncryptedPair = record {
    blob; // privateKey
    blob; // certificate
};

type ExportPackage = record {
    id: Id;
    name: Name;
    canister: principal;
    pair: EncryptedPair;
};

type InitArg = record {
    rootPrincipals: vec principal;
    idSeed: nat;
    registrationExpirationTtl: opt nat64;
    inProgressTtl: opt nat64;
    managementTaskInterval: opt nat64;
};

type CreateRegistrationError = variant {
    Duplicate: Id;
    NameError: text;
    RateLimited: text;
    Unauthorized;
    UnexpectedError: text;
};

type CreateRegistrationResponse = variant {
    Ok: Id;
    Err: CreateRegistrationError;
};

type GetRegistrationError = variant {
    NotFound;
    Unauthorized;
    UnexpectedError: text;
};

type GetRegistrationResponse = variant {
    Ok: Registration;
    Err: GetRegistrationError;
};

type UpdateType = variant {
    Canister: principal;
    State: State;
};

type UpdateRegistrationError = variant {
    NotFound;
    Unauthorized;
    UnexpectedError: text;
};

type UpdateRegistrationResponse = variant {
    Ok;
    Err: UpdateRegistrationError;
};

type RemoveRegistrationError = variant {
    NotFound;
    Unauthorized;
    UnexpectedError: text;
};

type RemoveRegistrationResponse = variant {
    Ok;
    Err: RemoveRegistrationError;
};

type ListRegistrationsError = variant {
    Unauthorized;
    UnexpectedError: text;
};

type ListRegistrationsResponse = variant {
    Ok: vec record { text; Registration };
    Err: ListRegistrationsError;
};

type GetCertificateError = variant {
    NotFound;
    Unauthorized;
    UnexpectedError: text;
};

type GetCertificateResponse = variant {
    Ok: EncryptedPair;
    Err: GetRegistrationError;
};

type UploadCertificateError = variant {
    NotFound;
    Unauthorized;
    UnexpectedError: text;
};

type UploadCertificateResponse = variant {
    Ok;
    Err: UploadCertificateError;
};

type ExportCertificatesError = variant {
    Unauthorized;
    UnexpectedError: text;
};

type ExportCertificatesResponse = variant {
    Ok: vec ExportPackage;
    Err: ExportCertificatesError;
};

type IcCertificate = record {
    cert: blob;
    tree: blob;
};

type ExportCertificatesCertifiedResponse = variant {
    Ok: record {
        vec ExportPackage;
        IcCertificate;
    };
    Err: ExportCertificatesError;
};

type QueueTaskError = variant {
    NotFound;
    Unauthorized;
    UnexpectedError: text;
};

type QueueTaskResponse = variant {
    Ok;
    Err: QueueTaskError;
};

type PeekTaskError = variant {
    NoTasksAvailable;
    Unauthorized;
    UnexpectedError: text;
};

type PeekTaskResponse = variant {
    Ok: Id;
    Err: PeekTaskError;
};

type ListTasksError = variant {
    Unauthorized;
    UnexpectedError: text;
};

type ListTasksResponse = variant {
    Ok: vec record { text; nat64; Registration };
    Err: ListTasksError;
};

type DispenseTaskError = variant {
    NoTasksAvailable;
    Unauthorized;
    UnexpectedError: text;
};

type DispenseTaskResponse = variant {
    Ok: Id;
    Err: DispenseTaskError;
};

type RemoveTaskError = variant {
    NotFound;
    Unauthorized;
    UnexpectedError: text;
};

type RemoveTaskResponse = variant {
    Ok;
    Err: RemoveTaskError;
};

type ModifyAllowedPrincipalError = variant {
    Unauthorized;
    UnexpectedError: text;
};

type ModifyAllowedPrincipalResponse = variant {
    Ok;
    Err: ModifyAllowedPrincipalError;
};

type ListAllowedPrincipalsError = variant {
    Unauthorized;
    UnexpectedError: text;
};

type LisAllowedPrincipalsResponse = variant {
    Ok: vec principal;
    Err: ListAllowedPrincipalsError;
};

type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
};

service: (InitArg) -> {
    // Registrations
    createRegistration: (Name, Canister) -> (CreateRegistrationResponse);
    getRegistration: (Id) -> (GetRegistrationResponse) query;
    updateRegistration: (Id, UpdateType) -> (UpdateRegistrationResponse);
    removeRegistration: (Id) -> (RemoveRegistrationResponse);
    listRegistrations: () -> (ListRegistrationsResponse) query;

    // Certificates
    getCertificate: (Id) -> (GetCertificateResponse) query;
    uploadCertificate: (Id, EncryptedPair) -> (UploadCertificateResponse);
    exportCertificates: () -> (ExportCertificatesResponse) query;
    exportCertificatesPaginated: (opt Id, nat64) -> (ExportCertificatesResponse) query;
    exportCertificatesCertified: (opt Id, nat64) -> (ExportCertificatesCertifiedResponse) query;

    // Tasks
    queueTask: (Id, Timestamp) -> (QueueTaskResponse);
    dispenseTask: () -> (DispenseTaskResponse);
    removeTask: (Id) -> (RemoveTaskResponse);
    peekTask: () -> (PeekTaskResponse) query;
    listTasks: () -> (ListTasksResponse) query;

    // Metrics (Http Interface)
    http_request: (HttpRequest) -> (HttpResponse) query;

    // ACL
    listAllowedPrincipals: () -> (LisAllowedPrincipalsResponse) query;
    addAllowedPrincipal: (principal) -> (ModifyAllowedPrincipalResponse);
    rmAllowedPrincipal: (principal) -> (ModifyAllowedPrincipalResponse);
};
