load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test")
load("//bazel:defs.bzl", "rust_bench")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    # Keep sorted.
    "//rs/certification/test-utils",
    "//rs/config",
    "//rs/crypto/ed25519",
    "//rs/crypto/tree_hash",
    "//rs/crypto/utils/threshold_sig_der",
    "//rs/crypto/utils/tls",
    "//rs/interfaces/registry",
    "//rs/monitoring/logger",
    "//rs/orchestrator/registry_replicator",
    "//rs/protobuf",
    "//rs/registry/client",
    "//rs/registry/fake",
    "//rs/registry/helpers",
    "//rs/registry/keys",
    "//rs/registry/local_store",
    "//rs/registry/proto_data_provider",
    "//rs/registry/routing_table",
    "//rs/registry/subnet_type",
    "//rs/types/base_types",
    "//rs/types/types",
    "@crate_index//:anyhow",
    "@crate_index//:arc-swap",
    "@crate_index//:async-scoped",
    "@crate_index//:axum",
    "@crate_index//:axum-extra",
    "@crate_index//:bytes",
    "@crate_index//:candid",
    "@crate_index//:clap",
    "@crate_index//:dashmap",
    "@crate_index//:ethnum",
    "@crate_index//:futures",
    "@crate_index//:futures-util",
    "@crate_index//:hex",
    "@crate_index//:http",
    "@crate_index//:http-body",
    "@crate_index//:humantime",
    "@crate_index//:ic-bn-lib",
    "@crate_index//:lazy_static",
    "@crate_index//:little-loadshedder",
    "@crate_index//:maxminddb",
    "@crate_index//:mockall",
    "@crate_index//:moka",
    "@crate_index//:nftables",
    "@crate_index//:nix",
    "@crate_index//:prometheus",
    "@crate_index//:rand",
    "@crate_index//:ratelimit",
    "@crate_index//:rcgen",
    "@crate_index//:regex",
    "@crate_index//:reqwest",
    "@crate_index//:rustls",
    "@crate_index//:rustls-pemfile",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
    "@crate_index//:serde_cbor",
    "@crate_index//:serde_json",
    "@crate_index//:serde_regex",
    "@crate_index//:serde_yaml",
    "@crate_index//:simple_moving_average",
    "@crate_index//:slog",
    "@crate_index//:strum",
    "@crate_index//:thiserror",
    "@crate_index//:tikv-jemalloc-ctl",
    "@crate_index//:tikv-jemallocator",
    "@crate_index//:tokio",
    "@crate_index//:tokio-util",
    "@crate_index//:tower",
    "@crate_index//:tower-http",
    "@crate_index//:tower_governor",
    "@crate_index//:tracing",
    "@crate_index//:tracing-serde",
    "@crate_index//:tracing-slog",
    "@crate_index//:tracing-subscriber",
    "@crate_index//:url",
    "@crate_index//:x509-parser",
]

MACRO_DEPENDENCIES = [
    # Keep sorted.
    "@crate_index//:async-trait",
]

DEV_DEPENDENCIES = [
    # Keep sorted.
    "@crate_index//:criterion",
    "@crate_index//:tempfile",
]

MACRO_DEV_DEPENDENCIES = [
    # Keep sorted.
    "@crate_index//:indoc",
]

ALIASES = {}

VERSION = "0.1.0"

rust_binary(
    name = "ic-boundary",
    srcs = glob(
        ["src/**"],
        exclude = ["src/lib.rs"],
    ),
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = VERSION,
    deps = DEPENDENCIES,
)

rust_binary(
    name = "ic-boundary-tls",
    srcs = glob(
        ["src/**"],
        exclude = ["src/lib.rs"],
    ),
    aliases = ALIASES,
    crate_features = ["tls"],
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = VERSION,
    deps = DEPENDENCIES,
)

rust_test(
    name = "ic_boundary_test",
    aliases = ALIASES,
    crate = ":ic-boundary",
    crate_features = ["tls"],
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_library(
    name = "ic_boundary",
    srcs = glob(
        ["src/**"],
        exclude = ["src/main.rs"],
    ),
    aliases = ALIASES,
    crate_features = [
        "tls",
        "bench",
    ],
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    version = VERSION,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_bench(
    name = "ic_boundary_bench",
    srcs = glob(
        [
            "benches/**",
            "src/**",
        ],
        exclude = ["src/main.rs"],
    ),
    aliases = ALIASES,
    crate_root = "benches/perf.rs",
    pin_cpu = True,
    proc_macro_deps = MACRO_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [":ic_boundary"],
)
