// This file is @generated by prost-build.
#[derive(
    PartialOrd,
    Ord,
    Eq,
    candid::CandidType,
    candid::Deserialize,
    Clone,
    Copy,
    PartialEq,
    ::prost::Message,
)]
pub struct DayUtc {
    #[prost(uint64, optional, tag = "1")]
    pub value: ::core::option::Option<u64>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct NodeMetricsDaily {
    #[prost(message, optional, tag = "1")]
    pub subnet_assigned: ::core::option::Option<::ic_base_types::PrincipalId>,
    #[prost(message, optional, tag = "2")]
    pub subnet_assigned_fr_percent:
        ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(uint64, optional, tag = "3")]
    pub num_blocks_proposed: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub num_blocks_failed: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "5")]
    pub original_fr_percent: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(message, optional, tag = "6")]
    pub relative_fr_percent: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct Assigned {
    #[prost(message, optional, tag = "1")]
    pub node_metrics: ::core::option::Option<NodeMetricsDaily>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct Unassigned {
    #[prost(message, optional, tag = "1")]
    pub extrapolated_fr_percent: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct NodeStatus {
    #[prost(oneof = "node_status::Status", tags = "1, 2")]
    pub status: ::core::option::Option<node_status::Status>,
}
/// Nested message and enum types in `NodeStatus`.
pub mod node_status {
    #[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Oneof)]
    pub enum Status {
        #[prost(message, tag = "1")]
        Assigned(super::Assigned),
        #[prost(message, tag = "2")]
        Unassigned(super::Unassigned),
    }
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct DailyResults {
    #[prost(message, optional, tag = "1")]
    pub day: ::core::option::Option<DayUtc>,
    #[prost(message, optional, tag = "2")]
    pub node_status: ::core::option::Option<NodeStatus>,
    #[prost(message, optional, tag = "3")]
    pub performance_multiplier_percent:
        ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(message, optional, tag = "4")]
    pub rewards_reduction_percent:
        ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(message, optional, tag = "5")]
    pub base_rewards_xdr_permyriad:
        ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(message, optional, tag = "6")]
    pub adjusted_rewards_xdr_permyriad:
        ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct NodeResults {
    #[prost(message, optional, tag = "1")]
    pub node_id: ::core::option::Option<::ic_base_types::PrincipalId>,
    #[prost(string, optional, tag = "2")]
    pub node_reward_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub region: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub dc_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "5")]
    pub daily_results: ::prost::alloc::vec::Vec<DailyResults>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct BaseRewards {
    #[prost(message, optional, tag = "1")]
    pub monthly_xdr_permyriad: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(message, optional, tag = "2")]
    pub daily_xdr_permyriad: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(string, optional, tag = "3")]
    pub node_reward_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub region: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct DailyBaseRewardsType3 {
    #[prost(message, optional, tag = "1")]
    pub day: ::core::option::Option<DayUtc>,
    #[prost(string, optional, tag = "2")]
    pub region: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub nodes_count: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "4")]
    pub avg_rewards_xdr_permyriad:
        ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(message, optional, tag = "5")]
    pub avg_coefficient_percent: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
    #[prost(message, optional, tag = "6")]
    pub value_xdr_permyriad: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
}
#[derive(candid::CandidType, candid::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct NodeProviderRewards {
    #[prost(uint64, optional, tag = "1")]
    pub rewards_total_xdr_permyriad: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "2")]
    pub base_rewards: ::prost::alloc::vec::Vec<BaseRewards>,
    #[prost(message, repeated, tag = "3")]
    pub base_rewards_type3: ::prost::alloc::vec::Vec<DailyBaseRewardsType3>,
    #[prost(message, repeated, tag = "4")]
    pub nodes_results: ::prost::alloc::vec::Vec<NodeResults>,
}
#[derive(PartialOrd, Ord, Eq, Clone, PartialEq, ::prost::Message)]
pub struct NodeProviderRewardsKey {
    #[prost(message, optional, tag = "1")]
    pub principal_id: ::core::option::Option<::ic_base_types::PrincipalId>,
    #[prost(message, optional, tag = "2")]
    pub end_day: ::core::option::Option<DayUtc>,
    #[prost(message, optional, tag = "3")]
    pub start_day: ::core::option::Option<DayUtc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubnetsFailureRateValue {
    #[prost(message, optional, tag = "1")]
    pub subnet_fr_percent: ::core::option::Option<::ic_nervous_system_proto::pb::v1::Decimal>,
}
#[derive(PartialOrd, Ord, Eq, Clone, PartialEq, ::prost::Message)]
pub struct SubnetsFailureRateKey {
    #[prost(message, optional, tag = "1")]
    pub day: ::core::option::Option<DayUtc>,
    #[prost(message, optional, tag = "2")]
    pub subnet_id: ::core::option::Option<::ic_base_types::PrincipalId>,
}
#[derive(
    candid::CandidType,
    candid::Deserialize,
    Clone,
    Copy,
    Debug,
    PartialEq,
    Eq,
    Hash,
    PartialOrd,
    Ord,
    ::prost::Enumeration,
)]
#[repr(i32)]
pub enum RewardsCalculatorVersion {
    Unspecified = 0,
    V1 = 1,
}
impl RewardsCalculatorVersion {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "REWARDS_CALCULATOR_VERSION_UNSPECIFIED",
            Self::V1 => "REWARDS_CALCULATOR_VERSION_V1",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REWARDS_CALCULATOR_VERSION_UNSPECIFIED" => Some(Self::Unspecified),
            "REWARDS_CALCULATOR_VERSION_V1" => Some(Self::V1),
            _ => None,
        }
    }
}
