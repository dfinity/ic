// get_node_providers_rewards_calculation

type DateUtc = record {
  day: opt nat32;
  month: opt nat32;
  year: opt nat32;
};

type NodeMetricsDaily = record {
  subnet_assigned: opt principal;
  subnet_assigned_fr_percent: opt float64;
  num_blocks_proposed: opt nat64;
  num_blocks_failed: opt nat64;
  original_fr_percent: opt float64;
  relative_fr_percent: opt float64;
};

type DailyNodeFailureRate = variant {
  SubnetMember: record { node_metrics: opt NodeMetricsDaily };
  NonSubnetMember: record { extrapolated_fr_percent: opt float64 };
};

type DailyNodeRewards = record {
  node_id: opt principal;
  node_reward_type: opt text;
  region: opt text;
  dc_id: opt text;
  daily_node_fr: opt DailyNodeFailureRate;
  performance_multiplier_percent: opt float64;
  rewards_reduction_percent: opt float64;
  base_rewards_xdr_permyriad: opt nat64;
  adjusted_rewards_xdr_permyriad: opt nat64;
};

type NodeTypeRegionBaseRewards = record {
  monthly_xdr_permyriad: opt nat64;
  daily_xdr_permyriad: opt nat64;
  node_reward_type: opt text;
  region: opt text;
};

type Type3BaseRewards = record {
  region: opt text;
  nodes_count: opt nat64;
  avg_rewards_xdr_permyriad: opt nat64;
  avg_coefficient_percent: opt float64;
  daily_xdr_permyriad: opt nat64;
};

type DailyNodeProviderRewards = record {
  rewards_total_xdr_permyriad: opt nat64;
  base_rewards: vec NodeTypeRegionBaseRewards;
  base_rewards_type3: vec Type3BaseRewards;
  daily_nodes_rewards: vec DailyNodeRewards;
};

type DailyResults = record {
    subnets_fr: vec record { principal; float64 };
    provider_results: vec record { principal; DailyNodeProviderRewards };
};

type GetNodeProvidersRewardsCalculationResponse = variant { Ok: DailyResults; Err: text };

type GetNodeProvidersRewardsCalculationRequest = record {
  day: DateUtc;
};

// get_node_providers_rewards

type NodeProvidersRewards = record {
  rewards_xdr_permyriad: vec record {
    principal;
    nat64;
  };
};

type GetNodeProvidersRewardsRequest = record {
  from_day: DateUtc;
  to_day: DateUtc;
};

type GetNodeProvidersRewardsResponse = variant { Ok: NodeProvidersRewards; Err: text };


// get_node_providers_monthly_xdr_rewards

type GetNodeProvidersMonthlyXdrRewardsRequest = record {
    registry_version: opt nat64;
};

type GetNodeProvidersMonthlyXdrRewardsResponse = record {
    rewards: opt NodeProvidersMonthlyXdrRewards;
    error: opt text;
};

type NodeProvidersMonthlyXdrRewards = record {
    rewards: vec record { principal; nat64 };
    registry_version: opt nat64;
};

service: () -> {
    get_node_providers_monthly_xdr_rewards: (GetNodeProvidersMonthlyXdrRewardsRequest) -> (
        GetNodeProvidersMonthlyXdrRewardsResponse
    );
    get_node_providers_rewards: (GetNodeProvidersRewardsRequest) -> (GetNodeProvidersRewardsResponse);
    get_node_providers_rewards_calculation: (GetNodeProvidersRewardsCalculationRequest) -> (GetNodeProvidersRewardsCalculationResponse) query;
}
